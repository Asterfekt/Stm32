
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003900  08003900  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003978  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003978  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec4d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6a  00000000  00000000  0002eced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001709f  00000000  00000000  00032210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3d0  00000000  00000000  000492af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8a8  00000000  00000000  0005667f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4f27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000e4f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003820 	.word	0x08003820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003820 	.word	0x08003820

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b0a      	cmp	r3, #10
 8000584:	d102      	bne.n	800058c <__io_putchar+0x14>
    __io_putchar('\r');
 8000586:	200d      	movs	r0, #13
 8000588:	f7ff fff6 	bl	8000578 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x2c>)
 8000596:	f001 fef2 	bl	800237e <HAL_UART_Transmit>

  return 1;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000e0 	.word	0x200000e0

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fb01 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f81f 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8fb 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f8cf 	bl	800075c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005be:	f000 f879 	bl	80006b4 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim3);
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <main+0x44>)
 80005c4:	f001 fa96 	bl	8001af4 <HAL_TIM_Base_Start>
  uint32_t old_value = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]

  while (1)
  {
    uint32_t value = __HAL_TIM_GET_COUNTER(&htim3);
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <main+0x44>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d2:	603b      	str	r3, [r7, #0]

    if (old_value != value) {
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d0f7      	beq.n	80005cc <main+0x24>
      old_value = value;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	607b      	str	r3, [r7, #4]
      printf("value = %lu\n", value);
 80005e0:	6839      	ldr	r1, [r7, #0]
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <main+0x48>)
 80005e4:	f002 f9c6 	bl	8002974 <iprintf>
  {
 80005e8:	e7f0      	b.n	80005cc <main+0x24>
 80005ea:	bf00      	nop
 80005ec:	20000098 	.word	0x20000098
 80005f0:	08003838 	.word	0x08003838

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f9ae 	bl	8002964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xb8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a22      	ldr	r2, [pc, #136]	; (80006ac <SystemClock_Config+0xb8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <SystemClock_Config+0xbc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <SystemClock_Config+0xbc>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <SystemClock_Config+0xbc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fdab 	bl	80011c4 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000674:	f000 f8c4 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f80e 	bl	80016b4 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800069e:	f000 f8af 	bl	8000800 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_TIM3_Init+0xa4>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006f6:	4817      	ldr	r0, [pc, #92]	; (8000754 <MX_TIM3_Init+0xa0>)
 80006f8:	f001 f9ac 	bl	8001a54 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f87d 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 8000714:	230f      	movs	r3, #15
 8000716:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_TIM3_Init+0xa0>)
 8000720:	f001 fb4a 	bl	8001db8 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800072a:	f000 f869 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_TIM3_Init+0xa0>)
 800073c:	f001 fd50 	bl	80021e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000746:	f000 f85b 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000098 	.word	0x20000098
 8000758:	40000400 	.word	0x40000400

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f001 fda6 	bl	80022e4 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f82f 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000e0 	.word	0x200000e0
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_TIM_Base_MspInit+0x94>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d133      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_TIM_Base_MspInit+0x98>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <HAL_TIM_Base_MspInit+0x98>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_TIM_Base_MspInit+0x98>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_TIM_Base_MspInit+0x98>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_TIM_Base_MspInit+0x98>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_TIM_Base_MspInit+0x98>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008c6:	2302      	movs	r3, #2
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_TIM_Base_MspInit+0x9c>)
 80008d2:	f000 faf3 	bl	8000ebc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210a      	movs	r1, #10
 80008da:	201d      	movs	r0, #29
 80008dc:	f000 fab7 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e0:	201d      	movs	r0, #29
 80008e2:	f000 fad0 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40000400 	.word	0x40000400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020c00 	.word	0x40020c00

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	; (8000980 <HAL_UART_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12b      	bne.n	8000976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_UART_MspInit+0x88>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_UART_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000956:	230c      	movs	r3, #12
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000966:	2307      	movs	r3, #7
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_UART_MspInit+0x8c>)
 8000972:	f000 faa3 	bl	8000ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40004400 	.word	0x40004400
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f93e 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM3_IRQHandler+0x10>)
 80009e6:	f001 f8df 	bl	8001ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000098 	.word	0x20000098

080009f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
	}

return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e009      	b.n	8000a54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fd95 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf1      	blt.n	8000a40 <_write+0x12>
	}
	return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_close>:

int _close(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_isatty>:

int _isatty(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f001 ff06 	bl	8002910 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20018000 	.word	0x20018000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	20000138 	.word	0x20000138

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 fec5 	bl	800291c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fd09 	bl	80005a8 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ba4:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 8000ba8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bac:	20000138 	.word	0x20000138

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f92b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe10 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f943 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f90b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000124 	.word	0x20000124

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000124 	.word	0x20000124

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e159      	b.n	800118c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8148 	bne.w	8001186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d130      	bne.n	8000f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d017      	beq.n	8000fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d123      	bne.n	8001000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0203 	and.w	r2, r3, #3
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80a2 	beq.w	8001186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a56      	ldr	r2, [pc, #344]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x2ec>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a49      	ldr	r2, [pc, #292]	; (80011ac <HAL_GPIO_Init+0x2f0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x202>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2f4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x1fe>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_GPIO_Init+0x2f8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x1fa>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_GPIO_Init+0x2fc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x1f6>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_Init+0x300>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x1f2>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x204>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x2ec>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_GPIO_Init+0x304>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112c:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f aea2 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e264      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d075      	beq.n	80012ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e2:	4ba3      	ldr	r3, [pc, #652]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d00c      	beq.n	8001208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4ba0      	ldr	r3, [pc, #640]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d112      	bne.n	8001220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b9d      	ldr	r3, [pc, #628]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001206:	d10b      	bne.n	8001220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d05b      	beq.n	80012cc <HAL_RCC_OscConfig+0x108>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d157      	bne.n	80012cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e23f      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d106      	bne.n	8001238 <HAL_RCC_OscConfig+0x74>
 800122a:	4b91      	ldr	r3, [pc, #580]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a90      	ldr	r2, [pc, #576]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e01d      	b.n	8001274 <HAL_RCC_OscConfig+0xb0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x98>
 8001242:	4b8b      	ldr	r3, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a8a      	ldr	r2, [pc, #552]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a87      	ldr	r2, [pc, #540]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0xb0>
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a83      	ldr	r2, [pc, #524]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b81      	ldr	r3, [pc, #516]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a80      	ldr	r2, [pc, #512]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fd00 	bl	8000c80 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fcfc 	bl	8000c80 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e204      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0xc0>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fcec 	bl	8000c80 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fce8 	bl	8000c80 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1f0      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	4b6c      	ldr	r3, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0xe8>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d063      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b62      	ldr	r3, [pc, #392]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d11c      	bne.n	800132c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d116      	bne.n	800132c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x152>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e1c4      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4952      	ldr	r1, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	e03a      	b.n	80013a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d020      	beq.n	8001376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <HAL_RCC_OscConfig+0x2b0>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fca1 	bl	8000c80 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fc9d 	bl	8000c80 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1a5      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4940      	ldr	r1, [pc, #256]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001376:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <HAL_RCC_OscConfig+0x2b0>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fc80 	bl	8000c80 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001384:	f7ff fc7c 	bl	8000c80 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e184      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d030      	beq.n	8001410 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d016      	beq.n	80013e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x2b4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013bc:	f7ff fc60 	bl	8000c80 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc5c 	bl	8000c80 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e164      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x200>
 80013e2:	e015      	b.n	8001410 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x2b4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fc49 	bl	8000c80 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc45 	bl	8000c80 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e14d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a0 	beq.w	800155e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x2b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d121      	bne.n	800149e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_RCC_OscConfig+0x2b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_RCC_OscConfig+0x2b8>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc0b 	bl	8000c80 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e011      	b.n	8001492 <HAL_RCC_OscConfig+0x2ce>
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
 800147c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001480:	f7ff fbfe 	bl	8000c80 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e106      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x4e4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a80      	ldr	r2, [pc, #512]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x32a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x312>
 80014bc:	4b7b      	ldr	r3, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	4b78      	ldr	r3, [pc, #480]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a77      	ldr	r2, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x32a>
 80014d6:	4b75      	ldr	r3, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a74      	ldr	r2, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	4b72      	ldr	r3, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a71      	ldr	r2, [pc, #452]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fbc3 	bl	8000c80 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fbbf 	bl	8000c80 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0c5      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b65      	ldr	r3, [pc, #404]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x33a>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fbad 	bl	8000c80 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fba9 	bl	8000c80 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0af      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a55      	ldr	r2, [pc, #340]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 809b 	beq.w	800169e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d05c      	beq.n	800162e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d141      	bne.n	8001600 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x4ec>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb7d 	bl	8000c80 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb79 	bl	8000c80 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e081      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	019b      	lsls	r3, r3, #6
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	4937      	ldr	r1, [pc, #220]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x4ec>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb52 	bl	8000c80 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fb4e 	bl	8000c80 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e056      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x41c>
 80015fe:	e04e      	b.n	800169e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x4ec>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb3b 	bl	8000c80 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb37 	bl	8000c80 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e03f      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x44a>
 800162c:	e037      	b.n	800169e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e032      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_RCC_OscConfig+0x4e8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d028      	beq.n	800169a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d121      	bne.n	800169a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d11a      	bne.n	800169a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800166a:	4013      	ands	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001670:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001672:	4293      	cmp	r3, r2
 8001674:	d111      	bne.n	800169a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	3b01      	subs	r3, #1
 8001684:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d107      	bne.n	800169a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40007000 	.word	0x40007000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	42470060 	.word	0x42470060

080016b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0cc      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d90c      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b65      	ldr	r3, [pc, #404]	; (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b8      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001708:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800172a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	494d      	ldr	r1, [pc, #308]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d044      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d119      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e07f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d003      	beq.n	8001772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	2b03      	cmp	r3, #3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e06f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e067      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4934      	ldr	r1, [pc, #208]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fa6c 	bl	8000c80 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff fa68 	bl	8000c80 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e04f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d20c      	bcs.n	80017fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e032      	b.n	8001862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4916      	ldr	r1, [pc, #88]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	490e      	ldr	r1, [pc, #56]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800183a:	f000 f821 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800183e:	4602      	mov	r2, r0
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	490a      	ldr	r1, [pc, #40]	; (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	4a09      	ldr	r2, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f9cc 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00
 8001870:	40023800 	.word	0x40023800
 8001874:	08003848 	.word	0x08003848
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001886:	2100      	movs	r1, #0
 8001888:	6079      	str	r1, [r7, #4]
 800188a:	2100      	movs	r1, #0
 800188c:	60f9      	str	r1, [r7, #12]
 800188e:	2100      	movs	r1, #0
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001892:	2100      	movs	r1, #0
 8001894:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001896:	4952      	ldr	r1, [pc, #328]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001898:	6889      	ldr	r1, [r1, #8]
 800189a:	f001 010c 	and.w	r1, r1, #12
 800189e:	2908      	cmp	r1, #8
 80018a0:	d00d      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x3e>
 80018a2:	2908      	cmp	r1, #8
 80018a4:	f200 8094 	bhi.w	80019d0 <HAL_RCC_GetSysClockFreq+0x150>
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x32>
 80018ac:	2904      	cmp	r1, #4
 80018ae:	d003      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x38>
 80018b0:	e08e      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80018b4:	60bb      	str	r3, [r7, #8]
       break;
 80018b6:	e08e      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80018ba:	60bb      	str	r3, [r7, #8]
      break;
 80018bc:	e08b      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018be:	4948      	ldr	r1, [pc, #288]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018c0:	6849      	ldr	r1, [r1, #4]
 80018c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80018c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c8:	4945      	ldr	r1, [pc, #276]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ca:	6849      	ldr	r1, [r1, #4]
 80018cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018d0:	2900      	cmp	r1, #0
 80018d2:	d024      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d4:	4942      	ldr	r1, [pc, #264]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018d6:	6849      	ldr	r1, [r1, #4]
 80018d8:	0989      	lsrs	r1, r1, #6
 80018da:	4608      	mov	r0, r1
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018e4:	f04f 0500 	mov.w	r5, #0
 80018e8:	ea00 0204 	and.w	r2, r0, r4
 80018ec:	ea01 0305 	and.w	r3, r1, r5
 80018f0:	493d      	ldr	r1, [pc, #244]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80018f2:	fb01 f003 	mul.w	r0, r1, r3
 80018f6:	2100      	movs	r1, #0
 80018f8:	fb01 f102 	mul.w	r1, r1, r2
 80018fc:	1844      	adds	r4, r0, r1
 80018fe:	493a      	ldr	r1, [pc, #232]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001900:	fba2 0101 	umull	r0, r1, r2, r1
 8001904:	1863      	adds	r3, r4, r1
 8001906:	4619      	mov	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	461a      	mov	r2, r3
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	f7fe fcb6 	bl	8000280 <__aeabi_uldivmod>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4613      	mov	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e04a      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	461a      	mov	r2, r3
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	ea02 0400 	and.w	r4, r2, r0
 8001936:	ea03 0501 	and.w	r5, r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	014b      	lsls	r3, r1, #5
 8001948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800194c:	0142      	lsls	r2, r0, #5
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	1b00      	subs	r0, r0, r4
 8001954:	eb61 0105 	sbc.w	r1, r1, r5
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	018b      	lsls	r3, r1, #6
 8001962:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001966:	0182      	lsls	r2, r0, #6
 8001968:	1a12      	subs	r2, r2, r0
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	00d9      	lsls	r1, r3, #3
 8001978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800197c:	00d0      	lsls	r0, r2, #3
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	1912      	adds	r2, r2, r4
 8001984:	eb45 0303 	adc.w	r3, r5, r3
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0299      	lsls	r1, r3, #10
 8001992:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001996:	0290      	lsls	r0, r2, #10
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f7fe fc6a 	bl	8000280 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	3301      	adds	r3, #1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	60bb      	str	r3, [r7, #8]
      break;
 80019ce:	e002      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80019d2:	60bb      	str	r3, [r7, #8]
      break;
 80019d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d6:	68bb      	ldr	r3, [r7, #8]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdb0      	pop	{r4, r5, r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	017d7840 	.word	0x017d7840

080019ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000000 	.word	0x20000000

08001a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a08:	f7ff fff0 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0a9b      	lsrs	r3, r3, #10
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08003858 	.word	0x08003858

08001a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a30:	f7ff ffdc 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0b5b      	lsrs	r3, r3, #13
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08003858 	.word	0x08003858

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe feee 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 fa8a 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d001      	beq.n	8001b0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e03c      	b.n	8001b86 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_TIM_Base_Start+0xa0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d018      	beq.n	8001b50 <HAL_TIM_Base_Start+0x5c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b26:	d013      	beq.n	8001b50 <HAL_TIM_Base_Start+0x5c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_TIM_Base_Start+0xa4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00e      	beq.n	8001b50 <HAL_TIM_Base_Start+0x5c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_TIM_Base_Start+0xa8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_TIM_Base_Start+0x5c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_TIM_Base_Start+0xac>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d004      	beq.n	8001b50 <HAL_TIM_Base_Start+0x5c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_TIM_Base_Start+0xb0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d010      	beq.n	8001b84 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b72:	e007      	b.n	8001b84 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40000800 	.word	0x40000800
 8001ba0:	40000c00 	.word	0x40000c00
 8001ba4:	40014000 	.word	0x40014000

08001ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0202 	mvn.w	r2, #2
 8001bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f9bf 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f9b1 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f9c2 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0204 	mvn.w	r2, #4
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f995 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f987 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f998 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0208 	mvn.w	r2, #8
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f96b 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f95d 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f96e 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0210 	mvn.w	r2, #16
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f941 	bl	8001f6e <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f933 	bl	8001f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f944 	bl	8001f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10e      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0201 	mvn.w	r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f90d 	bl	8001f46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b80      	cmp	r3, #128	; 0x80
 8001d38:	d10e      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d107      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fabc 	bl	80022d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f909 	bl	8001f96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0220 	mvn.w	r2, #32
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fa86 	bl	80022bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e0b4      	b.n	8001f3e <HAL_TIM_ConfigClockSource+0x186>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0c:	d03e      	beq.n	8001e8c <HAL_TIM_ConfigClockSource+0xd4>
 8001e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e12:	f200 8087 	bhi.w	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	f000 8086 	beq.w	8001f2a <HAL_TIM_ConfigClockSource+0x172>
 8001e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e22:	d87f      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e24:	2b70      	cmp	r3, #112	; 0x70
 8001e26:	d01a      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0xa6>
 8001e28:	2b70      	cmp	r3, #112	; 0x70
 8001e2a:	d87b      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e2c:	2b60      	cmp	r3, #96	; 0x60
 8001e2e:	d050      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8001e30:	2b60      	cmp	r3, #96	; 0x60
 8001e32:	d877      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e34:	2b50      	cmp	r3, #80	; 0x50
 8001e36:	d03c      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8001e38:	2b50      	cmp	r3, #80	; 0x50
 8001e3a:	d873      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d058      	beq.n	8001ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d86f      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e44:	2b30      	cmp	r3, #48	; 0x30
 8001e46:	d064      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15a>
 8001e48:	2b30      	cmp	r3, #48	; 0x30
 8001e4a:	d86b      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d060      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15a>
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d867      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d05c      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15a>
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d05a      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x15a>
 8001e5c:	e062      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f000 f997 	bl	80021a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	609a      	str	r2, [r3, #8]
      break;
 8001e8a:	e04f      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f000 f980 	bl	80021a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eae:	609a      	str	r2, [r3, #8]
      break;
 8001eb0:	e03c      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f000 f8f4 	bl	80020ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2150      	movs	r1, #80	; 0x50
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f94d 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001ed0:	e02c      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f000 f913 	bl	800210a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2160      	movs	r1, #96	; 0x60
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f93d 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001ef0:	e01c      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f000 f8d4 	bl	80020ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2140      	movs	r1, #64	; 0x40
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f92d 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001f10:	e00c      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f000 f924 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001f22:	e003      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      break;
 8001f28:	e000      	b.n	8001f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a34      	ldr	r2, [pc, #208]	; (8002090 <TIM_Base_SetConfig+0xe4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00f      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d00b      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a31      	ldr	r2, [pc, #196]	; (8002094 <TIM_Base_SetConfig+0xe8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a30      	ldr	r2, [pc, #192]	; (8002098 <TIM_Base_SetConfig+0xec>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x38>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <TIM_Base_SetConfig+0xf0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d108      	bne.n	8001ff6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <TIM_Base_SetConfig+0xe4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a22      	ldr	r2, [pc, #136]	; (8002094 <TIM_Base_SetConfig+0xe8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a21      	ldr	r2, [pc, #132]	; (8002098 <TIM_Base_SetConfig+0xec>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a20      	ldr	r2, [pc, #128]	; (800209c <TIM_Base_SetConfig+0xf0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <TIM_Base_SetConfig+0xf4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <TIM_Base_SetConfig+0xf8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <TIM_Base_SetConfig+0xfc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <TIM_Base_SetConfig+0xe4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40014000 	.word	0x40014000
 80020a4:	40014400 	.word	0x40014400
 80020a8:	40014800 	.word	0x40014800

080020ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f023 0201 	bic.w	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f023 030a 	bic.w	r3, r3, #10
 80020e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	621a      	str	r2, [r3, #32]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210a:	b480      	push	{r7}
 800210c:	b087      	sub	sp, #28
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f023 0210 	bic.w	r2, r3, #16
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	621a      	str	r2, [r3, #32]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	f043 0307 	orr.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	021a      	lsls	r2, r3, #8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e050      	b.n	800229a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d018      	beq.n	800226e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d013      	beq.n	800226e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10c      	bne.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	4313      	orrs	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40000c00 	.word	0x40000c00
 80022b8:	40014000 	.word	0x40014000

080022bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e03f      	b.n	8002376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe faf6 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f929 	bl	8002580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800233c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800234c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800235c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b08a      	sub	sp, #40	; 0x28
 8002382:	af02      	add	r7, sp, #8
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b20      	cmp	r3, #32
 800239c:	d17c      	bne.n	8002498 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_UART_Transmit+0x2c>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e075      	b.n	800249a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Transmit+0x3e>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e06e      	b.n	800249a <HAL_UART_Transmit+0x11c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	; 0x21
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fc55 	bl	8000c80 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d108      	bne.n	8002400 <HAL_UART_Transmit+0x82>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e003      	b.n	8002408 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002410:	e02a      	b.n	8002468 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f840 	bl	80024a2 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e036      	b.n	800249a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	3302      	adds	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	e007      	b.n	800245a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3301      	adds	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1cf      	bne.n	8002412 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	2140      	movs	r1, #64	; 0x40
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f810 	bl	80024a2 <UART_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e006      	b.n	800249a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b090      	sub	sp, #64	; 0x40
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b2:	e050      	b.n	8002556 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ba:	d04c      	beq.n	8002556 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024c2:	f7fe fbdd 	bl	8000c80 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d241      	bcs.n	8002556 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024f2:	637a      	str	r2, [r7, #52]	; 0x34
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e5      	bne.n	80024d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3314      	adds	r3, #20
 800250c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	e853 3f00 	ldrex	r3, [r3]
 8002514:	613b      	str	r3, [r7, #16]
   return(result);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3314      	adds	r3, #20
 8002524:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002526:	623a      	str	r2, [r7, #32]
 8002528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	69f9      	ldr	r1, [r7, #28]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	e841 2300 	strex	r3, r2, [r1]
 8002532:	61bb      	str	r3, [r7, #24]
   return(result);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e5      	bne.n	8002506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e00f      	b.n	8002576 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d09f      	beq.n	80024b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3740      	adds	r7, #64	; 0x40
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	b09f      	sub	sp, #124	; 0x7c
 8002586:	af00      	add	r7, sp, #0
 8002588:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002596:	68d9      	ldr	r1, [r3, #12]
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	ea40 0301 	orr.w	r3, r0, r1
 80025a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025c4:	f021 010c 	bic.w	r1, r1, #12
 80025c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025de:	6999      	ldr	r1, [r3, #24]
 80025e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	ea40 0301 	orr.w	r3, r0, r1
 80025e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4bc5      	ldr	r3, [pc, #788]	; (8002904 <UART_SetConfig+0x384>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d004      	beq.n	80025fe <UART_SetConfig+0x7e>
 80025f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4bc3      	ldr	r3, [pc, #780]	; (8002908 <UART_SetConfig+0x388>)
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d103      	bne.n	8002606 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025fe:	f7ff fa15 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8002602:	6778      	str	r0, [r7, #116]	; 0x74
 8002604:	e002      	b.n	800260c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002606:	f7ff f9fd 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 800260a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002614:	f040 80b6 	bne.w	8002784 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261a:	461c      	mov	r4, r3
 800261c:	f04f 0500 	mov.w	r5, #0
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	1891      	adds	r1, r2, r2
 8002626:	6439      	str	r1, [r7, #64]	; 0x40
 8002628:	415b      	adcs	r3, r3
 800262a:	647b      	str	r3, [r7, #68]	; 0x44
 800262c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002630:	1912      	adds	r2, r2, r4
 8002632:	eb45 0303 	adc.w	r3, r5, r3
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	00d9      	lsls	r1, r3, #3
 8002640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002644:	00d0      	lsls	r0, r2, #3
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	1911      	adds	r1, r2, r4
 800264c:	6639      	str	r1, [r7, #96]	; 0x60
 800264e:	416b      	adcs	r3, r5
 8002650:	667b      	str	r3, [r7, #100]	; 0x64
 8002652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	1891      	adds	r1, r2, r2
 800265e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002660:	415b      	adcs	r3, r3
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002668:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800266c:	f7fd fe08 	bl	8000280 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4ba5      	ldr	r3, [pc, #660]	; (800290c <UART_SetConfig+0x38c>)
 8002676:	fba3 2302 	umull	r2, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	011e      	lsls	r6, r3, #4
 800267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002680:	461c      	mov	r4, r3
 8002682:	f04f 0500 	mov.w	r5, #0
 8002686:	4622      	mov	r2, r4
 8002688:	462b      	mov	r3, r5
 800268a:	1891      	adds	r1, r2, r2
 800268c:	6339      	str	r1, [r7, #48]	; 0x30
 800268e:	415b      	adcs	r3, r3
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
 8002692:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002696:	1912      	adds	r2, r2, r4
 8002698:	eb45 0303 	adc.w	r3, r5, r3
 800269c:	f04f 0000 	mov.w	r0, #0
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	00d9      	lsls	r1, r3, #3
 80026a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026aa:	00d0      	lsls	r0, r2, #3
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	1911      	adds	r1, r2, r4
 80026b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80026b4:	416b      	adcs	r3, r5
 80026b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	1891      	adds	r1, r2, r2
 80026c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80026c6:	415b      	adcs	r3, r3
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026d2:	f7fd fdd5 	bl	8000280 <__aeabi_uldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4b8c      	ldr	r3, [pc, #560]	; (800290c <UART_SetConfig+0x38c>)
 80026dc:	fba3 1302 	umull	r1, r3, r3, r2
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	2164      	movs	r1, #100	; 0x64
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	3332      	adds	r3, #50	; 0x32
 80026ee:	4a87      	ldr	r2, [pc, #540]	; (800290c <UART_SetConfig+0x38c>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026fc:	441e      	add	r6, r3
 80026fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002700:	4618      	mov	r0, r3
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	1894      	adds	r4, r2, r2
 800270c:	623c      	str	r4, [r7, #32]
 800270e:	415b      	adcs	r3, r3
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
 8002712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002716:	1812      	adds	r2, r2, r0
 8002718:	eb41 0303 	adc.w	r3, r1, r3
 800271c:	f04f 0400 	mov.w	r4, #0
 8002720:	f04f 0500 	mov.w	r5, #0
 8002724:	00dd      	lsls	r5, r3, #3
 8002726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800272a:	00d4      	lsls	r4, r2, #3
 800272c:	4622      	mov	r2, r4
 800272e:	462b      	mov	r3, r5
 8002730:	1814      	adds	r4, r2, r0
 8002732:	653c      	str	r4, [r7, #80]	; 0x50
 8002734:	414b      	adcs	r3, r1
 8002736:	657b      	str	r3, [r7, #84]	; 0x54
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	1891      	adds	r1, r2, r2
 8002744:	61b9      	str	r1, [r7, #24]
 8002746:	415b      	adcs	r3, r3
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002752:	f7fd fd95 	bl	8000280 <__aeabi_uldivmod>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4b6c      	ldr	r3, [pc, #432]	; (800290c <UART_SetConfig+0x38c>)
 800275c:	fba3 1302 	umull	r1, r3, r3, r2
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	2164      	movs	r1, #100	; 0x64
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	3332      	adds	r3, #50	; 0x32
 800276e:	4a67      	ldr	r2, [pc, #412]	; (800290c <UART_SetConfig+0x38c>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	f003 0207 	and.w	r2, r3, #7
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4432      	add	r2, r6
 8002780:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002782:	e0b9      	b.n	80028f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002786:	461c      	mov	r4, r3
 8002788:	f04f 0500 	mov.w	r5, #0
 800278c:	4622      	mov	r2, r4
 800278e:	462b      	mov	r3, r5
 8002790:	1891      	adds	r1, r2, r2
 8002792:	6139      	str	r1, [r7, #16]
 8002794:	415b      	adcs	r3, r3
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800279c:	1912      	adds	r2, r2, r4
 800279e:	eb45 0303 	adc.w	r3, r5, r3
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	00d9      	lsls	r1, r3, #3
 80027ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b0:	00d0      	lsls	r0, r2, #3
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	eb12 0804 	adds.w	r8, r2, r4
 80027ba:	eb43 0905 	adc.w	r9, r3, r5
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	008b      	lsls	r3, r1, #2
 80027d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027d6:	0082      	lsls	r2, r0, #2
 80027d8:	4640      	mov	r0, r8
 80027da:	4649      	mov	r1, r9
 80027dc:	f7fd fd50 	bl	8000280 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4b49      	ldr	r3, [pc, #292]	; (800290c <UART_SetConfig+0x38c>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	011e      	lsls	r6, r3, #4
 80027ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f0:	4618      	mov	r0, r3
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	1894      	adds	r4, r2, r2
 80027fc:	60bc      	str	r4, [r7, #8]
 80027fe:	415b      	adcs	r3, r3
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002806:	1812      	adds	r2, r2, r0
 8002808:	eb41 0303 	adc.w	r3, r1, r3
 800280c:	f04f 0400 	mov.w	r4, #0
 8002810:	f04f 0500 	mov.w	r5, #0
 8002814:	00dd      	lsls	r5, r3, #3
 8002816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800281a:	00d4      	lsls	r4, r2, #3
 800281c:	4622      	mov	r2, r4
 800281e:	462b      	mov	r3, r5
 8002820:	1814      	adds	r4, r2, r0
 8002822:	64bc      	str	r4, [r7, #72]	; 0x48
 8002824:	414b      	adcs	r3, r1
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	008b      	lsls	r3, r1, #2
 800283c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002840:	0082      	lsls	r2, r0, #2
 8002842:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002846:	f7fd fd1b 	bl	8000280 <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4b2f      	ldr	r3, [pc, #188]	; (800290c <UART_SetConfig+0x38c>)
 8002850:	fba3 1302 	umull	r1, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	2164      	movs	r1, #100	; 0x64
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	3332      	adds	r3, #50	; 0x32
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <UART_SetConfig+0x38c>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286e:	441e      	add	r6, r3
 8002870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002872:	4618      	mov	r0, r3
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	1894      	adds	r4, r2, r2
 800287e:	603c      	str	r4, [r7, #0]
 8002880:	415b      	adcs	r3, r3
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002888:	1812      	adds	r2, r2, r0
 800288a:	eb41 0303 	adc.w	r3, r1, r3
 800288e:	f04f 0400 	mov.w	r4, #0
 8002892:	f04f 0500 	mov.w	r5, #0
 8002896:	00dd      	lsls	r5, r3, #3
 8002898:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800289c:	00d4      	lsls	r4, r2, #3
 800289e:	4622      	mov	r2, r4
 80028a0:	462b      	mov	r3, r5
 80028a2:	eb12 0a00 	adds.w	sl, r2, r0
 80028a6:	eb43 0b01 	adc.w	fp, r3, r1
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	008b      	lsls	r3, r1, #2
 80028be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028c2:	0082      	lsls	r2, r0, #2
 80028c4:	4650      	mov	r0, sl
 80028c6:	4659      	mov	r1, fp
 80028c8:	f7fd fcda 	bl	8000280 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <UART_SetConfig+0x38c>)
 80028d2:	fba3 1302 	umull	r1, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2164      	movs	r1, #100	; 0x64
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <UART_SetConfig+0x38c>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4432      	add	r2, r6
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	377c      	adds	r7, #124	; 0x7c
 80028fc:	46bd      	mov	sp, r7
 80028fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002902:	bf00      	nop
 8002904:	40011000 	.word	0x40011000
 8002908:	40011400 	.word	0x40011400
 800290c:	51eb851f 	.word	0x51eb851f

08002910 <__errno>:
 8002910:	4b01      	ldr	r3, [pc, #4]	; (8002918 <__errno+0x8>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000000c 	.word	0x2000000c

0800291c <__libc_init_array>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	4d0d      	ldr	r5, [pc, #52]	; (8002954 <__libc_init_array+0x38>)
 8002920:	4c0d      	ldr	r4, [pc, #52]	; (8002958 <__libc_init_array+0x3c>)
 8002922:	1b64      	subs	r4, r4, r5
 8002924:	10a4      	asrs	r4, r4, #2
 8002926:	2600      	movs	r6, #0
 8002928:	42a6      	cmp	r6, r4
 800292a:	d109      	bne.n	8002940 <__libc_init_array+0x24>
 800292c:	4d0b      	ldr	r5, [pc, #44]	; (800295c <__libc_init_array+0x40>)
 800292e:	4c0c      	ldr	r4, [pc, #48]	; (8002960 <__libc_init_array+0x44>)
 8002930:	f000 ff76 	bl	8003820 <_init>
 8002934:	1b64      	subs	r4, r4, r5
 8002936:	10a4      	asrs	r4, r4, #2
 8002938:	2600      	movs	r6, #0
 800293a:	42a6      	cmp	r6, r4
 800293c:	d105      	bne.n	800294a <__libc_init_array+0x2e>
 800293e:	bd70      	pop	{r4, r5, r6, pc}
 8002940:	f855 3b04 	ldr.w	r3, [r5], #4
 8002944:	4798      	blx	r3
 8002946:	3601      	adds	r6, #1
 8002948:	e7ee      	b.n	8002928 <__libc_init_array+0xc>
 800294a:	f855 3b04 	ldr.w	r3, [r5], #4
 800294e:	4798      	blx	r3
 8002950:	3601      	adds	r6, #1
 8002952:	e7f2      	b.n	800293a <__libc_init_array+0x1e>
 8002954:	08003900 	.word	0x08003900
 8002958:	08003900 	.word	0x08003900
 800295c:	08003900 	.word	0x08003900
 8002960:	08003904 	.word	0x08003904

08002964 <memset>:
 8002964:	4402      	add	r2, r0
 8002966:	4603      	mov	r3, r0
 8002968:	4293      	cmp	r3, r2
 800296a:	d100      	bne.n	800296e <memset+0xa>
 800296c:	4770      	bx	lr
 800296e:	f803 1b01 	strb.w	r1, [r3], #1
 8002972:	e7f9      	b.n	8002968 <memset+0x4>

08002974 <iprintf>:
 8002974:	b40f      	push	{r0, r1, r2, r3}
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <iprintf+0x2c>)
 8002978:	b513      	push	{r0, r1, r4, lr}
 800297a:	681c      	ldr	r4, [r3, #0]
 800297c:	b124      	cbz	r4, 8002988 <iprintf+0x14>
 800297e:	69a3      	ldr	r3, [r4, #24]
 8002980:	b913      	cbnz	r3, 8002988 <iprintf+0x14>
 8002982:	4620      	mov	r0, r4
 8002984:	f000 f866 	bl	8002a54 <__sinit>
 8002988:	ab05      	add	r3, sp, #20
 800298a:	9a04      	ldr	r2, [sp, #16]
 800298c:	68a1      	ldr	r1, [r4, #8]
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	4620      	mov	r0, r4
 8002992:	f000 f983 	bl	8002c9c <_vfiprintf_r>
 8002996:	b002      	add	sp, #8
 8002998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299c:	b004      	add	sp, #16
 800299e:	4770      	bx	lr
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <std>:
 80029a4:	2300      	movs	r3, #0
 80029a6:	b510      	push	{r4, lr}
 80029a8:	4604      	mov	r4, r0
 80029aa:	e9c0 3300 	strd	r3, r3, [r0]
 80029ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029b2:	6083      	str	r3, [r0, #8]
 80029b4:	8181      	strh	r1, [r0, #12]
 80029b6:	6643      	str	r3, [r0, #100]	; 0x64
 80029b8:	81c2      	strh	r2, [r0, #14]
 80029ba:	6183      	str	r3, [r0, #24]
 80029bc:	4619      	mov	r1, r3
 80029be:	2208      	movs	r2, #8
 80029c0:	305c      	adds	r0, #92	; 0x5c
 80029c2:	f7ff ffcf 	bl	8002964 <memset>
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <std+0x38>)
 80029c8:	6263      	str	r3, [r4, #36]	; 0x24
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <std+0x3c>)
 80029cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <std+0x40>)
 80029d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <std+0x44>)
 80029d4:	6224      	str	r4, [r4, #32]
 80029d6:	6323      	str	r3, [r4, #48]	; 0x30
 80029d8:	bd10      	pop	{r4, pc}
 80029da:	bf00      	nop
 80029dc:	08003245 	.word	0x08003245
 80029e0:	08003267 	.word	0x08003267
 80029e4:	0800329f 	.word	0x0800329f
 80029e8:	080032c3 	.word	0x080032c3

080029ec <_cleanup_r>:
 80029ec:	4901      	ldr	r1, [pc, #4]	; (80029f4 <_cleanup_r+0x8>)
 80029ee:	f000 b8af 	b.w	8002b50 <_fwalk_reent>
 80029f2:	bf00      	nop
 80029f4:	0800359d 	.word	0x0800359d

080029f8 <__sfmoreglue>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	1e4a      	subs	r2, r1, #1
 80029fc:	2568      	movs	r5, #104	; 0x68
 80029fe:	4355      	muls	r5, r2
 8002a00:	460e      	mov	r6, r1
 8002a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a06:	f000 f8c5 	bl	8002b94 <_malloc_r>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	b140      	cbz	r0, 8002a20 <__sfmoreglue+0x28>
 8002a0e:	2100      	movs	r1, #0
 8002a10:	e9c0 1600 	strd	r1, r6, [r0]
 8002a14:	300c      	adds	r0, #12
 8002a16:	60a0      	str	r0, [r4, #8]
 8002a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a1c:	f7ff ffa2 	bl	8002964 <memset>
 8002a20:	4620      	mov	r0, r4
 8002a22:	bd70      	pop	{r4, r5, r6, pc}

08002a24 <__sfp_lock_acquire>:
 8002a24:	4801      	ldr	r0, [pc, #4]	; (8002a2c <__sfp_lock_acquire+0x8>)
 8002a26:	f000 b8b3 	b.w	8002b90 <__retarget_lock_acquire_recursive>
 8002a2a:	bf00      	nop
 8002a2c:	20000130 	.word	0x20000130

08002a30 <__sfp_lock_release>:
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <__sfp_lock_release+0x8>)
 8002a32:	f000 b8ae 	b.w	8002b92 <__retarget_lock_release_recursive>
 8002a36:	bf00      	nop
 8002a38:	20000130 	.word	0x20000130

08002a3c <__sinit_lock_acquire>:
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <__sinit_lock_acquire+0x8>)
 8002a3e:	f000 b8a7 	b.w	8002b90 <__retarget_lock_acquire_recursive>
 8002a42:	bf00      	nop
 8002a44:	2000012b 	.word	0x2000012b

08002a48 <__sinit_lock_release>:
 8002a48:	4801      	ldr	r0, [pc, #4]	; (8002a50 <__sinit_lock_release+0x8>)
 8002a4a:	f000 b8a2 	b.w	8002b92 <__retarget_lock_release_recursive>
 8002a4e:	bf00      	nop
 8002a50:	2000012b 	.word	0x2000012b

08002a54 <__sinit>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	f7ff fff0 	bl	8002a3c <__sinit_lock_acquire>
 8002a5c:	69a3      	ldr	r3, [r4, #24]
 8002a5e:	b11b      	cbz	r3, 8002a68 <__sinit+0x14>
 8002a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a64:	f7ff bff0 	b.w	8002a48 <__sinit_lock_release>
 8002a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <__sinit+0x68>)
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <__sinit+0x6c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a76:	42a3      	cmp	r3, r4
 8002a78:	bf04      	itt	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	61a3      	streq	r3, [r4, #24]
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f000 f820 	bl	8002ac4 <__sfp>
 8002a84:	6060      	str	r0, [r4, #4]
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 f81c 	bl	8002ac4 <__sfp>
 8002a8c:	60a0      	str	r0, [r4, #8]
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f000 f818 	bl	8002ac4 <__sfp>
 8002a94:	2200      	movs	r2, #0
 8002a96:	60e0      	str	r0, [r4, #12]
 8002a98:	2104      	movs	r1, #4
 8002a9a:	6860      	ldr	r0, [r4, #4]
 8002a9c:	f7ff ff82 	bl	80029a4 <std>
 8002aa0:	68a0      	ldr	r0, [r4, #8]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2109      	movs	r1, #9
 8002aa6:	f7ff ff7d 	bl	80029a4 <std>
 8002aaa:	68e0      	ldr	r0, [r4, #12]
 8002aac:	2202      	movs	r2, #2
 8002aae:	2112      	movs	r1, #18
 8002ab0:	f7ff ff78 	bl	80029a4 <std>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61a3      	str	r3, [r4, #24]
 8002ab8:	e7d2      	b.n	8002a60 <__sinit+0xc>
 8002aba:	bf00      	nop
 8002abc:	08003860 	.word	0x08003860
 8002ac0:	080029ed 	.word	0x080029ed

08002ac4 <__sfp>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	4607      	mov	r7, r0
 8002ac8:	f7ff ffac 	bl	8002a24 <__sfp_lock_acquire>
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <__sfp+0x84>)
 8002ace:	681e      	ldr	r6, [r3, #0]
 8002ad0:	69b3      	ldr	r3, [r6, #24]
 8002ad2:	b913      	cbnz	r3, 8002ada <__sfp+0x16>
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f7ff ffbd 	bl	8002a54 <__sinit>
 8002ada:	3648      	adds	r6, #72	; 0x48
 8002adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	d503      	bpl.n	8002aec <__sfp+0x28>
 8002ae4:	6833      	ldr	r3, [r6, #0]
 8002ae6:	b30b      	cbz	r3, 8002b2c <__sfp+0x68>
 8002ae8:	6836      	ldr	r6, [r6, #0]
 8002aea:	e7f7      	b.n	8002adc <__sfp+0x18>
 8002aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002af0:	b9d5      	cbnz	r5, 8002b28 <__sfp+0x64>
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <__sfp+0x88>)
 8002af4:	60e3      	str	r3, [r4, #12]
 8002af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002afa:	6665      	str	r5, [r4, #100]	; 0x64
 8002afc:	f000 f847 	bl	8002b8e <__retarget_lock_init_recursive>
 8002b00:	f7ff ff96 	bl	8002a30 <__sfp_lock_release>
 8002b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b0c:	6025      	str	r5, [r4, #0]
 8002b0e:	61a5      	str	r5, [r4, #24]
 8002b10:	2208      	movs	r2, #8
 8002b12:	4629      	mov	r1, r5
 8002b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b18:	f7ff ff24 	bl	8002964 <memset>
 8002b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b24:	4620      	mov	r0, r4
 8002b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b28:	3468      	adds	r4, #104	; 0x68
 8002b2a:	e7d9      	b.n	8002ae0 <__sfp+0x1c>
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	4638      	mov	r0, r7
 8002b30:	f7ff ff62 	bl	80029f8 <__sfmoreglue>
 8002b34:	4604      	mov	r4, r0
 8002b36:	6030      	str	r0, [r6, #0]
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d1d5      	bne.n	8002ae8 <__sfp+0x24>
 8002b3c:	f7ff ff78 	bl	8002a30 <__sfp_lock_release>
 8002b40:	230c      	movs	r3, #12
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	e7ee      	b.n	8002b24 <__sfp+0x60>
 8002b46:	bf00      	nop
 8002b48:	08003860 	.word	0x08003860
 8002b4c:	ffff0001 	.word	0xffff0001

08002b50 <_fwalk_reent>:
 8002b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b54:	4606      	mov	r6, r0
 8002b56:	4688      	mov	r8, r1
 8002b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b5c:	2700      	movs	r7, #0
 8002b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b62:	f1b9 0901 	subs.w	r9, r9, #1
 8002b66:	d505      	bpl.n	8002b74 <_fwalk_reent+0x24>
 8002b68:	6824      	ldr	r4, [r4, #0]
 8002b6a:	2c00      	cmp	r4, #0
 8002b6c:	d1f7      	bne.n	8002b5e <_fwalk_reent+0xe>
 8002b6e:	4638      	mov	r0, r7
 8002b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b74:	89ab      	ldrh	r3, [r5, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d907      	bls.n	8002b8a <_fwalk_reent+0x3a>
 8002b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	d003      	beq.n	8002b8a <_fwalk_reent+0x3a>
 8002b82:	4629      	mov	r1, r5
 8002b84:	4630      	mov	r0, r6
 8002b86:	47c0      	blx	r8
 8002b88:	4307      	orrs	r7, r0
 8002b8a:	3568      	adds	r5, #104	; 0x68
 8002b8c:	e7e9      	b.n	8002b62 <_fwalk_reent+0x12>

08002b8e <__retarget_lock_init_recursive>:
 8002b8e:	4770      	bx	lr

08002b90 <__retarget_lock_acquire_recursive>:
 8002b90:	4770      	bx	lr

08002b92 <__retarget_lock_release_recursive>:
 8002b92:	4770      	bx	lr

08002b94 <_malloc_r>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	1ccd      	adds	r5, r1, #3
 8002b98:	f025 0503 	bic.w	r5, r5, #3
 8002b9c:	3508      	adds	r5, #8
 8002b9e:	2d0c      	cmp	r5, #12
 8002ba0:	bf38      	it	cc
 8002ba2:	250c      	movcc	r5, #12
 8002ba4:	2d00      	cmp	r5, #0
 8002ba6:	4606      	mov	r6, r0
 8002ba8:	db01      	blt.n	8002bae <_malloc_r+0x1a>
 8002baa:	42a9      	cmp	r1, r5
 8002bac:	d903      	bls.n	8002bb6 <_malloc_r+0x22>
 8002bae:	230c      	movs	r3, #12
 8002bb0:	6033      	str	r3, [r6, #0]
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb6:	f000 fda3 	bl	8003700 <__malloc_lock>
 8002bba:	4921      	ldr	r1, [pc, #132]	; (8002c40 <_malloc_r+0xac>)
 8002bbc:	680a      	ldr	r2, [r1, #0]
 8002bbe:	4614      	mov	r4, r2
 8002bc0:	b99c      	cbnz	r4, 8002bea <_malloc_r+0x56>
 8002bc2:	4f20      	ldr	r7, [pc, #128]	; (8002c44 <_malloc_r+0xb0>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b923      	cbnz	r3, 8002bd2 <_malloc_r+0x3e>
 8002bc8:	4621      	mov	r1, r4
 8002bca:	4630      	mov	r0, r6
 8002bcc:	f000 fb2a 	bl	8003224 <_sbrk_r>
 8002bd0:	6038      	str	r0, [r7, #0]
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f000 fb25 	bl	8003224 <_sbrk_r>
 8002bda:	1c43      	adds	r3, r0, #1
 8002bdc:	d123      	bne.n	8002c26 <_malloc_r+0x92>
 8002bde:	230c      	movs	r3, #12
 8002be0:	6033      	str	r3, [r6, #0]
 8002be2:	4630      	mov	r0, r6
 8002be4:	f000 fd92 	bl	800370c <__malloc_unlock>
 8002be8:	e7e3      	b.n	8002bb2 <_malloc_r+0x1e>
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	1b5b      	subs	r3, r3, r5
 8002bee:	d417      	bmi.n	8002c20 <_malloc_r+0x8c>
 8002bf0:	2b0b      	cmp	r3, #11
 8002bf2:	d903      	bls.n	8002bfc <_malloc_r+0x68>
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	441c      	add	r4, r3
 8002bf8:	6025      	str	r5, [r4, #0]
 8002bfa:	e004      	b.n	8002c06 <_malloc_r+0x72>
 8002bfc:	6863      	ldr	r3, [r4, #4]
 8002bfe:	42a2      	cmp	r2, r4
 8002c00:	bf0c      	ite	eq
 8002c02:	600b      	streq	r3, [r1, #0]
 8002c04:	6053      	strne	r3, [r2, #4]
 8002c06:	4630      	mov	r0, r6
 8002c08:	f000 fd80 	bl	800370c <__malloc_unlock>
 8002c0c:	f104 000b 	add.w	r0, r4, #11
 8002c10:	1d23      	adds	r3, r4, #4
 8002c12:	f020 0007 	bic.w	r0, r0, #7
 8002c16:	1ac2      	subs	r2, r0, r3
 8002c18:	d0cc      	beq.n	8002bb4 <_malloc_r+0x20>
 8002c1a:	1a1b      	subs	r3, r3, r0
 8002c1c:	50a3      	str	r3, [r4, r2]
 8002c1e:	e7c9      	b.n	8002bb4 <_malloc_r+0x20>
 8002c20:	4622      	mov	r2, r4
 8002c22:	6864      	ldr	r4, [r4, #4]
 8002c24:	e7cc      	b.n	8002bc0 <_malloc_r+0x2c>
 8002c26:	1cc4      	adds	r4, r0, #3
 8002c28:	f024 0403 	bic.w	r4, r4, #3
 8002c2c:	42a0      	cmp	r0, r4
 8002c2e:	d0e3      	beq.n	8002bf8 <_malloc_r+0x64>
 8002c30:	1a21      	subs	r1, r4, r0
 8002c32:	4630      	mov	r0, r6
 8002c34:	f000 faf6 	bl	8003224 <_sbrk_r>
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d1dd      	bne.n	8002bf8 <_malloc_r+0x64>
 8002c3c:	e7cf      	b.n	8002bde <_malloc_r+0x4a>
 8002c3e:	bf00      	nop
 8002c40:	20000090 	.word	0x20000090
 8002c44:	20000094 	.word	0x20000094

08002c48 <__sfputc_r>:
 8002c48:	6893      	ldr	r3, [r2, #8]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	b410      	push	{r4}
 8002c50:	6093      	str	r3, [r2, #8]
 8002c52:	da08      	bge.n	8002c66 <__sfputc_r+0x1e>
 8002c54:	6994      	ldr	r4, [r2, #24]
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	db01      	blt.n	8002c5e <__sfputc_r+0x16>
 8002c5a:	290a      	cmp	r1, #10
 8002c5c:	d103      	bne.n	8002c66 <__sfputc_r+0x1e>
 8002c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c62:	f000 bb33 	b.w	80032cc <__swbuf_r>
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	1c58      	adds	r0, r3, #1
 8002c6a:	6010      	str	r0, [r2, #0]
 8002c6c:	7019      	strb	r1, [r3, #0]
 8002c6e:	4608      	mov	r0, r1
 8002c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <__sfputs_r>:
 8002c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c78:	4606      	mov	r6, r0
 8002c7a:	460f      	mov	r7, r1
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	18d5      	adds	r5, r2, r3
 8002c80:	42ac      	cmp	r4, r5
 8002c82:	d101      	bne.n	8002c88 <__sfputs_r+0x12>
 8002c84:	2000      	movs	r0, #0
 8002c86:	e007      	b.n	8002c98 <__sfputs_r+0x22>
 8002c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c8c:	463a      	mov	r2, r7
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f7ff ffda 	bl	8002c48 <__sfputc_r>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d1f3      	bne.n	8002c80 <__sfputs_r+0xa>
 8002c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c9c <_vfiprintf_r>:
 8002c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca0:	460d      	mov	r5, r1
 8002ca2:	b09d      	sub	sp, #116	; 0x74
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	4698      	mov	r8, r3
 8002ca8:	4606      	mov	r6, r0
 8002caa:	b118      	cbz	r0, 8002cb4 <_vfiprintf_r+0x18>
 8002cac:	6983      	ldr	r3, [r0, #24]
 8002cae:	b90b      	cbnz	r3, 8002cb4 <_vfiprintf_r+0x18>
 8002cb0:	f7ff fed0 	bl	8002a54 <__sinit>
 8002cb4:	4b89      	ldr	r3, [pc, #548]	; (8002edc <_vfiprintf_r+0x240>)
 8002cb6:	429d      	cmp	r5, r3
 8002cb8:	d11b      	bne.n	8002cf2 <_vfiprintf_r+0x56>
 8002cba:	6875      	ldr	r5, [r6, #4]
 8002cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cbe:	07d9      	lsls	r1, r3, #31
 8002cc0:	d405      	bmi.n	8002cce <_vfiprintf_r+0x32>
 8002cc2:	89ab      	ldrh	r3, [r5, #12]
 8002cc4:	059a      	lsls	r2, r3, #22
 8002cc6:	d402      	bmi.n	8002cce <_vfiprintf_r+0x32>
 8002cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cca:	f7ff ff61 	bl	8002b90 <__retarget_lock_acquire_recursive>
 8002cce:	89ab      	ldrh	r3, [r5, #12]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	d501      	bpl.n	8002cd8 <_vfiprintf_r+0x3c>
 8002cd4:	692b      	ldr	r3, [r5, #16]
 8002cd6:	b9eb      	cbnz	r3, 8002d14 <_vfiprintf_r+0x78>
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f000 fb5a 	bl	8003394 <__swsetup_r>
 8002ce0:	b1c0      	cbz	r0, 8002d14 <_vfiprintf_r+0x78>
 8002ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ce4:	07dc      	lsls	r4, r3, #31
 8002ce6:	d50e      	bpl.n	8002d06 <_vfiprintf_r+0x6a>
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	b01d      	add	sp, #116	; 0x74
 8002cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf2:	4b7b      	ldr	r3, [pc, #492]	; (8002ee0 <_vfiprintf_r+0x244>)
 8002cf4:	429d      	cmp	r5, r3
 8002cf6:	d101      	bne.n	8002cfc <_vfiprintf_r+0x60>
 8002cf8:	68b5      	ldr	r5, [r6, #8]
 8002cfa:	e7df      	b.n	8002cbc <_vfiprintf_r+0x20>
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <_vfiprintf_r+0x248>)
 8002cfe:	429d      	cmp	r5, r3
 8002d00:	bf08      	it	eq
 8002d02:	68f5      	ldreq	r5, [r6, #12]
 8002d04:	e7da      	b.n	8002cbc <_vfiprintf_r+0x20>
 8002d06:	89ab      	ldrh	r3, [r5, #12]
 8002d08:	0598      	lsls	r0, r3, #22
 8002d0a:	d4ed      	bmi.n	8002ce8 <_vfiprintf_r+0x4c>
 8002d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d0e:	f7ff ff40 	bl	8002b92 <__retarget_lock_release_recursive>
 8002d12:	e7e9      	b.n	8002ce8 <_vfiprintf_r+0x4c>
 8002d14:	2300      	movs	r3, #0
 8002d16:	9309      	str	r3, [sp, #36]	; 0x24
 8002d18:	2320      	movs	r3, #32
 8002d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d22:	2330      	movs	r3, #48	; 0x30
 8002d24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002ee8 <_vfiprintf_r+0x24c>
 8002d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d2c:	f04f 0901 	mov.w	r9, #1
 8002d30:	4623      	mov	r3, r4
 8002d32:	469a      	mov	sl, r3
 8002d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d38:	b10a      	cbz	r2, 8002d3e <_vfiprintf_r+0xa2>
 8002d3a:	2a25      	cmp	r2, #37	; 0x25
 8002d3c:	d1f9      	bne.n	8002d32 <_vfiprintf_r+0x96>
 8002d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8002d42:	d00b      	beq.n	8002d5c <_vfiprintf_r+0xc0>
 8002d44:	465b      	mov	r3, fp
 8002d46:	4622      	mov	r2, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f7ff ff93 	bl	8002c76 <__sfputs_r>
 8002d50:	3001      	adds	r0, #1
 8002d52:	f000 80aa 	beq.w	8002eaa <_vfiprintf_r+0x20e>
 8002d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d58:	445a      	add	r2, fp
 8002d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a2 	beq.w	8002eaa <_vfiprintf_r+0x20e>
 8002d66:	2300      	movs	r3, #0
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d70:	f10a 0a01 	add.w	sl, sl, #1
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	9307      	str	r3, [sp, #28]
 8002d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8002d7e:	4654      	mov	r4, sl
 8002d80:	2205      	movs	r2, #5
 8002d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d86:	4858      	ldr	r0, [pc, #352]	; (8002ee8 <_vfiprintf_r+0x24c>)
 8002d88:	f7fd fa2a 	bl	80001e0 <memchr>
 8002d8c:	9a04      	ldr	r2, [sp, #16]
 8002d8e:	b9d8      	cbnz	r0, 8002dc8 <_vfiprintf_r+0x12c>
 8002d90:	06d1      	lsls	r1, r2, #27
 8002d92:	bf44      	itt	mi
 8002d94:	2320      	movmi	r3, #32
 8002d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d9a:	0713      	lsls	r3, r2, #28
 8002d9c:	bf44      	itt	mi
 8002d9e:	232b      	movmi	r3, #43	; 0x2b
 8002da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002da4:	f89a 3000 	ldrb.w	r3, [sl]
 8002da8:	2b2a      	cmp	r3, #42	; 0x2a
 8002daa:	d015      	beq.n	8002dd8 <_vfiprintf_r+0x13c>
 8002dac:	9a07      	ldr	r2, [sp, #28]
 8002dae:	4654      	mov	r4, sl
 8002db0:	2000      	movs	r0, #0
 8002db2:	f04f 0c0a 	mov.w	ip, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dbc:	3b30      	subs	r3, #48	; 0x30
 8002dbe:	2b09      	cmp	r3, #9
 8002dc0:	d94e      	bls.n	8002e60 <_vfiprintf_r+0x1c4>
 8002dc2:	b1b0      	cbz	r0, 8002df2 <_vfiprintf_r+0x156>
 8002dc4:	9207      	str	r2, [sp, #28]
 8002dc6:	e014      	b.n	8002df2 <_vfiprintf_r+0x156>
 8002dc8:	eba0 0308 	sub.w	r3, r0, r8
 8002dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	46a2      	mov	sl, r4
 8002dd6:	e7d2      	b.n	8002d7e <_vfiprintf_r+0xe2>
 8002dd8:	9b03      	ldr	r3, [sp, #12]
 8002dda:	1d19      	adds	r1, r3, #4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	9103      	str	r1, [sp, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bfbb      	ittet	lt
 8002de4:	425b      	neglt	r3, r3
 8002de6:	f042 0202 	orrlt.w	r2, r2, #2
 8002dea:	9307      	strge	r3, [sp, #28]
 8002dec:	9307      	strlt	r3, [sp, #28]
 8002dee:	bfb8      	it	lt
 8002df0:	9204      	strlt	r2, [sp, #16]
 8002df2:	7823      	ldrb	r3, [r4, #0]
 8002df4:	2b2e      	cmp	r3, #46	; 0x2e
 8002df6:	d10c      	bne.n	8002e12 <_vfiprintf_r+0x176>
 8002df8:	7863      	ldrb	r3, [r4, #1]
 8002dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8002dfc:	d135      	bne.n	8002e6a <_vfiprintf_r+0x1ce>
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	9203      	str	r2, [sp, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bfb8      	it	lt
 8002e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e0e:	3402      	adds	r4, #2
 8002e10:	9305      	str	r3, [sp, #20]
 8002e12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002ef8 <_vfiprintf_r+0x25c>
 8002e16:	7821      	ldrb	r1, [r4, #0]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	4650      	mov	r0, sl
 8002e1c:	f7fd f9e0 	bl	80001e0 <memchr>
 8002e20:	b140      	cbz	r0, 8002e34 <_vfiprintf_r+0x198>
 8002e22:	2340      	movs	r3, #64	; 0x40
 8002e24:	eba0 000a 	sub.w	r0, r0, sl
 8002e28:	fa03 f000 	lsl.w	r0, r3, r0
 8002e2c:	9b04      	ldr	r3, [sp, #16]
 8002e2e:	4303      	orrs	r3, r0
 8002e30:	3401      	adds	r4, #1
 8002e32:	9304      	str	r3, [sp, #16]
 8002e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e38:	482c      	ldr	r0, [pc, #176]	; (8002eec <_vfiprintf_r+0x250>)
 8002e3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e3e:	2206      	movs	r2, #6
 8002e40:	f7fd f9ce 	bl	80001e0 <memchr>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d03f      	beq.n	8002ec8 <_vfiprintf_r+0x22c>
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <_vfiprintf_r+0x254>)
 8002e4a:	bb1b      	cbnz	r3, 8002e94 <_vfiprintf_r+0x1f8>
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	3307      	adds	r3, #7
 8002e50:	f023 0307 	bic.w	r3, r3, #7
 8002e54:	3308      	adds	r3, #8
 8002e56:	9303      	str	r3, [sp, #12]
 8002e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e5a:	443b      	add	r3, r7
 8002e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e5e:	e767      	b.n	8002d30 <_vfiprintf_r+0x94>
 8002e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e64:	460c      	mov	r4, r1
 8002e66:	2001      	movs	r0, #1
 8002e68:	e7a5      	b.n	8002db6 <_vfiprintf_r+0x11a>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	3401      	adds	r4, #1
 8002e6e:	9305      	str	r3, [sp, #20]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0c0a 	mov.w	ip, #10
 8002e76:	4620      	mov	r0, r4
 8002e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e7c:	3a30      	subs	r2, #48	; 0x30
 8002e7e:	2a09      	cmp	r2, #9
 8002e80:	d903      	bls.n	8002e8a <_vfiprintf_r+0x1ee>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0c5      	beq.n	8002e12 <_vfiprintf_r+0x176>
 8002e86:	9105      	str	r1, [sp, #20]
 8002e88:	e7c3      	b.n	8002e12 <_vfiprintf_r+0x176>
 8002e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e8e:	4604      	mov	r4, r0
 8002e90:	2301      	movs	r3, #1
 8002e92:	e7f0      	b.n	8002e76 <_vfiprintf_r+0x1da>
 8002e94:	ab03      	add	r3, sp, #12
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	462a      	mov	r2, r5
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <_vfiprintf_r+0x258>)
 8002e9c:	a904      	add	r1, sp, #16
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	f3af 8000 	nop.w
 8002ea4:	4607      	mov	r7, r0
 8002ea6:	1c78      	adds	r0, r7, #1
 8002ea8:	d1d6      	bne.n	8002e58 <_vfiprintf_r+0x1bc>
 8002eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002eac:	07d9      	lsls	r1, r3, #31
 8002eae:	d405      	bmi.n	8002ebc <_vfiprintf_r+0x220>
 8002eb0:	89ab      	ldrh	r3, [r5, #12]
 8002eb2:	059a      	lsls	r2, r3, #22
 8002eb4:	d402      	bmi.n	8002ebc <_vfiprintf_r+0x220>
 8002eb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eb8:	f7ff fe6b 	bl	8002b92 <__retarget_lock_release_recursive>
 8002ebc:	89ab      	ldrh	r3, [r5, #12]
 8002ebe:	065b      	lsls	r3, r3, #25
 8002ec0:	f53f af12 	bmi.w	8002ce8 <_vfiprintf_r+0x4c>
 8002ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ec6:	e711      	b.n	8002cec <_vfiprintf_r+0x50>
 8002ec8:	ab03      	add	r3, sp, #12
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	462a      	mov	r2, r5
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <_vfiprintf_r+0x258>)
 8002ed0:	a904      	add	r1, sp, #16
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f000 f880 	bl	8002fd8 <_printf_i>
 8002ed8:	e7e4      	b.n	8002ea4 <_vfiprintf_r+0x208>
 8002eda:	bf00      	nop
 8002edc:	08003884 	.word	0x08003884
 8002ee0:	080038a4 	.word	0x080038a4
 8002ee4:	08003864 	.word	0x08003864
 8002ee8:	080038c4 	.word	0x080038c4
 8002eec:	080038ce 	.word	0x080038ce
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	08002c77 	.word	0x08002c77
 8002ef8:	080038ca 	.word	0x080038ca

08002efc <_printf_common>:
 8002efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f00:	4616      	mov	r6, r2
 8002f02:	4699      	mov	r9, r3
 8002f04:	688a      	ldr	r2, [r1, #8]
 8002f06:	690b      	ldr	r3, [r1, #16]
 8002f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bfb8      	it	lt
 8002f10:	4613      	movlt	r3, r2
 8002f12:	6033      	str	r3, [r6, #0]
 8002f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f18:	4607      	mov	r7, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	b10a      	cbz	r2, 8002f22 <_printf_common+0x26>
 8002f1e:	3301      	adds	r3, #1
 8002f20:	6033      	str	r3, [r6, #0]
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	0699      	lsls	r1, r3, #26
 8002f26:	bf42      	ittt	mi
 8002f28:	6833      	ldrmi	r3, [r6, #0]
 8002f2a:	3302      	addmi	r3, #2
 8002f2c:	6033      	strmi	r3, [r6, #0]
 8002f2e:	6825      	ldr	r5, [r4, #0]
 8002f30:	f015 0506 	ands.w	r5, r5, #6
 8002f34:	d106      	bne.n	8002f44 <_printf_common+0x48>
 8002f36:	f104 0a19 	add.w	sl, r4, #25
 8002f3a:	68e3      	ldr	r3, [r4, #12]
 8002f3c:	6832      	ldr	r2, [r6, #0]
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	42ab      	cmp	r3, r5
 8002f42:	dc26      	bgt.n	8002f92 <_printf_common+0x96>
 8002f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f48:	1e13      	subs	r3, r2, #0
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	bf18      	it	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	0692      	lsls	r2, r2, #26
 8002f52:	d42b      	bmi.n	8002fac <_printf_common+0xb0>
 8002f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f58:	4649      	mov	r1, r9
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	47c0      	blx	r8
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d01e      	beq.n	8002fa0 <_printf_common+0xa4>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	68e5      	ldr	r5, [r4, #12]
 8002f66:	6832      	ldr	r2, [r6, #0]
 8002f68:	f003 0306 	and.w	r3, r3, #6
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	bf08      	it	eq
 8002f70:	1aad      	subeq	r5, r5, r2
 8002f72:	68a3      	ldr	r3, [r4, #8]
 8002f74:	6922      	ldr	r2, [r4, #16]
 8002f76:	bf0c      	ite	eq
 8002f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f7c:	2500      	movne	r5, #0
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	bfc4      	itt	gt
 8002f82:	1a9b      	subgt	r3, r3, r2
 8002f84:	18ed      	addgt	r5, r5, r3
 8002f86:	2600      	movs	r6, #0
 8002f88:	341a      	adds	r4, #26
 8002f8a:	42b5      	cmp	r5, r6
 8002f8c:	d11a      	bne.n	8002fc4 <_printf_common+0xc8>
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e008      	b.n	8002fa4 <_printf_common+0xa8>
 8002f92:	2301      	movs	r3, #1
 8002f94:	4652      	mov	r2, sl
 8002f96:	4649      	mov	r1, r9
 8002f98:	4638      	mov	r0, r7
 8002f9a:	47c0      	blx	r8
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d103      	bne.n	8002fa8 <_printf_common+0xac>
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa8:	3501      	adds	r5, #1
 8002faa:	e7c6      	b.n	8002f3a <_printf_common+0x3e>
 8002fac:	18e1      	adds	r1, r4, r3
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	2030      	movs	r0, #48	; 0x30
 8002fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fb6:	4422      	add	r2, r4
 8002fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	e7c7      	b.n	8002f54 <_printf_common+0x58>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	4649      	mov	r1, r9
 8002fca:	4638      	mov	r0, r7
 8002fcc:	47c0      	blx	r8
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d0e6      	beq.n	8002fa0 <_printf_common+0xa4>
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7d9      	b.n	8002f8a <_printf_common+0x8e>
	...

08002fd8 <_printf_i>:
 8002fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fdc:	460c      	mov	r4, r1
 8002fde:	4691      	mov	r9, r2
 8002fe0:	7e27      	ldrb	r7, [r4, #24]
 8002fe2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fe4:	2f78      	cmp	r7, #120	; 0x78
 8002fe6:	4680      	mov	r8, r0
 8002fe8:	469a      	mov	sl, r3
 8002fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fee:	d807      	bhi.n	8003000 <_printf_i+0x28>
 8002ff0:	2f62      	cmp	r7, #98	; 0x62
 8002ff2:	d80a      	bhi.n	800300a <_printf_i+0x32>
 8002ff4:	2f00      	cmp	r7, #0
 8002ff6:	f000 80d8 	beq.w	80031aa <_printf_i+0x1d2>
 8002ffa:	2f58      	cmp	r7, #88	; 0x58
 8002ffc:	f000 80a3 	beq.w	8003146 <_printf_i+0x16e>
 8003000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003008:	e03a      	b.n	8003080 <_printf_i+0xa8>
 800300a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800300e:	2b15      	cmp	r3, #21
 8003010:	d8f6      	bhi.n	8003000 <_printf_i+0x28>
 8003012:	a001      	add	r0, pc, #4	; (adr r0, 8003018 <_printf_i+0x40>)
 8003014:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003018:	08003071 	.word	0x08003071
 800301c:	08003085 	.word	0x08003085
 8003020:	08003001 	.word	0x08003001
 8003024:	08003001 	.word	0x08003001
 8003028:	08003001 	.word	0x08003001
 800302c:	08003001 	.word	0x08003001
 8003030:	08003085 	.word	0x08003085
 8003034:	08003001 	.word	0x08003001
 8003038:	08003001 	.word	0x08003001
 800303c:	08003001 	.word	0x08003001
 8003040:	08003001 	.word	0x08003001
 8003044:	08003191 	.word	0x08003191
 8003048:	080030b5 	.word	0x080030b5
 800304c:	08003173 	.word	0x08003173
 8003050:	08003001 	.word	0x08003001
 8003054:	08003001 	.word	0x08003001
 8003058:	080031b3 	.word	0x080031b3
 800305c:	08003001 	.word	0x08003001
 8003060:	080030b5 	.word	0x080030b5
 8003064:	08003001 	.word	0x08003001
 8003068:	08003001 	.word	0x08003001
 800306c:	0800317b 	.word	0x0800317b
 8003070:	680b      	ldr	r3, [r1, #0]
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	600a      	str	r2, [r1, #0]
 8003078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800307c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003080:	2301      	movs	r3, #1
 8003082:	e0a3      	b.n	80031cc <_printf_i+0x1f4>
 8003084:	6825      	ldr	r5, [r4, #0]
 8003086:	6808      	ldr	r0, [r1, #0]
 8003088:	062e      	lsls	r6, r5, #24
 800308a:	f100 0304 	add.w	r3, r0, #4
 800308e:	d50a      	bpl.n	80030a6 <_printf_i+0xce>
 8003090:	6805      	ldr	r5, [r0, #0]
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	2d00      	cmp	r5, #0
 8003096:	da03      	bge.n	80030a0 <_printf_i+0xc8>
 8003098:	232d      	movs	r3, #45	; 0x2d
 800309a:	426d      	negs	r5, r5
 800309c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a0:	485e      	ldr	r0, [pc, #376]	; (800321c <_printf_i+0x244>)
 80030a2:	230a      	movs	r3, #10
 80030a4:	e019      	b.n	80030da <_printf_i+0x102>
 80030a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80030aa:	6805      	ldr	r5, [r0, #0]
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	bf18      	it	ne
 80030b0:	b22d      	sxthne	r5, r5
 80030b2:	e7ef      	b.n	8003094 <_printf_i+0xbc>
 80030b4:	680b      	ldr	r3, [r1, #0]
 80030b6:	6825      	ldr	r5, [r4, #0]
 80030b8:	1d18      	adds	r0, r3, #4
 80030ba:	6008      	str	r0, [r1, #0]
 80030bc:	0628      	lsls	r0, r5, #24
 80030be:	d501      	bpl.n	80030c4 <_printf_i+0xec>
 80030c0:	681d      	ldr	r5, [r3, #0]
 80030c2:	e002      	b.n	80030ca <_printf_i+0xf2>
 80030c4:	0669      	lsls	r1, r5, #25
 80030c6:	d5fb      	bpl.n	80030c0 <_printf_i+0xe8>
 80030c8:	881d      	ldrh	r5, [r3, #0]
 80030ca:	4854      	ldr	r0, [pc, #336]	; (800321c <_printf_i+0x244>)
 80030cc:	2f6f      	cmp	r7, #111	; 0x6f
 80030ce:	bf0c      	ite	eq
 80030d0:	2308      	moveq	r3, #8
 80030d2:	230a      	movne	r3, #10
 80030d4:	2100      	movs	r1, #0
 80030d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030da:	6866      	ldr	r6, [r4, #4]
 80030dc:	60a6      	str	r6, [r4, #8]
 80030de:	2e00      	cmp	r6, #0
 80030e0:	bfa2      	ittt	ge
 80030e2:	6821      	ldrge	r1, [r4, #0]
 80030e4:	f021 0104 	bicge.w	r1, r1, #4
 80030e8:	6021      	strge	r1, [r4, #0]
 80030ea:	b90d      	cbnz	r5, 80030f0 <_printf_i+0x118>
 80030ec:	2e00      	cmp	r6, #0
 80030ee:	d04d      	beq.n	800318c <_printf_i+0x1b4>
 80030f0:	4616      	mov	r6, r2
 80030f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80030f6:	fb03 5711 	mls	r7, r3, r1, r5
 80030fa:	5dc7      	ldrb	r7, [r0, r7]
 80030fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003100:	462f      	mov	r7, r5
 8003102:	42bb      	cmp	r3, r7
 8003104:	460d      	mov	r5, r1
 8003106:	d9f4      	bls.n	80030f2 <_printf_i+0x11a>
 8003108:	2b08      	cmp	r3, #8
 800310a:	d10b      	bne.n	8003124 <_printf_i+0x14c>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	07df      	lsls	r7, r3, #31
 8003110:	d508      	bpl.n	8003124 <_printf_i+0x14c>
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	6861      	ldr	r1, [r4, #4]
 8003116:	4299      	cmp	r1, r3
 8003118:	bfde      	ittt	le
 800311a:	2330      	movle	r3, #48	; 0x30
 800311c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003124:	1b92      	subs	r2, r2, r6
 8003126:	6122      	str	r2, [r4, #16]
 8003128:	f8cd a000 	str.w	sl, [sp]
 800312c:	464b      	mov	r3, r9
 800312e:	aa03      	add	r2, sp, #12
 8003130:	4621      	mov	r1, r4
 8003132:	4640      	mov	r0, r8
 8003134:	f7ff fee2 	bl	8002efc <_printf_common>
 8003138:	3001      	adds	r0, #1
 800313a:	d14c      	bne.n	80031d6 <_printf_i+0x1fe>
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	b004      	add	sp, #16
 8003142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003146:	4835      	ldr	r0, [pc, #212]	; (800321c <_printf_i+0x244>)
 8003148:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	680e      	ldr	r6, [r1, #0]
 8003150:	061f      	lsls	r7, r3, #24
 8003152:	f856 5b04 	ldr.w	r5, [r6], #4
 8003156:	600e      	str	r6, [r1, #0]
 8003158:	d514      	bpl.n	8003184 <_printf_i+0x1ac>
 800315a:	07d9      	lsls	r1, r3, #31
 800315c:	bf44      	itt	mi
 800315e:	f043 0320 	orrmi.w	r3, r3, #32
 8003162:	6023      	strmi	r3, [r4, #0]
 8003164:	b91d      	cbnz	r5, 800316e <_printf_i+0x196>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f023 0320 	bic.w	r3, r3, #32
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	2310      	movs	r3, #16
 8003170:	e7b0      	b.n	80030d4 <_printf_i+0xfc>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	f043 0320 	orr.w	r3, r3, #32
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	2378      	movs	r3, #120	; 0x78
 800317c:	4828      	ldr	r0, [pc, #160]	; (8003220 <_printf_i+0x248>)
 800317e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003182:	e7e3      	b.n	800314c <_printf_i+0x174>
 8003184:	065e      	lsls	r6, r3, #25
 8003186:	bf48      	it	mi
 8003188:	b2ad      	uxthmi	r5, r5
 800318a:	e7e6      	b.n	800315a <_printf_i+0x182>
 800318c:	4616      	mov	r6, r2
 800318e:	e7bb      	b.n	8003108 <_printf_i+0x130>
 8003190:	680b      	ldr	r3, [r1, #0]
 8003192:	6826      	ldr	r6, [r4, #0]
 8003194:	6960      	ldr	r0, [r4, #20]
 8003196:	1d1d      	adds	r5, r3, #4
 8003198:	600d      	str	r5, [r1, #0]
 800319a:	0635      	lsls	r5, r6, #24
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	d501      	bpl.n	80031a4 <_printf_i+0x1cc>
 80031a0:	6018      	str	r0, [r3, #0]
 80031a2:	e002      	b.n	80031aa <_printf_i+0x1d2>
 80031a4:	0671      	lsls	r1, r6, #25
 80031a6:	d5fb      	bpl.n	80031a0 <_printf_i+0x1c8>
 80031a8:	8018      	strh	r0, [r3, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	6123      	str	r3, [r4, #16]
 80031ae:	4616      	mov	r6, r2
 80031b0:	e7ba      	b.n	8003128 <_printf_i+0x150>
 80031b2:	680b      	ldr	r3, [r1, #0]
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	600a      	str	r2, [r1, #0]
 80031b8:	681e      	ldr	r6, [r3, #0]
 80031ba:	6862      	ldr	r2, [r4, #4]
 80031bc:	2100      	movs	r1, #0
 80031be:	4630      	mov	r0, r6
 80031c0:	f7fd f80e 	bl	80001e0 <memchr>
 80031c4:	b108      	cbz	r0, 80031ca <_printf_i+0x1f2>
 80031c6:	1b80      	subs	r0, r0, r6
 80031c8:	6060      	str	r0, [r4, #4]
 80031ca:	6863      	ldr	r3, [r4, #4]
 80031cc:	6123      	str	r3, [r4, #16]
 80031ce:	2300      	movs	r3, #0
 80031d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031d4:	e7a8      	b.n	8003128 <_printf_i+0x150>
 80031d6:	6923      	ldr	r3, [r4, #16]
 80031d8:	4632      	mov	r2, r6
 80031da:	4649      	mov	r1, r9
 80031dc:	4640      	mov	r0, r8
 80031de:	47d0      	blx	sl
 80031e0:	3001      	adds	r0, #1
 80031e2:	d0ab      	beq.n	800313c <_printf_i+0x164>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	079b      	lsls	r3, r3, #30
 80031e8:	d413      	bmi.n	8003212 <_printf_i+0x23a>
 80031ea:	68e0      	ldr	r0, [r4, #12]
 80031ec:	9b03      	ldr	r3, [sp, #12]
 80031ee:	4298      	cmp	r0, r3
 80031f0:	bfb8      	it	lt
 80031f2:	4618      	movlt	r0, r3
 80031f4:	e7a4      	b.n	8003140 <_printf_i+0x168>
 80031f6:	2301      	movs	r3, #1
 80031f8:	4632      	mov	r2, r6
 80031fa:	4649      	mov	r1, r9
 80031fc:	4640      	mov	r0, r8
 80031fe:	47d0      	blx	sl
 8003200:	3001      	adds	r0, #1
 8003202:	d09b      	beq.n	800313c <_printf_i+0x164>
 8003204:	3501      	adds	r5, #1
 8003206:	68e3      	ldr	r3, [r4, #12]
 8003208:	9903      	ldr	r1, [sp, #12]
 800320a:	1a5b      	subs	r3, r3, r1
 800320c:	42ab      	cmp	r3, r5
 800320e:	dcf2      	bgt.n	80031f6 <_printf_i+0x21e>
 8003210:	e7eb      	b.n	80031ea <_printf_i+0x212>
 8003212:	2500      	movs	r5, #0
 8003214:	f104 0619 	add.w	r6, r4, #25
 8003218:	e7f5      	b.n	8003206 <_printf_i+0x22e>
 800321a:	bf00      	nop
 800321c:	080038d5 	.word	0x080038d5
 8003220:	080038e6 	.word	0x080038e6

08003224 <_sbrk_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4d06      	ldr	r5, [pc, #24]	; (8003240 <_sbrk_r+0x1c>)
 8003228:	2300      	movs	r3, #0
 800322a:	4604      	mov	r4, r0
 800322c:	4608      	mov	r0, r1
 800322e:	602b      	str	r3, [r5, #0]
 8003230:	f7fd fc4e 	bl	8000ad0 <_sbrk>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d102      	bne.n	800323e <_sbrk_r+0x1a>
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	b103      	cbz	r3, 800323e <_sbrk_r+0x1a>
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	bd38      	pop	{r3, r4, r5, pc}
 8003240:	20000134 	.word	0x20000134

08003244 <__sread>:
 8003244:	b510      	push	{r4, lr}
 8003246:	460c      	mov	r4, r1
 8003248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324c:	f000 fab4 	bl	80037b8 <_read_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	bfab      	itete	ge
 8003254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003256:	89a3      	ldrhlt	r3, [r4, #12]
 8003258:	181b      	addge	r3, r3, r0
 800325a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800325e:	bfac      	ite	ge
 8003260:	6563      	strge	r3, [r4, #84]	; 0x54
 8003262:	81a3      	strhlt	r3, [r4, #12]
 8003264:	bd10      	pop	{r4, pc}

08003266 <__swrite>:
 8003266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800326a:	461f      	mov	r7, r3
 800326c:	898b      	ldrh	r3, [r1, #12]
 800326e:	05db      	lsls	r3, r3, #23
 8003270:	4605      	mov	r5, r0
 8003272:	460c      	mov	r4, r1
 8003274:	4616      	mov	r6, r2
 8003276:	d505      	bpl.n	8003284 <__swrite+0x1e>
 8003278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800327c:	2302      	movs	r3, #2
 800327e:	2200      	movs	r2, #0
 8003280:	f000 f9c8 	bl	8003614 <_lseek_r>
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800328a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	4632      	mov	r2, r6
 8003292:	463b      	mov	r3, r7
 8003294:	4628      	mov	r0, r5
 8003296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800329a:	f000 b869 	b.w	8003370 <_write_r>

0800329e <__sseek>:
 800329e:	b510      	push	{r4, lr}
 80032a0:	460c      	mov	r4, r1
 80032a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a6:	f000 f9b5 	bl	8003614 <_lseek_r>
 80032aa:	1c43      	adds	r3, r0, #1
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	bf15      	itete	ne
 80032b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80032b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032ba:	81a3      	strheq	r3, [r4, #12]
 80032bc:	bf18      	it	ne
 80032be:	81a3      	strhne	r3, [r4, #12]
 80032c0:	bd10      	pop	{r4, pc}

080032c2 <__sclose>:
 80032c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c6:	f000 b8d3 	b.w	8003470 <_close_r>
	...

080032cc <__swbuf_r>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	460e      	mov	r6, r1
 80032d0:	4614      	mov	r4, r2
 80032d2:	4605      	mov	r5, r0
 80032d4:	b118      	cbz	r0, 80032de <__swbuf_r+0x12>
 80032d6:	6983      	ldr	r3, [r0, #24]
 80032d8:	b90b      	cbnz	r3, 80032de <__swbuf_r+0x12>
 80032da:	f7ff fbbb 	bl	8002a54 <__sinit>
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <__swbuf_r+0x98>)
 80032e0:	429c      	cmp	r4, r3
 80032e2:	d12b      	bne.n	800333c <__swbuf_r+0x70>
 80032e4:	686c      	ldr	r4, [r5, #4]
 80032e6:	69a3      	ldr	r3, [r4, #24]
 80032e8:	60a3      	str	r3, [r4, #8]
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	071a      	lsls	r2, r3, #28
 80032ee:	d52f      	bpl.n	8003350 <__swbuf_r+0x84>
 80032f0:	6923      	ldr	r3, [r4, #16]
 80032f2:	b36b      	cbz	r3, 8003350 <__swbuf_r+0x84>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	1ac0      	subs	r0, r0, r3
 80032fa:	6963      	ldr	r3, [r4, #20]
 80032fc:	b2f6      	uxtb	r6, r6
 80032fe:	4283      	cmp	r3, r0
 8003300:	4637      	mov	r7, r6
 8003302:	dc04      	bgt.n	800330e <__swbuf_r+0x42>
 8003304:	4621      	mov	r1, r4
 8003306:	4628      	mov	r0, r5
 8003308:	f000 f948 	bl	800359c <_fflush_r>
 800330c:	bb30      	cbnz	r0, 800335c <__swbuf_r+0x90>
 800330e:	68a3      	ldr	r3, [r4, #8]
 8003310:	3b01      	subs	r3, #1
 8003312:	60a3      	str	r3, [r4, #8]
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6022      	str	r2, [r4, #0]
 800331a:	701e      	strb	r6, [r3, #0]
 800331c:	6963      	ldr	r3, [r4, #20]
 800331e:	3001      	adds	r0, #1
 8003320:	4283      	cmp	r3, r0
 8003322:	d004      	beq.n	800332e <__swbuf_r+0x62>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	07db      	lsls	r3, r3, #31
 8003328:	d506      	bpl.n	8003338 <__swbuf_r+0x6c>
 800332a:	2e0a      	cmp	r6, #10
 800332c:	d104      	bne.n	8003338 <__swbuf_r+0x6c>
 800332e:	4621      	mov	r1, r4
 8003330:	4628      	mov	r0, r5
 8003332:	f000 f933 	bl	800359c <_fflush_r>
 8003336:	b988      	cbnz	r0, 800335c <__swbuf_r+0x90>
 8003338:	4638      	mov	r0, r7
 800333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <__swbuf_r+0x9c>)
 800333e:	429c      	cmp	r4, r3
 8003340:	d101      	bne.n	8003346 <__swbuf_r+0x7a>
 8003342:	68ac      	ldr	r4, [r5, #8]
 8003344:	e7cf      	b.n	80032e6 <__swbuf_r+0x1a>
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <__swbuf_r+0xa0>)
 8003348:	429c      	cmp	r4, r3
 800334a:	bf08      	it	eq
 800334c:	68ec      	ldreq	r4, [r5, #12]
 800334e:	e7ca      	b.n	80032e6 <__swbuf_r+0x1a>
 8003350:	4621      	mov	r1, r4
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f81e 	bl	8003394 <__swsetup_r>
 8003358:	2800      	cmp	r0, #0
 800335a:	d0cb      	beq.n	80032f4 <__swbuf_r+0x28>
 800335c:	f04f 37ff 	mov.w	r7, #4294967295
 8003360:	e7ea      	b.n	8003338 <__swbuf_r+0x6c>
 8003362:	bf00      	nop
 8003364:	08003884 	.word	0x08003884
 8003368:	080038a4 	.word	0x080038a4
 800336c:	08003864 	.word	0x08003864

08003370 <_write_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4d07      	ldr	r5, [pc, #28]	; (8003390 <_write_r+0x20>)
 8003374:	4604      	mov	r4, r0
 8003376:	4608      	mov	r0, r1
 8003378:	4611      	mov	r1, r2
 800337a:	2200      	movs	r2, #0
 800337c:	602a      	str	r2, [r5, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f7fd fb55 	bl	8000a2e <_write>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_write_r+0x1e>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	b103      	cbz	r3, 800338e <_write_r+0x1e>
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000134 	.word	0x20000134

08003394 <__swsetup_r>:
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <__swsetup_r+0xcc>)
 8003396:	b570      	push	{r4, r5, r6, lr}
 8003398:	681d      	ldr	r5, [r3, #0]
 800339a:	4606      	mov	r6, r0
 800339c:	460c      	mov	r4, r1
 800339e:	b125      	cbz	r5, 80033aa <__swsetup_r+0x16>
 80033a0:	69ab      	ldr	r3, [r5, #24]
 80033a2:	b913      	cbnz	r3, 80033aa <__swsetup_r+0x16>
 80033a4:	4628      	mov	r0, r5
 80033a6:	f7ff fb55 	bl	8002a54 <__sinit>
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <__swsetup_r+0xd0>)
 80033ac:	429c      	cmp	r4, r3
 80033ae:	d10f      	bne.n	80033d0 <__swsetup_r+0x3c>
 80033b0:	686c      	ldr	r4, [r5, #4]
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033b8:	0719      	lsls	r1, r3, #28
 80033ba:	d42c      	bmi.n	8003416 <__swsetup_r+0x82>
 80033bc:	06dd      	lsls	r5, r3, #27
 80033be:	d411      	bmi.n	80033e4 <__swsetup_r+0x50>
 80033c0:	2309      	movs	r3, #9
 80033c2:	6033      	str	r3, [r6, #0]
 80033c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	f04f 30ff 	mov.w	r0, #4294967295
 80033ce:	e03e      	b.n	800344e <__swsetup_r+0xba>
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <__swsetup_r+0xd4>)
 80033d2:	429c      	cmp	r4, r3
 80033d4:	d101      	bne.n	80033da <__swsetup_r+0x46>
 80033d6:	68ac      	ldr	r4, [r5, #8]
 80033d8:	e7eb      	b.n	80033b2 <__swsetup_r+0x1e>
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <__swsetup_r+0xd8>)
 80033dc:	429c      	cmp	r4, r3
 80033de:	bf08      	it	eq
 80033e0:	68ec      	ldreq	r4, [r5, #12]
 80033e2:	e7e6      	b.n	80033b2 <__swsetup_r+0x1e>
 80033e4:	0758      	lsls	r0, r3, #29
 80033e6:	d512      	bpl.n	800340e <__swsetup_r+0x7a>
 80033e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ea:	b141      	cbz	r1, 80033fe <__swsetup_r+0x6a>
 80033ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033f0:	4299      	cmp	r1, r3
 80033f2:	d002      	beq.n	80033fa <__swsetup_r+0x66>
 80033f4:	4630      	mov	r0, r6
 80033f6:	f000 f98f 	bl	8003718 <_free_r>
 80033fa:	2300      	movs	r3, #0
 80033fc:	6363      	str	r3, [r4, #52]	; 0x34
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003404:	81a3      	strh	r3, [r4, #12]
 8003406:	2300      	movs	r3, #0
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	f043 0308 	orr.w	r3, r3, #8
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	6923      	ldr	r3, [r4, #16]
 8003418:	b94b      	cbnz	r3, 800342e <__swsetup_r+0x9a>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003424:	d003      	beq.n	800342e <__swsetup_r+0x9a>
 8003426:	4621      	mov	r1, r4
 8003428:	4630      	mov	r0, r6
 800342a:	f000 f929 	bl	8003680 <__smakebuf_r>
 800342e:	89a0      	ldrh	r0, [r4, #12]
 8003430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003434:	f010 0301 	ands.w	r3, r0, #1
 8003438:	d00a      	beq.n	8003450 <__swsetup_r+0xbc>
 800343a:	2300      	movs	r3, #0
 800343c:	60a3      	str	r3, [r4, #8]
 800343e:	6963      	ldr	r3, [r4, #20]
 8003440:	425b      	negs	r3, r3
 8003442:	61a3      	str	r3, [r4, #24]
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	b943      	cbnz	r3, 800345a <__swsetup_r+0xc6>
 8003448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800344c:	d1ba      	bne.n	80033c4 <__swsetup_r+0x30>
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	0781      	lsls	r1, r0, #30
 8003452:	bf58      	it	pl
 8003454:	6963      	ldrpl	r3, [r4, #20]
 8003456:	60a3      	str	r3, [r4, #8]
 8003458:	e7f4      	b.n	8003444 <__swsetup_r+0xb0>
 800345a:	2000      	movs	r0, #0
 800345c:	e7f7      	b.n	800344e <__swsetup_r+0xba>
 800345e:	bf00      	nop
 8003460:	2000000c 	.word	0x2000000c
 8003464:	08003884 	.word	0x08003884
 8003468:	080038a4 	.word	0x080038a4
 800346c:	08003864 	.word	0x08003864

08003470 <_close_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d06      	ldr	r5, [pc, #24]	; (800348c <_close_r+0x1c>)
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd faf3 	bl	8000a66 <_close>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_close_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_close_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	20000134 	.word	0x20000134

08003490 <__sflush_r>:
 8003490:	898a      	ldrh	r2, [r1, #12]
 8003492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003496:	4605      	mov	r5, r0
 8003498:	0710      	lsls	r0, r2, #28
 800349a:	460c      	mov	r4, r1
 800349c:	d458      	bmi.n	8003550 <__sflush_r+0xc0>
 800349e:	684b      	ldr	r3, [r1, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	dc05      	bgt.n	80034b0 <__sflush_r+0x20>
 80034a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dc02      	bgt.n	80034b0 <__sflush_r+0x20>
 80034aa:	2000      	movs	r0, #0
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034b2:	2e00      	cmp	r6, #0
 80034b4:	d0f9      	beq.n	80034aa <__sflush_r+0x1a>
 80034b6:	2300      	movs	r3, #0
 80034b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034bc:	682f      	ldr	r7, [r5, #0]
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	d032      	beq.n	8003528 <__sflush_r+0x98>
 80034c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	075a      	lsls	r2, r3, #29
 80034c8:	d505      	bpl.n	80034d6 <__sflush_r+0x46>
 80034ca:	6863      	ldr	r3, [r4, #4]
 80034cc:	1ac0      	subs	r0, r0, r3
 80034ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034d0:	b10b      	cbz	r3, 80034d6 <__sflush_r+0x46>
 80034d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d4:	1ac0      	subs	r0, r0, r3
 80034d6:	2300      	movs	r3, #0
 80034d8:	4602      	mov	r2, r0
 80034da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034dc:	6a21      	ldr	r1, [r4, #32]
 80034de:	4628      	mov	r0, r5
 80034e0:	47b0      	blx	r6
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	d106      	bne.n	80034f6 <__sflush_r+0x66>
 80034e8:	6829      	ldr	r1, [r5, #0]
 80034ea:	291d      	cmp	r1, #29
 80034ec:	d82c      	bhi.n	8003548 <__sflush_r+0xb8>
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <__sflush_r+0x108>)
 80034f0:	40ca      	lsrs	r2, r1
 80034f2:	07d6      	lsls	r6, r2, #31
 80034f4:	d528      	bpl.n	8003548 <__sflush_r+0xb8>
 80034f6:	2200      	movs	r2, #0
 80034f8:	6062      	str	r2, [r4, #4]
 80034fa:	04d9      	lsls	r1, r3, #19
 80034fc:	6922      	ldr	r2, [r4, #16]
 80034fe:	6022      	str	r2, [r4, #0]
 8003500:	d504      	bpl.n	800350c <__sflush_r+0x7c>
 8003502:	1c42      	adds	r2, r0, #1
 8003504:	d101      	bne.n	800350a <__sflush_r+0x7a>
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	b903      	cbnz	r3, 800350c <__sflush_r+0x7c>
 800350a:	6560      	str	r0, [r4, #84]	; 0x54
 800350c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800350e:	602f      	str	r7, [r5, #0]
 8003510:	2900      	cmp	r1, #0
 8003512:	d0ca      	beq.n	80034aa <__sflush_r+0x1a>
 8003514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003518:	4299      	cmp	r1, r3
 800351a:	d002      	beq.n	8003522 <__sflush_r+0x92>
 800351c:	4628      	mov	r0, r5
 800351e:	f000 f8fb 	bl	8003718 <_free_r>
 8003522:	2000      	movs	r0, #0
 8003524:	6360      	str	r0, [r4, #52]	; 0x34
 8003526:	e7c1      	b.n	80034ac <__sflush_r+0x1c>
 8003528:	6a21      	ldr	r1, [r4, #32]
 800352a:	2301      	movs	r3, #1
 800352c:	4628      	mov	r0, r5
 800352e:	47b0      	blx	r6
 8003530:	1c41      	adds	r1, r0, #1
 8003532:	d1c7      	bne.n	80034c4 <__sflush_r+0x34>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0c4      	beq.n	80034c4 <__sflush_r+0x34>
 800353a:	2b1d      	cmp	r3, #29
 800353c:	d001      	beq.n	8003542 <__sflush_r+0xb2>
 800353e:	2b16      	cmp	r3, #22
 8003540:	d101      	bne.n	8003546 <__sflush_r+0xb6>
 8003542:	602f      	str	r7, [r5, #0]
 8003544:	e7b1      	b.n	80034aa <__sflush_r+0x1a>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	e7ad      	b.n	80034ac <__sflush_r+0x1c>
 8003550:	690f      	ldr	r7, [r1, #16]
 8003552:	2f00      	cmp	r7, #0
 8003554:	d0a9      	beq.n	80034aa <__sflush_r+0x1a>
 8003556:	0793      	lsls	r3, r2, #30
 8003558:	680e      	ldr	r6, [r1, #0]
 800355a:	bf08      	it	eq
 800355c:	694b      	ldreq	r3, [r1, #20]
 800355e:	600f      	str	r7, [r1, #0]
 8003560:	bf18      	it	ne
 8003562:	2300      	movne	r3, #0
 8003564:	eba6 0807 	sub.w	r8, r6, r7
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	f1b8 0f00 	cmp.w	r8, #0
 800356e:	dd9c      	ble.n	80034aa <__sflush_r+0x1a>
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003574:	4643      	mov	r3, r8
 8003576:	463a      	mov	r2, r7
 8003578:	4628      	mov	r0, r5
 800357a:	47b0      	blx	r6
 800357c:	2800      	cmp	r0, #0
 800357e:	dc06      	bgt.n	800358e <__sflush_r+0xfe>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	e78e      	b.n	80034ac <__sflush_r+0x1c>
 800358e:	4407      	add	r7, r0
 8003590:	eba8 0800 	sub.w	r8, r8, r0
 8003594:	e7e9      	b.n	800356a <__sflush_r+0xda>
 8003596:	bf00      	nop
 8003598:	20400001 	.word	0x20400001

0800359c <_fflush_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	4605      	mov	r5, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	b913      	cbnz	r3, 80035ac <_fflush_r+0x10>
 80035a6:	2500      	movs	r5, #0
 80035a8:	4628      	mov	r0, r5
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	b118      	cbz	r0, 80035b6 <_fflush_r+0x1a>
 80035ae:	6983      	ldr	r3, [r0, #24]
 80035b0:	b90b      	cbnz	r3, 80035b6 <_fflush_r+0x1a>
 80035b2:	f7ff fa4f 	bl	8002a54 <__sinit>
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <_fflush_r+0x6c>)
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d11b      	bne.n	80035f4 <_fflush_r+0x58>
 80035bc:	686c      	ldr	r4, [r5, #4]
 80035be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ef      	beq.n	80035a6 <_fflush_r+0xa>
 80035c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035c8:	07d0      	lsls	r0, r2, #31
 80035ca:	d404      	bmi.n	80035d6 <_fflush_r+0x3a>
 80035cc:	0599      	lsls	r1, r3, #22
 80035ce:	d402      	bmi.n	80035d6 <_fflush_r+0x3a>
 80035d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035d2:	f7ff fadd 	bl	8002b90 <__retarget_lock_acquire_recursive>
 80035d6:	4628      	mov	r0, r5
 80035d8:	4621      	mov	r1, r4
 80035da:	f7ff ff59 	bl	8003490 <__sflush_r>
 80035de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035e0:	07da      	lsls	r2, r3, #31
 80035e2:	4605      	mov	r5, r0
 80035e4:	d4e0      	bmi.n	80035a8 <_fflush_r+0xc>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	059b      	lsls	r3, r3, #22
 80035ea:	d4dd      	bmi.n	80035a8 <_fflush_r+0xc>
 80035ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ee:	f7ff fad0 	bl	8002b92 <__retarget_lock_release_recursive>
 80035f2:	e7d9      	b.n	80035a8 <_fflush_r+0xc>
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <_fflush_r+0x70>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <_fflush_r+0x62>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7df      	b.n	80035be <_fflush_r+0x22>
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <_fflush_r+0x74>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7da      	b.n	80035be <_fflush_r+0x22>
 8003608:	08003884 	.word	0x08003884
 800360c:	080038a4 	.word	0x080038a4
 8003610:	08003864 	.word	0x08003864

08003614 <_lseek_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4d07      	ldr	r5, [pc, #28]	; (8003634 <_lseek_r+0x20>)
 8003618:	4604      	mov	r4, r0
 800361a:	4608      	mov	r0, r1
 800361c:	4611      	mov	r1, r2
 800361e:	2200      	movs	r2, #0
 8003620:	602a      	str	r2, [r5, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	f7fd fa46 	bl	8000ab4 <_lseek>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_lseek_r+0x1e>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_lseek_r+0x1e>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	20000134 	.word	0x20000134

08003638 <__swhatbuf_r>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	460e      	mov	r6, r1
 800363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003640:	2900      	cmp	r1, #0
 8003642:	b096      	sub	sp, #88	; 0x58
 8003644:	4614      	mov	r4, r2
 8003646:	461d      	mov	r5, r3
 8003648:	da07      	bge.n	800365a <__swhatbuf_r+0x22>
 800364a:	2300      	movs	r3, #0
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	89b3      	ldrh	r3, [r6, #12]
 8003650:	061a      	lsls	r2, r3, #24
 8003652:	d410      	bmi.n	8003676 <__swhatbuf_r+0x3e>
 8003654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003658:	e00e      	b.n	8003678 <__swhatbuf_r+0x40>
 800365a:	466a      	mov	r2, sp
 800365c:	f000 f8be 	bl	80037dc <_fstat_r>
 8003660:	2800      	cmp	r0, #0
 8003662:	dbf2      	blt.n	800364a <__swhatbuf_r+0x12>
 8003664:	9a01      	ldr	r2, [sp, #4]
 8003666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800366a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800366e:	425a      	negs	r2, r3
 8003670:	415a      	adcs	r2, r3
 8003672:	602a      	str	r2, [r5, #0]
 8003674:	e7ee      	b.n	8003654 <__swhatbuf_r+0x1c>
 8003676:	2340      	movs	r3, #64	; 0x40
 8003678:	2000      	movs	r0, #0
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	b016      	add	sp, #88	; 0x58
 800367e:	bd70      	pop	{r4, r5, r6, pc}

08003680 <__smakebuf_r>:
 8003680:	898b      	ldrh	r3, [r1, #12]
 8003682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003684:	079d      	lsls	r5, r3, #30
 8003686:	4606      	mov	r6, r0
 8003688:	460c      	mov	r4, r1
 800368a:	d507      	bpl.n	800369c <__smakebuf_r+0x1c>
 800368c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	6123      	str	r3, [r4, #16]
 8003694:	2301      	movs	r3, #1
 8003696:	6163      	str	r3, [r4, #20]
 8003698:	b002      	add	sp, #8
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	ab01      	add	r3, sp, #4
 800369e:	466a      	mov	r2, sp
 80036a0:	f7ff ffca 	bl	8003638 <__swhatbuf_r>
 80036a4:	9900      	ldr	r1, [sp, #0]
 80036a6:	4605      	mov	r5, r0
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7ff fa73 	bl	8002b94 <_malloc_r>
 80036ae:	b948      	cbnz	r0, 80036c4 <__smakebuf_r+0x44>
 80036b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b4:	059a      	lsls	r2, r3, #22
 80036b6:	d4ef      	bmi.n	8003698 <__smakebuf_r+0x18>
 80036b8:	f023 0303 	bic.w	r3, r3, #3
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	e7e3      	b.n	800368c <__smakebuf_r+0xc>
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <__smakebuf_r+0x7c>)
 80036c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	6020      	str	r0, [r4, #0]
 80036cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	9b00      	ldr	r3, [sp, #0]
 80036d4:	6163      	str	r3, [r4, #20]
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	6120      	str	r0, [r4, #16]
 80036da:	b15b      	cbz	r3, 80036f4 <__smakebuf_r+0x74>
 80036dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036e0:	4630      	mov	r0, r6
 80036e2:	f000 f88d 	bl	8003800 <_isatty_r>
 80036e6:	b128      	cbz	r0, 80036f4 <__smakebuf_r+0x74>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	89a0      	ldrh	r0, [r4, #12]
 80036f6:	4305      	orrs	r5, r0
 80036f8:	81a5      	strh	r5, [r4, #12]
 80036fa:	e7cd      	b.n	8003698 <__smakebuf_r+0x18>
 80036fc:	080029ed 	.word	0x080029ed

08003700 <__malloc_lock>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__malloc_lock+0x8>)
 8003702:	f7ff ba45 	b.w	8002b90 <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	2000012c 	.word	0x2000012c

0800370c <__malloc_unlock>:
 800370c:	4801      	ldr	r0, [pc, #4]	; (8003714 <__malloc_unlock+0x8>)
 800370e:	f7ff ba40 	b.w	8002b92 <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	2000012c 	.word	0x2000012c

08003718 <_free_r>:
 8003718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800371a:	2900      	cmp	r1, #0
 800371c:	d048      	beq.n	80037b0 <_free_r+0x98>
 800371e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003722:	9001      	str	r0, [sp, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f1a1 0404 	sub.w	r4, r1, #4
 800372a:	bfb8      	it	lt
 800372c:	18e4      	addlt	r4, r4, r3
 800372e:	f7ff ffe7 	bl	8003700 <__malloc_lock>
 8003732:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <_free_r+0x9c>)
 8003734:	9801      	ldr	r0, [sp, #4]
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	4615      	mov	r5, r2
 800373a:	b933      	cbnz	r3, 800374a <_free_r+0x32>
 800373c:	6063      	str	r3, [r4, #4]
 800373e:	6014      	str	r4, [r2, #0]
 8003740:	b003      	add	sp, #12
 8003742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003746:	f7ff bfe1 	b.w	800370c <__malloc_unlock>
 800374a:	42a3      	cmp	r3, r4
 800374c:	d90b      	bls.n	8003766 <_free_r+0x4e>
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	1862      	adds	r2, r4, r1
 8003752:	4293      	cmp	r3, r2
 8003754:	bf04      	itt	eq
 8003756:	681a      	ldreq	r2, [r3, #0]
 8003758:	685b      	ldreq	r3, [r3, #4]
 800375a:	6063      	str	r3, [r4, #4]
 800375c:	bf04      	itt	eq
 800375e:	1852      	addeq	r2, r2, r1
 8003760:	6022      	streq	r2, [r4, #0]
 8003762:	602c      	str	r4, [r5, #0]
 8003764:	e7ec      	b.n	8003740 <_free_r+0x28>
 8003766:	461a      	mov	r2, r3
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b10b      	cbz	r3, 8003770 <_free_r+0x58>
 800376c:	42a3      	cmp	r3, r4
 800376e:	d9fa      	bls.n	8003766 <_free_r+0x4e>
 8003770:	6811      	ldr	r1, [r2, #0]
 8003772:	1855      	adds	r5, r2, r1
 8003774:	42a5      	cmp	r5, r4
 8003776:	d10b      	bne.n	8003790 <_free_r+0x78>
 8003778:	6824      	ldr	r4, [r4, #0]
 800377a:	4421      	add	r1, r4
 800377c:	1854      	adds	r4, r2, r1
 800377e:	42a3      	cmp	r3, r4
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	d1dd      	bne.n	8003740 <_free_r+0x28>
 8003784:	681c      	ldr	r4, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	6053      	str	r3, [r2, #4]
 800378a:	4421      	add	r1, r4
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	e7d7      	b.n	8003740 <_free_r+0x28>
 8003790:	d902      	bls.n	8003798 <_free_r+0x80>
 8003792:	230c      	movs	r3, #12
 8003794:	6003      	str	r3, [r0, #0]
 8003796:	e7d3      	b.n	8003740 <_free_r+0x28>
 8003798:	6825      	ldr	r5, [r4, #0]
 800379a:	1961      	adds	r1, r4, r5
 800379c:	428b      	cmp	r3, r1
 800379e:	bf04      	itt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	bf04      	itt	eq
 80037a8:	1949      	addeq	r1, r1, r5
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	6054      	str	r4, [r2, #4]
 80037ae:	e7c7      	b.n	8003740 <_free_r+0x28>
 80037b0:	b003      	add	sp, #12
 80037b2:	bd30      	pop	{r4, r5, pc}
 80037b4:	20000090 	.word	0x20000090

080037b8 <_read_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	; (80037d8 <_read_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fd f914 	bl	80009f4 <_read>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_read_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_read_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	20000134 	.word	0x20000134

080037dc <_fstat_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d07      	ldr	r5, [pc, #28]	; (80037fc <_fstat_r+0x20>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	f7fd f948 	bl	8000a7e <_fstat>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	d102      	bne.n	80037f8 <_fstat_r+0x1c>
 80037f2:	682b      	ldr	r3, [r5, #0]
 80037f4:	b103      	cbz	r3, 80037f8 <_fstat_r+0x1c>
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
 80037fa:	bf00      	nop
 80037fc:	20000134 	.word	0x20000134

08003800 <_isatty_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4d06      	ldr	r5, [pc, #24]	; (800381c <_isatty_r+0x1c>)
 8003804:	2300      	movs	r3, #0
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f7fd f947 	bl	8000a9e <_isatty>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_isatty_r+0x1a>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_isatty_r+0x1a>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	20000134 	.word	0x20000134

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
