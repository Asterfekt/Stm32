
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c6c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004e08  08004e08  00014e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000074  080050ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080050ac  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d50e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001965  00000000  00000000  0002d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016245  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c83b  00000000  00000000  000467c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9fd  00000000  00000000  00053000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e09fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003550  00000000  00000000  000e0a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004dec 	.word	0x08004dec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08004dec 	.word	0x08004dec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b96e 	b.w	8000e68 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468c      	mov	ip, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8083 	bne.w	8000cba <__udivmoddi4+0x116>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d947      	bls.n	8000c4a <__udivmoddi4+0xa6>
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	b142      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bc0:	f1c2 0020 	rsb	r0, r2, #32
 8000bc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	4097      	lsls	r7, r2
 8000bcc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bdc:	fa1f fe87 	uxth.w	lr, r7
 8000be0:	fb08 c116 	mls	r1, r8, r6, ip
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x60>
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bf6:	f080 8119 	bcs.w	8000e2c <__udivmoddi4+0x288>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 8116 	bls.w	8000e2c <__udivmoddi4+0x288>
 8000c00:	3e02      	subs	r6, #2
 8000c02:	443b      	add	r3, r7
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	f080 8105 	bcs.w	8000e30 <__udivmoddi4+0x28c>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	f240 8102 	bls.w	8000e30 <__udivmoddi4+0x28c>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	443c      	add	r4, r7
 8000c30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c34:	eba4 040e 	sub.w	r4, r4, lr
 8000c38:	2600      	movs	r6, #0
 8000c3a:	b11d      	cbz	r5, 8000c44 <__udivmoddi4+0xa0>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c5 4300 	strd	r4, r3, [r5]
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xaa>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d150      	bne.n	8000cf8 <__udivmoddi4+0x154>
 8000c56:	1bcb      	subs	r3, r1, r7
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	2601      	movs	r6, #1
 8000c62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c66:	0c21      	lsrs	r1, r4, #16
 8000c68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c70:	fb08 f30c 	mul.w	r3, r8, ip
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0xe4>
 8000c78:	1879      	adds	r1, r7, r1
 8000c7a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0xe2>
 8000c80:	428b      	cmp	r3, r1
 8000c82:	f200 80e9 	bhi.w	8000e58 <__udivmoddi4+0x2b4>
 8000c86:	4684      	mov	ip, r0
 8000c88:	1ac9      	subs	r1, r1, r3
 8000c8a:	b2a3      	uxth	r3, r4
 8000c8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c98:	fb08 f800 	mul.w	r8, r8, r0
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x10c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x10a>
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	f200 80d9 	bhi.w	8000e60 <__udivmoddi4+0x2bc>
 8000cae:	4618      	mov	r0, r3
 8000cb0:	eba4 0408 	sub.w	r4, r4, r8
 8000cb4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb8:	e7bf      	b.n	8000c3a <__udivmoddi4+0x96>
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0x12e>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80b1 	beq.w	8000e26 <__udivmoddi4+0x282>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x1cc>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0x140>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80b8 	bhi.w	8000e54 <__udivmoddi4+0x2b0>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	468c      	mov	ip, r1
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0a8      	beq.n	8000c44 <__udivmoddi4+0xa0>
 8000cf2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cf6:	e7a5      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000cf8:	f1c2 0320 	rsb	r3, r2, #32
 8000cfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000d00:	4097      	lsls	r7, r2
 8000d02:	fa01 f002 	lsl.w	r0, r1, r2
 8000d06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0a:	40d9      	lsrs	r1, r3
 8000d0c:	4330      	orrs	r0, r6
 8000d0e:	0c03      	lsrs	r3, r0, #16
 8000d10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d20:	fb06 f108 	mul.w	r1, r6, r8
 8000d24:	4299      	cmp	r1, r3
 8000d26:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2a:	d909      	bls.n	8000d40 <__udivmoddi4+0x19c>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d32:	f080 808d 	bcs.w	8000e50 <__udivmoddi4+0x2ac>
 8000d36:	4299      	cmp	r1, r3
 8000d38:	f240 808a 	bls.w	8000e50 <__udivmoddi4+0x2ac>
 8000d3c:	3e02      	subs	r6, #2
 8000d3e:	443b      	add	r3, r7
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b281      	uxth	r1, r0
 8000d44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb00 f308 	mul.w	r3, r0, r8
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x1c4>
 8000d58:	1879      	adds	r1, r7, r1
 8000d5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d5e:	d273      	bcs.n	8000e48 <__udivmoddi4+0x2a4>
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d971      	bls.n	8000e48 <__udivmoddi4+0x2a4>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4439      	add	r1, r7
 8000d68:	1acb      	subs	r3, r1, r3
 8000d6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d6e:	e778      	b.n	8000c62 <__udivmoddi4+0xbe>
 8000d70:	f1c6 0c20 	rsb	ip, r6, #32
 8000d74:	fa03 f406 	lsl.w	r4, r3, r6
 8000d78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d7c:	431c      	orrs	r4, r3
 8000d7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	0c3b      	lsrs	r3, r7, #16
 8000d92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d96:	fa1f f884 	uxth.w	r8, r4
 8000d9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000da2:	fb09 fa08 	mul.w	sl, r9, r8
 8000da6:	458a      	cmp	sl, r1
 8000da8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dac:	fa00 f306 	lsl.w	r3, r0, r6
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x220>
 8000db2:	1861      	adds	r1, r4, r1
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	d248      	bcs.n	8000e4c <__udivmoddi4+0x2a8>
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	d946      	bls.n	8000e4c <__udivmoddi4+0x2a8>
 8000dbe:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc2:	4421      	add	r1, r4
 8000dc4:	eba1 010a 	sub.w	r1, r1, sl
 8000dc8:	b2bf      	uxth	r7, r7
 8000dca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dce:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dd2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dd6:	fb00 f808 	mul.w	r8, r0, r8
 8000dda:	45b8      	cmp	r8, r7
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x24a>
 8000dde:	19e7      	adds	r7, r4, r7
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d22e      	bcs.n	8000e44 <__udivmoddi4+0x2a0>
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d92c      	bls.n	8000e44 <__udivmoddi4+0x2a0>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4427      	add	r7, r4
 8000dee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df2:	eba7 0708 	sub.w	r7, r7, r8
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	454f      	cmp	r7, r9
 8000dfc:	46c6      	mov	lr, r8
 8000dfe:	4649      	mov	r1, r9
 8000e00:	d31a      	bcc.n	8000e38 <__udivmoddi4+0x294>
 8000e02:	d017      	beq.n	8000e34 <__udivmoddi4+0x290>
 8000e04:	b15d      	cbz	r5, 8000e1e <__udivmoddi4+0x27a>
 8000e06:	ebb3 020e 	subs.w	r2, r3, lr
 8000e0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e12:	40f2      	lsrs	r2, r6
 8000e14:	ea4c 0202 	orr.w	r2, ip, r2
 8000e18:	40f7      	lsrs	r7, r6
 8000e1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e1e:	2600      	movs	r6, #0
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	462e      	mov	r6, r5
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e70b      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e6e9      	b.n	8000c04 <__udivmoddi4+0x60>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6fd      	b.n	8000c30 <__udivmoddi4+0x8c>
 8000e34:	4543      	cmp	r3, r8
 8000e36:	d2e5      	bcs.n	8000e04 <__udivmoddi4+0x260>
 8000e38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7df      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e7d2      	b.n	8000dee <__udivmoddi4+0x24a>
 8000e48:	4660      	mov	r0, ip
 8000e4a:	e78d      	b.n	8000d68 <__udivmoddi4+0x1c4>
 8000e4c:	4681      	mov	r9, r0
 8000e4e:	e7b9      	b.n	8000dc4 <__udivmoddi4+0x220>
 8000e50:	4666      	mov	r6, ip
 8000e52:	e775      	b.n	8000d40 <__udivmoddi4+0x19c>
 8000e54:	4630      	mov	r0, r6
 8000e56:	e74a      	b.n	8000cee <__udivmoddi4+0x14a>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	4439      	add	r1, r7
 8000e5e:	e713      	b.n	8000c88 <__udivmoddi4+0xe4>
 8000e60:	3802      	subs	r0, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	e724      	b.n	8000cb0 <__udivmoddi4+0x10c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d103      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e80:	f000 ff35 	bl	8001cee <HAL_GPIO_TogglePin>
    //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
  }
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	40020000 	.word	0x40020000
 8000e94:	00000000 	.word	0x00000000

08000e98 <calc_pwm>:
float calc_pwm(float val)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <calc_pwm+0x80>)
 8000ea4:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <calc_pwm+0x84>)
 8000ea8:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eae:	eeb1 7a67 	vneg.f32	s14, s15
 8000eb2:	edd7 6a01 	vldr	s13, [r7, #4]
 8000eb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	ee17 0a90 	vmov	r0, s15
 8000ec6:	f7ff faeb 	bl	80004a0 <__aeabi_f2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	ec43 2b10 	vmov	d0, r2, r3
 8000ed2:	f002 fdd1 	bl	8003a78 <exp>
 8000ed6:	ec51 0b10 	vmov	r0, r1, d0
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <calc_pwm+0x88>)
 8000ee0:	f7ff f980 	bl	80001e4 <__adddf3>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	a109      	add	r1, pc, #36	; (adr r1, 8000f10 <calc_pwm+0x78>)
 8000eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eee:	f7ff fc59 	bl	80007a4 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fdeb 	bl	8000ad4 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	ee07 3a90 	vmov	s15, r3
}
 8000f04:	eeb0 0a67 	vmov.f32	s0, s15
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	00000000 	.word	0x00000000
 8000f14:	40c38800 	.word	0x40c38800
 8000f18:	3e051eb8 	.word	0x3e051eb8
 8000f1c:	428c0000 	.word	0x428c0000
 8000f20:	3ff00000 	.word	0x3ff00000

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f000 fb9b 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f8d3 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f000 f9ed 	bl	8001310 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f36:	f000 f92f 	bl	8001198 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 f9bf 	bl	80012bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
int counter;
  HAL_TIM_Base_Start_IT(&htim3);
 8000f3e:	4862      	ldr	r0, [pc, #392]	; (80010c8 <main+0x1a4>)
 8000f40:	f001 fb88 	bl	8002654 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	4860      	ldr	r0, [pc, #384]	; (80010c8 <main+0x1a4>)
 8000f48:	f001 fbe6 	bl	8002718 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2);
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	485e      	ldr	r0, [pc, #376]	; (80010c8 <main+0x1a4>)
 8000f50:	f001 fbe2 	bl	8002718 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3);
 8000f54:	2108      	movs	r1, #8
 8000f56:	485c      	ldr	r0, [pc, #368]	; (80010c8 <main+0x1a4>)
 8000f58:	f001 fbde 	bl	8002718 <HAL_TIM_OC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float r = 50 * (1.0f + sin(counter / 100.0f));
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f66:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80010cc <main+0x1a8>
 8000f6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f6e:	ee16 0a90 	vmov	r0, s13
 8000f72:	f7ff fa95 	bl	80004a0 <__aeabi_f2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	ec43 2b10 	vmov	d0, r2, r3
 8000f7e:	f002 fd27 	bl	80039d0 <sin>
 8000f82:	ec51 0b10 	vmov	r0, r1, d0
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <main+0x1ac>)
 8000f8c:	f7ff f92a 	bl	80001e4 <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <main+0x1b0>)
 8000f9e:	f7ff fad7 	bl	8000550 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd93 	bl	8000ad4 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60bb      	str	r3, [r7, #8]
	  float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010cc <main+0x1a8>
 8000fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fcc:	ee16 0a90 	vmov	r0, s13
 8000fd0:	f7ff fa66 	bl	80004a0 <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	ec43 2b10 	vmov	d0, r2, r3
 8000fdc:	f002 fcf8 	bl	80039d0 <sin>
 8000fe0:	ec51 0b10 	vmov	r0, r1, d0
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <main+0x1ac>)
 8000fea:	f7ff f8fb 	bl	80001e4 <__adddf3>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <main+0x1b0>)
 8000ffc:	f7ff faa8 	bl	8000550 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fd64 	bl	8000ad4 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	607b      	str	r3, [r7, #4]
	  float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800101e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80010cc <main+0x1a8>
 8001022:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001026:	ee16 0a90 	vmov	r0, s13
 800102a:	f7ff fa39 	bl	80004a0 <__aeabi_f2d>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	ec43 2b10 	vmov	d0, r2, r3
 8001036:	f002 fccb 	bl	80039d0 <sin>
 800103a:	ec51 0b10 	vmov	r0, r1, d0
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <main+0x1ac>)
 8001044:	f7ff f8ce 	bl	80001e4 <__adddf3>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <main+0x1b0>)
 8001056:	f7ff fa7b 	bl	8000550 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fd37 	bl	8000ad4 <__aeabi_d2f>
 8001066:	4603      	mov	r3, r0
 8001068:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, calc_pwm(b));
 800106a:	ed97 0a00 	vldr	s0, [r7]
 800106e:	f7ff ff13 	bl	8000e98 <calc_pwm>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <main+0x1a4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107e:	ee17 2a90 	vmov	r2, s15
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, calc_pwm(g));
 8001084:	ed97 0a01 	vldr	s0, [r7, #4]
 8001088:	f7ff ff06 	bl	8000e98 <calc_pwm>
 800108c:	eef0 7a40 	vmov.f32	s15, s0
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <main+0x1a4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001098:	ee17 2a90 	vmov	r2, s15
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, calc_pwm(r));
 800109e:	ed97 0a02 	vldr	s0, [r7, #8]
 80010a2:	f7ff fef9 	bl	8000e98 <calc_pwm>
 80010a6:	eef0 7a40 	vmov.f32	s15, s0
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <main+0x1a4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b2:	ee17 2a90 	vmov	r2, s15
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c

	  HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f000 fb45 	bl	8001748 <HAL_Delay>
	  counter++;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
  {
 80010c4:	e74a      	b.n	8000f5c <main+0x38>
 80010c6:	bf00      	nop
 80010c8:	20000090 	.word	0x20000090
 80010cc:	42c80000 	.word	0x42c80000
 80010d0:	3ff00000 	.word	0x3ff00000
 80010d4:	40490000 	.word	0x40490000

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fc68 	bl	80039bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <SystemClock_Config+0xb8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <SystemClock_Config+0xb8>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <SystemClock_Config+0xb8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <SystemClock_Config+0xbc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <SystemClock_Config+0xbc>)
 8001126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <SystemClock_Config+0xbc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fde9 	bl	8001d24 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001158:	f000 f91c 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f001 f84c 	bl	8002214 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001182:	f000 f907 	bl	8001394 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
 80011c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011ca:	4a3b      	ldr	r2, [pc, #236]	; (80012b8 <MX_TIM3_Init+0x120>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80011ce:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011d0:	224f      	movs	r2, #79	; 0x4f
 80011d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011da:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ee:	4831      	ldr	r0, [pc, #196]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80011f0:	f001 f9e0 	bl	80025b4 <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011fa:	f000 f8cb 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001208:	4619      	mov	r1, r3
 800120a:	482a      	ldr	r0, [pc, #168]	; (80012b4 <MX_TIM3_Init+0x11c>)
 800120c:	f001 fd58 	bl	8002cc0 <HAL_TIM_ConfigClockSource>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001216:	f000 f8bd 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121a:	4826      	ldr	r0, [pc, #152]	; (80012b4 <MX_TIM3_Init+0x11c>)
 800121c:	f001 fb2c 	bl	8002878 <HAL_TIM_PWM_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001226:	f000 f8b5 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4619      	mov	r1, r3
 8001238:	481e      	ldr	r0, [pc, #120]	; (80012b4 <MX_TIM3_Init+0x11c>)
 800123a:	f002 f8fd 	bl	8003438 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001244:	f000 f8a6 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800124c:	2332      	movs	r3, #50	; 0x32
 800124e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	4815      	ldr	r0, [pc, #84]	; (80012b4 <MX_TIM3_Init+0x11c>)
 8001260:	f001 fc6c 	bl	8002b3c <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800126a:	f000 f893 	bl	8001394 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 800126e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001272:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	480e      	ldr	r0, [pc, #56]	; (80012b4 <MX_TIM3_Init+0x11c>)
 800127c:	f001 fc5e 	bl	8002b3c <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001286:	f000 f885 	bl	8001394 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800128a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2208      	movs	r2, #8
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM3_Init+0x11c>)
 8001298:	f001 fc50 	bl	8002b3c <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80012a2:	f000 f877 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM3_Init+0x11c>)
 80012a8:	f000 f8ca 	bl	8001440 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	; 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000090 	.word	0x20000090
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_USART2_UART_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012f4:	f002 f922 	bl	800353c <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012fe:	f000 f849 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000d8 	.word	0x200000d8
 800130c:	40004400 	.word	0x40004400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_GPIO_Init+0x7c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_GPIO_Init+0x7c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_GPIO_Init+0x7c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_GPIO_Init+0x7c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <MX_GPIO_Init+0x7c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_GPIO_Init+0x7c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2120      	movs	r1, #32
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <MX_GPIO_Init+0x80>)
 8001364:	f000 fcaa 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001368:	2320      	movs	r3, #32
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_GPIO_Init+0x80>)
 8001380:	f000 fb18 	bl	80019b4 <HAL_GPIO_Init>

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_MspInit+0x4c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_TIM_Base_MspInit+0x48>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d115      	bne.n	800142e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_TIM_Base_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_TIM_Base_MspInit+0x4c>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_TIM_Base_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	210a      	movs	r1, #10
 8001422:	201d      	movs	r0, #29
 8001424:	f000 fa8f 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001428:	201d      	movs	r0, #29
 800142a:	f000 faa8 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40000400 	.word	0x40000400
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <HAL_TIM_MspPostInit+0xa4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d13b      	bne.n	80014da <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_TIM_MspPostInit+0xa8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_TIM_MspPostInit+0xa8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_TIM_MspPostInit+0xa8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_TIM_MspPostInit+0xa8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_TIM_MspPostInit+0xa8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_TIM_MspPostInit+0xa8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149a:	23c0      	movs	r3, #192	; 0xc0
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014aa:	2302      	movs	r3, #2
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <HAL_TIM_MspPostInit+0xac>)
 80014b6:	f000 fa7d 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ba:	2301      	movs	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ca:	2302      	movs	r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <HAL_TIM_MspPostInit+0xb0>)
 80014d6:	f000 fa6d 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40000400 	.word	0x40000400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_UART_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12b      	bne.n	800156e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_UART_MspInit+0x88>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_UART_MspInit+0x88>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_UART_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_UART_MspInit+0x88>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_UART_MspInit+0x8c>)
 800156a:	f000 fa23 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40004400 	.word	0x40004400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f89a 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TIM3_IRQHandler+0x10>)
 80015de:	f001 f9a4 	bl	800292a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000090 	.word	0x20000090

080015ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001616:	490e      	ldr	r1, [pc, #56]	; (8001650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800162c:	4c0b      	ldr	r4, [pc, #44]	; (800165c <LoopFillZerobss+0x26>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163a:	f7ff ffd7 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f002 f999 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fc6f 	bl	8000f24 <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001648:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001654:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8001658:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800165c:	20000120 	.word	0x20000120

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_Init+0x40>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_Init+0x40>)
 800167a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_Init+0x40>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 f94f 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	200f      	movs	r0, #15
 8001694:	f000 f808 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fe82 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f967 	bl	800199a <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f92f 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000008 	.word	0x20000008
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	2000011c 	.word	0x2000011c

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000011c 	.word	0x2000011c

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e159      	b.n	8001c84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8148 	bne.w	8001c7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d005      	beq.n	8001a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d130      	bne.n	8001a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0201 	and.w	r2, r3, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d017      	beq.n	8001aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a2 	beq.w	8001c7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <HAL_GPIO_Init+0x2e8>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x202>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_GPIO_Init+0x2f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fe>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_GPIO_Init+0x2f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x1fa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_GPIO_Init+0x2fc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x1f6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_GPIO_Init+0x300>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x1f2>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x204>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4935      	ldr	r1, [pc, #212]	; (8001ca0 <HAL_GPIO_Init+0x2ec>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c24:	4a24      	ldr	r2, [pc, #144]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f aea2 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d00:	887a      	ldrh	r2, [r7, #2]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	041a      	lsls	r2, r3, #16
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	400b      	ands	r3, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e264      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	4ba3      	ldr	r3, [pc, #652]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d00c      	beq.n	8001d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4ba0      	ldr	r3, [pc, #640]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d112      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b99      	ldr	r3, [pc, #612]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05b      	beq.n	8001e2c <HAL_RCC_OscConfig+0x108>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d157      	bne.n	8001e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e23f      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x74>
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a90      	ldr	r2, [pc, #576]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x98>
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a8a      	ldr	r2, [pc, #552]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a87      	ldr	r2, [pc, #540]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a83      	ldr	r2, [pc, #524]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a80      	ldr	r2, [pc, #512]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fca8 	bl	8001730 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fca4 	bl	8001730 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e204      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xc0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc94 	bl	8001730 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc90 	bl	8001730 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1f0      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0xe8>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d116      	bne.n	8001e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1c4      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4952      	ldr	r1, [pc, #328]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	e03a      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <HAL_RCC_OscConfig+0x2b0>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fc49 	bl	8001730 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fc45 	bl	8001730 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1a5      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4940      	ldr	r1, [pc, #256]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_OscConfig+0x2b0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc28 	bl	8001730 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc24 	bl	8001730 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e184      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d030      	beq.n	8001f70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_OscConfig+0x2b4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fc08 	bl	8001730 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc04 	bl	8001730 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e164      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x200>
 8001f42:	e015      	b.n	8001f70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_OscConfig+0x2b4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbf1 	bl	8001730 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f52:	f7ff fbed 	bl	8001730 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e14d      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a0 	beq.w	80020be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001faa:	2301      	movs	r3, #1
 8001fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x2b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d121      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_RCC_OscConfig+0x2b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_RCC_OscConfig+0x2b8>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fbb3 	bl	8001730 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e011      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2ce>
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
 8001fd8:	42470e80 	.word	0x42470e80
 8001fdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7ff fba6 	bl	8001730 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e106      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <HAL_RCC_OscConfig+0x4e4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x2f0>
 8002006:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a80      	ldr	r2, [pc, #512]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x32a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x312>
 800201c:	4b7b      	ldr	r3, [pc, #492]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a7a      	ldr	r2, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	4b78      	ldr	r3, [pc, #480]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a77      	ldr	r2, [pc, #476]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x32a>
 8002036:	4b75      	ldr	r3, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	4a74      	ldr	r2, [pc, #464]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
 8002042:	4b72      	ldr	r3, [pc, #456]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a71      	ldr	r2, [pc, #452]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff fb6b 	bl	8001730 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff fb67 	bl	8001730 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0c5      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b65      	ldr	r3, [pc, #404]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x33a>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7ff fb55 	bl	8001730 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7ff fb51 	bl	8001730 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0af      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b5a      	ldr	r3, [pc, #360]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b56      	ldr	r3, [pc, #344]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a55      	ldr	r2, [pc, #340]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 809b 	beq.w	80021fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d05c      	beq.n	800218e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d141      	bne.n	8002160 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_OscConfig+0x4ec>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fb25 	bl	8001730 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7ff fb21 	bl	8001730 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e081      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	019b      	lsls	r3, r3, #6
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	3b01      	subs	r3, #1
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	4937      	ldr	r1, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <HAL_RCC_OscConfig+0x4ec>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fafa 	bl	8001730 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff faf6 	bl	8001730 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e056      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x41c>
 800215e:	e04e      	b.n	80021fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_RCC_OscConfig+0x4ec>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fae3 	bl	8001730 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fadf 	bl	8001730 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e03f      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x44a>
 800218c:	e037      	b.n	80021fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e032      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_RCC_OscConfig+0x4e8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d028      	beq.n	80021fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d121      	bne.n	80021fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d11a      	bne.n	80021fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ca:	4013      	ands	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d111      	bne.n	80021fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	3b01      	subs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40007000 	.word	0x40007000
 800220c:	40023800 	.word	0x40023800
 8002210:	42470060 	.word	0x42470060

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0cc      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d90c      	bls.n	8002250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b8      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002280:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	494d      	ldr	r1, [pc, #308]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d044      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e067      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4934      	ldr	r1, [pc, #208]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7ff fa14 	bl	8001730 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7ff fa10 	bl	8001730 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e04f      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d20c      	bcs.n	800235c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e032      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4916      	ldr	r1, [pc, #88]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800239a:	f000 f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	490a      	ldr	r1, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	5ccb      	ldrb	r3, [r1, r3]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f974 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08004e08 	.word	0x08004e08
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023e6:	2100      	movs	r1, #0
 80023e8:	6079      	str	r1, [r7, #4]
 80023ea:	2100      	movs	r1, #0
 80023ec:	60f9      	str	r1, [r7, #12]
 80023ee:	2100      	movs	r1, #0
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023f2:	2100      	movs	r1, #0
 80023f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f6:	4952      	ldr	r1, [pc, #328]	; (8002540 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f8:	6889      	ldr	r1, [r1, #8]
 80023fa:	f001 010c 	and.w	r1, r1, #12
 80023fe:	2908      	cmp	r1, #8
 8002400:	d00d      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x3e>
 8002402:	2908      	cmp	r1, #8
 8002404:	f200 8094 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x150>
 8002408:	2900      	cmp	r1, #0
 800240a:	d002      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x32>
 800240c:	2904      	cmp	r1, #4
 800240e:	d003      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x38>
 8002410:	e08e      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_GetSysClockFreq+0x164>)
 8002414:	60bb      	str	r3, [r7, #8]
       break;
 8002416:	e08e      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCC_GetSysClockFreq+0x168>)
 800241a:	60bb      	str	r3, [r7, #8]
      break;
 800241c:	e08b      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241e:	4948      	ldr	r1, [pc, #288]	; (8002540 <HAL_RCC_GetSysClockFreq+0x160>)
 8002420:	6849      	ldr	r1, [r1, #4]
 8002422:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002426:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002428:	4945      	ldr	r1, [pc, #276]	; (8002540 <HAL_RCC_GetSysClockFreq+0x160>)
 800242a:	6849      	ldr	r1, [r1, #4]
 800242c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002430:	2900      	cmp	r1, #0
 8002432:	d024      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002434:	4942      	ldr	r1, [pc, #264]	; (8002540 <HAL_RCC_GetSysClockFreq+0x160>)
 8002436:	6849      	ldr	r1, [r1, #4]
 8002438:	0989      	lsrs	r1, r1, #6
 800243a:	4608      	mov	r0, r1
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002444:	f04f 0500 	mov.w	r5, #0
 8002448:	ea00 0204 	and.w	r2, r0, r4
 800244c:	ea01 0305 	and.w	r3, r1, r5
 8002450:	493d      	ldr	r1, [pc, #244]	; (8002548 <HAL_RCC_GetSysClockFreq+0x168>)
 8002452:	fb01 f003 	mul.w	r0, r1, r3
 8002456:	2100      	movs	r1, #0
 8002458:	fb01 f102 	mul.w	r1, r1, r2
 800245c:	1844      	adds	r4, r0, r1
 800245e:	493a      	ldr	r1, [pc, #232]	; (8002548 <HAL_RCC_GetSysClockFreq+0x168>)
 8002460:	fba2 0101 	umull	r0, r1, r2, r1
 8002464:	1863      	adds	r3, r4, r1
 8002466:	4619      	mov	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f7fe fb80 	bl	8000b74 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e04a      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCC_GetSysClockFreq+0x160>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	461a      	mov	r2, r3
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	ea02 0400 	and.w	r4, r2, r0
 8002496:	ea03 0501 	and.w	r5, r3, r1
 800249a:	4620      	mov	r0, r4
 800249c:	4629      	mov	r1, r5
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	014b      	lsls	r3, r1, #5
 80024a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024ac:	0142      	lsls	r2, r0, #5
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	1b00      	subs	r0, r0, r4
 80024b4:	eb61 0105 	sbc.w	r1, r1, r5
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	018b      	lsls	r3, r1, #6
 80024c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024c6:	0182      	lsls	r2, r0, #6
 80024c8:	1a12      	subs	r2, r2, r0
 80024ca:	eb63 0301 	sbc.w	r3, r3, r1
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	00d9      	lsls	r1, r3, #3
 80024d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024dc:	00d0      	lsls	r0, r2, #3
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	1912      	adds	r2, r2, r4
 80024e4:	eb45 0303 	adc.w	r3, r5, r3
 80024e8:	f04f 0000 	mov.w	r0, #0
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	0299      	lsls	r1, r3, #10
 80024f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024f6:	0290      	lsls	r0, r2, #10
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f7fe fb34 	bl	8000b74 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_RCC_GetSysClockFreq+0x160>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	60bb      	str	r3, [r7, #8]
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <HAL_RCC_GetSysClockFreq+0x164>)
 8002532:	60bb      	str	r3, [r7, #8]
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	68bb      	ldr	r3, [r7, #8]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bdb0      	pop	{r4, r5, r7, pc}
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	017d7840 	.word	0x017d7840

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08004e18 	.word	0x08004e18

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffdc 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08004e18 	.word	0x08004e18

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e041      	b.n	800264a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe ff08 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 fc54 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e044      	b.n	80026f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_TIM_Base_Start_IT+0xb0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d018      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x6c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d013      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x6c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_TIM_Base_Start_IT+0xb4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x6c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_TIM_Base_Start_IT+0xb8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x6c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_TIM_Base_Start_IT+0xbc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x6c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_TIM_Base_Start_IT+0xc0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d111      	bne.n	80026e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d010      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e2:	e007      	b.n	80026f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40010000 	.word	0x40010000
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800
 8002710:	40000c00 	.word	0x40000c00
 8002714:	40014000 	.word	0x40014000

08002718 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_TIM_OC_Start+0x24>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e022      	b.n	8002782 <HAL_TIM_OC_Start+0x6a>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d109      	bne.n	8002756 <HAL_TIM_OC_Start+0x3e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e015      	b.n	8002782 <HAL_TIM_OC_Start+0x6a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d109      	bne.n	8002770 <HAL_TIM_OC_Start+0x58>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e008      	b.n	8002782 <HAL_TIM_OC_Start+0x6a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e068      	b.n	800285c <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_TIM_OC_Start+0x82>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	e013      	b.n	80027c2 <HAL_TIM_OC_Start+0xaa>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d104      	bne.n	80027aa <HAL_TIM_OC_Start+0x92>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a8:	e00b      	b.n	80027c2 <HAL_TIM_OC_Start+0xaa>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_OC_Start+0xa2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	e003      	b.n	80027c2 <HAL_TIM_OC_Start+0xaa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fe0e 	bl	80033ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a23      	ldr	r2, [pc, #140]	; (8002864 <HAL_TIM_OC_Start+0x14c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d107      	bne.n	80027ea <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_TIM_OC_Start+0x14c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_TIM_OC_Start+0x10e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d013      	beq.n	8002826 <HAL_TIM_OC_Start+0x10e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_TIM_OC_Start+0x150>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_TIM_OC_Start+0x10e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_TIM_OC_Start+0x154>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_TIM_OC_Start+0x10e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <HAL_TIM_OC_Start+0x158>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_TIM_OC_Start+0x10e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_TIM_OC_Start+0x15c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d010      	beq.n	800285a <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	e007      	b.n	800285a <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40010000 	.word	0x40010000
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000

08002878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e041      	b.n	800290e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f839 	bl	8002916 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 faf2 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d122      	bne.n	8002986 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d11b      	bne.n	8002986 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f06f 0202 	mvn.w	r2, #2
 8002956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fa78 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002972:	e005      	b.n	8002980 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fa6a 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa7b 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d122      	bne.n	80029da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d11b      	bne.n	80029da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f06f 0204 	mvn.w	r2, #4
 80029aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa4e 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 80029c6:	e005      	b.n	80029d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fa40 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa51 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d122      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11b      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0208 	mvn.w	r2, #8
 80029fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fa24 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002a1a:	e005      	b.n	8002a28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fa16 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa27 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d122      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d11b      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0210 	mvn.w	r2, #16
 8002a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2208      	movs	r2, #8
 8002a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f9fa 	bl	8002e62 <HAL_TIM_IC_CaptureCallback>
 8002a6e:	e005      	b.n	8002a7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9ec 	bl	8002e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9fd 	bl	8002e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10e      	bne.n	8002aae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0201 	mvn.w	r2, #1
 8002aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7fe f9df 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	d10e      	bne.n	8002ada <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d107      	bne.n	8002ada <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fd27 	bl	8003528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d10e      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d107      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f9c2 	bl	8002e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d10e      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d107      	bne.n	8002b32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0220 	mvn.w	r2, #32
 8002b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fcf1 	bl	8003514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0ae      	b.n	8002cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	f200 809f 	bhi.w	8002ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b6a:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002ba5 	.word	0x08002ba5
 8002b74:	08002ca9 	.word	0x08002ca9
 8002b78:	08002ca9 	.word	0x08002ca9
 8002b7c:	08002ca9 	.word	0x08002ca9
 8002b80:	08002be5 	.word	0x08002be5
 8002b84:	08002ca9 	.word	0x08002ca9
 8002b88:	08002ca9 	.word	0x08002ca9
 8002b8c:	08002ca9 	.word	0x08002ca9
 8002b90:	08002c27 	.word	0x08002c27
 8002b94:	08002ca9 	.word	0x08002ca9
 8002b98:	08002ca9 	.word	0x08002ca9
 8002b9c:	08002ca9 	.word	0x08002ca9
 8002ba0:	08002c67 	.word	0x08002c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f9f8 	bl	8002fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0208 	orr.w	r2, r2, #8
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0204 	bic.w	r2, r2, #4
 8002bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	619a      	str	r2, [r3, #24]
      break;
 8002be2:	e064      	b.n	8002cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fa3e 	bl	800306c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6999      	ldr	r1, [r3, #24]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	021a      	lsls	r2, r3, #8
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	619a      	str	r2, [r3, #24]
      break;
 8002c24:	e043      	b.n	8002cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fa89 	bl	8003144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0208 	orr.w	r2, r2, #8
 8002c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0204 	bic.w	r2, r2, #4
 8002c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	61da      	str	r2, [r3, #28]
      break;
 8002c64:	e023      	b.n	8002cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fad3 	bl	8003218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69d9      	ldr	r1, [r3, #28]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	61da      	str	r2, [r3, #28]
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_ConfigClockSource+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0b4      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x186>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d14:	d03e      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0xd4>
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1a:	f200 8087 	bhi.w	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d22:	f000 8086 	beq.w	8002e32 <HAL_TIM_ConfigClockSource+0x172>
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d87f      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b70      	cmp	r3, #112	; 0x70
 8002d2e:	d01a      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0xa6>
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	d87b      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b60      	cmp	r3, #96	; 0x60
 8002d36:	d050      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0x11a>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d877      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b50      	cmp	r3, #80	; 0x50
 8002d3e:	d03c      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0xfa>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	d873      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d058      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x13a>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d86f      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d064      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x15a>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d86b      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d060      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x15a>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d867      	bhi.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05c      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d05a      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x15a>
 8002d64:	e062      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f000 fb19 	bl	80033ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	609a      	str	r2, [r3, #8]
      break;
 8002d92:	e04f      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6899      	ldr	r1, [r3, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f000 fb02 	bl	80033ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db6:	609a      	str	r2, [r3, #8]
      break;
 8002db8:	e03c      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f000 fa76 	bl	80032b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2150      	movs	r1, #80	; 0x50
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 facf 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002dd8:	e02c      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 fa95 	bl	8003316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2160      	movs	r1, #96	; 0x60
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fabf 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002df8:	e01c      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 fa56 	bl	80032b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2140      	movs	r1, #64	; 0x40
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 faaf 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002e18:	e00c      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f000 faa6 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002e2a:	e003      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e30:	e000      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00f      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d00b      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <TIM_Base_SetConfig+0xe8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a30      	ldr	r2, [pc, #192]	; (8002f8c <TIM_Base_SetConfig+0xec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <TIM_Base_SetConfig+0xe8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <TIM_Base_SetConfig+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <TIM_Base_SetConfig+0xf4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <TIM_Base_SetConfig+0xf8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <TIM_Base_SetConfig+0xfc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <TIM_Base_SetConfig+0xe4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d103      	bne.n	8002f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	615a      	str	r2, [r3, #20]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800

08002fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f023 0302 	bic.w	r3, r3, #2
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <TIM_OC1_SetConfig+0xc8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10c      	bne.n	8003016 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0308 	bic.w	r3, r3, #8
 8003002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <TIM_OC1_SetConfig+0xc8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800302c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40010000 	.word	0x40010000

0800306c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f023 0210 	bic.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f023 0320 	bic.w	r3, r3, #32
 80030b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <TIM_OC2_SetConfig+0xd4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10d      	bne.n	80030e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <TIM_OC2_SetConfig+0xd4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d113      	bne.n	8003118 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000

08003144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800318c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_OC3_SetConfig+0xd0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10d      	bne.n	80031be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <TIM_OC3_SetConfig+0xd0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d113      	bne.n	80031ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	621a      	str	r2, [r3, #32]
}
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40010000 	.word	0x40010000

08003218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	031b      	lsls	r3, r3, #12
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <TIM_OC4_SetConfig+0x9c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d109      	bne.n	800328c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000

080032b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0201 	bic.w	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 030a 	bic.w	r3, r3, #10
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003316:	b480      	push	{r7}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0210 	bic.w	r2, r3, #16
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	f043 0307 	orr.w	r3, r3, #7
 8003398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	609a      	str	r2, [r3, #8]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2201      	movs	r2, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1a      	ldr	r2, [r3, #32]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800344c:	2302      	movs	r3, #2
 800344e:	e050      	b.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d018      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349c:	d013      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10c      	bne.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00
 8003510:	40014000 	.word	0x40014000

08003514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e03f      	b.n	80035ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd ffc6 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800357e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f829 	bl	80035d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035dc:	b09f      	sub	sp, #124	; 0x7c
 80035de:	af00      	add	r7, sp, #0
 80035e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ee:	68d9      	ldr	r1, [r3, #12]
 80035f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	ea40 0301 	orr.w	r3, r0, r1
 80035f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	431a      	orrs	r2, r3
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4313      	orrs	r3, r2
 8003610:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800361c:	f021 010c 	bic.w	r1, r1, #12
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003626:	430b      	orrs	r3, r1
 8003628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	6999      	ldr	r1, [r3, #24]
 8003638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	ea40 0301 	orr.w	r3, r0, r1
 8003640:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4bc5      	ldr	r3, [pc, #788]	; (800395c <UART_SetConfig+0x384>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d004      	beq.n	8003656 <UART_SetConfig+0x7e>
 800364c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4bc3      	ldr	r3, [pc, #780]	; (8003960 <UART_SetConfig+0x388>)
 8003652:	429a      	cmp	r2, r3
 8003654:	d103      	bne.n	800365e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003656:	f7fe ff99 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 800365a:	6778      	str	r0, [r7, #116]	; 0x74
 800365c:	e002      	b.n	8003664 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800365e:	f7fe ff81 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003662:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	f040 80b6 	bne.w	80037dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003672:	461c      	mov	r4, r3
 8003674:	f04f 0500 	mov.w	r5, #0
 8003678:	4622      	mov	r2, r4
 800367a:	462b      	mov	r3, r5
 800367c:	1891      	adds	r1, r2, r2
 800367e:	6439      	str	r1, [r7, #64]	; 0x40
 8003680:	415b      	adcs	r3, r3
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
 8003684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003688:	1912      	adds	r2, r2, r4
 800368a:	eb45 0303 	adc.w	r3, r5, r3
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	00d9      	lsls	r1, r3, #3
 8003698:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800369c:	00d0      	lsls	r0, r2, #3
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	1911      	adds	r1, r2, r4
 80036a4:	6639      	str	r1, [r7, #96]	; 0x60
 80036a6:	416b      	adcs	r3, r5
 80036a8:	667b      	str	r3, [r7, #100]	; 0x64
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80036b8:	415b      	adcs	r3, r3
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036c4:	f7fd fa56 	bl	8000b74 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4ba5      	ldr	r3, [pc, #660]	; (8003964 <UART_SetConfig+0x38c>)
 80036ce:	fba3 2302 	umull	r2, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	011e      	lsls	r6, r3, #4
 80036d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d8:	461c      	mov	r4, r3
 80036da:	f04f 0500 	mov.w	r5, #0
 80036de:	4622      	mov	r2, r4
 80036e0:	462b      	mov	r3, r5
 80036e2:	1891      	adds	r1, r2, r2
 80036e4:	6339      	str	r1, [r7, #48]	; 0x30
 80036e6:	415b      	adcs	r3, r3
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036ee:	1912      	adds	r2, r2, r4
 80036f0:	eb45 0303 	adc.w	r3, r5, r3
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	00d9      	lsls	r1, r3, #3
 80036fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003702:	00d0      	lsls	r0, r2, #3
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	1911      	adds	r1, r2, r4
 800370a:	65b9      	str	r1, [r7, #88]	; 0x58
 800370c:	416b      	adcs	r3, r5
 800370e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	461a      	mov	r2, r3
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	1891      	adds	r1, r2, r2
 800371c:	62b9      	str	r1, [r7, #40]	; 0x28
 800371e:	415b      	adcs	r3, r3
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003726:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800372a:	f7fd fa23 	bl	8000b74 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b8c      	ldr	r3, [pc, #560]	; (8003964 <UART_SetConfig+0x38c>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	; 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	3332      	adds	r3, #50	; 0x32
 8003746:	4a87      	ldr	r2, [pc, #540]	; (8003964 <UART_SetConfig+0x38c>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003754:	441e      	add	r6, r3
 8003756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003758:	4618      	mov	r0, r3
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	1894      	adds	r4, r2, r2
 8003764:	623c      	str	r4, [r7, #32]
 8003766:	415b      	adcs	r3, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800376e:	1812      	adds	r2, r2, r0
 8003770:	eb41 0303 	adc.w	r3, r1, r3
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	f04f 0500 	mov.w	r5, #0
 800377c:	00dd      	lsls	r5, r3, #3
 800377e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003782:	00d4      	lsls	r4, r2, #3
 8003784:	4622      	mov	r2, r4
 8003786:	462b      	mov	r3, r5
 8003788:	1814      	adds	r4, r2, r0
 800378a:	653c      	str	r4, [r7, #80]	; 0x50
 800378c:	414b      	adcs	r3, r1
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	461a      	mov	r2, r3
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	1891      	adds	r1, r2, r2
 800379c:	61b9      	str	r1, [r7, #24]
 800379e:	415b      	adcs	r3, r3
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037aa:	f7fd f9e3 	bl	8000b74 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4b6c      	ldr	r3, [pc, #432]	; (8003964 <UART_SetConfig+0x38c>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a67      	ldr	r2, [pc, #412]	; (8003964 <UART_SetConfig+0x38c>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 0207 	and.w	r2, r3, #7
 80037d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4432      	add	r2, r6
 80037d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037da:	e0b9      	b.n	8003950 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037de:	461c      	mov	r4, r3
 80037e0:	f04f 0500 	mov.w	r5, #0
 80037e4:	4622      	mov	r2, r4
 80037e6:	462b      	mov	r3, r5
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	6139      	str	r1, [r7, #16]
 80037ec:	415b      	adcs	r3, r3
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037f4:	1912      	adds	r2, r2, r4
 80037f6:	eb45 0303 	adc.w	r3, r5, r3
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	00d9      	lsls	r1, r3, #3
 8003804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003808:	00d0      	lsls	r0, r2, #3
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	eb12 0804 	adds.w	r8, r2, r4
 8003812:	eb43 0905 	adc.w	r9, r3, r5
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4618      	mov	r0, r3
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	008b      	lsls	r3, r1, #2
 800382a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800382e:	0082      	lsls	r2, r0, #2
 8003830:	4640      	mov	r0, r8
 8003832:	4649      	mov	r1, r9
 8003834:	f7fd f99e 	bl	8000b74 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4b49      	ldr	r3, [pc, #292]	; (8003964 <UART_SetConfig+0x38c>)
 800383e:	fba3 2302 	umull	r2, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	011e      	lsls	r6, r3, #4
 8003846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003848:	4618      	mov	r0, r3
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	1894      	adds	r4, r2, r2
 8003854:	60bc      	str	r4, [r7, #8]
 8003856:	415b      	adcs	r3, r3
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385e:	1812      	adds	r2, r2, r0
 8003860:	eb41 0303 	adc.w	r3, r1, r3
 8003864:	f04f 0400 	mov.w	r4, #0
 8003868:	f04f 0500 	mov.w	r5, #0
 800386c:	00dd      	lsls	r5, r3, #3
 800386e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003872:	00d4      	lsls	r4, r2, #3
 8003874:	4622      	mov	r2, r4
 8003876:	462b      	mov	r3, r5
 8003878:	1814      	adds	r4, r2, r0
 800387a:	64bc      	str	r4, [r7, #72]	; 0x48
 800387c:	414b      	adcs	r3, r1
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4618      	mov	r0, r3
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	008b      	lsls	r3, r1, #2
 8003894:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003898:	0082      	lsls	r2, r0, #2
 800389a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800389e:	f7fd f969 	bl	8000b74 <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <UART_SetConfig+0x38c>)
 80038a8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	2164      	movs	r1, #100	; 0x64
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	3332      	adds	r3, #50	; 0x32
 80038ba:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <UART_SetConfig+0x38c>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c6:	441e      	add	r6, r3
 80038c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ca:	4618      	mov	r0, r3
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	1894      	adds	r4, r2, r2
 80038d6:	603c      	str	r4, [r7, #0]
 80038d8:	415b      	adcs	r3, r3
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038e0:	1812      	adds	r2, r2, r0
 80038e2:	eb41 0303 	adc.w	r3, r1, r3
 80038e6:	f04f 0400 	mov.w	r4, #0
 80038ea:	f04f 0500 	mov.w	r5, #0
 80038ee:	00dd      	lsls	r5, r3, #3
 80038f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038f4:	00d4      	lsls	r4, r2, #3
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	eb12 0a00 	adds.w	sl, r2, r0
 80038fe:	eb43 0b01 	adc.w	fp, r3, r1
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	008b      	lsls	r3, r1, #2
 8003916:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800391a:	0082      	lsls	r2, r0, #2
 800391c:	4650      	mov	r0, sl
 800391e:	4659      	mov	r1, fp
 8003920:	f7fd f928 	bl	8000b74 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <UART_SetConfig+0x38c>)
 800392a:	fba3 1302 	umull	r1, r3, r3, r2
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2164      	movs	r1, #100	; 0x64
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	3332      	adds	r3, #50	; 0x32
 800393c:	4a09      	ldr	r2, [pc, #36]	; (8003964 <UART_SetConfig+0x38c>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 020f 	and.w	r2, r3, #15
 8003948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4432      	add	r2, r6
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	377c      	adds	r7, #124	; 0x7c
 8003954:	46bd      	mov	sp, r7
 8003956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395a:	bf00      	nop
 800395c:	40011000 	.word	0x40011000
 8003960:	40011400 	.word	0x40011400
 8003964:	51eb851f 	.word	0x51eb851f

08003968 <__errno>:
 8003968:	4b01      	ldr	r3, [pc, #4]	; (8003970 <__errno+0x8>)
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	2000000c 	.word	0x2000000c

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4d0d      	ldr	r5, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2600      	movs	r6, #0
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4d0b      	ldr	r5, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f001 fa30 	bl	8004dec <_init>
 800398c:	1b64      	subs	r4, r4, r5
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2600      	movs	r6, #0
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f855 3b04 	ldr.w	r3, [r5], #4
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08005030 	.word	0x08005030
 80039b0:	08005030 	.word	0x08005030
 80039b4:	08005030 	.word	0x08005030
 80039b8:	08005034 	.word	0x08005034

080039bc <memset>:
 80039bc:	4402      	add	r2, r0
 80039be:	4603      	mov	r3, r0
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d100      	bne.n	80039c6 <memset+0xa>
 80039c4:	4770      	bx	lr
 80039c6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ca:	e7f9      	b.n	80039c0 <memset+0x4>
 80039cc:	0000      	movs	r0, r0
	...

080039d0 <sin>:
 80039d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039d2:	ec53 2b10 	vmov	r2, r3, d0
 80039d6:	4826      	ldr	r0, [pc, #152]	; (8003a70 <sin+0xa0>)
 80039d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80039dc:	4281      	cmp	r1, r0
 80039de:	dc07      	bgt.n	80039f0 <sin+0x20>
 80039e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003a68 <sin+0x98>
 80039e4:	2000      	movs	r0, #0
 80039e6:	f001 f827 	bl	8004a38 <__kernel_sin>
 80039ea:	ec51 0b10 	vmov	r0, r1, d0
 80039ee:	e007      	b.n	8003a00 <sin+0x30>
 80039f0:	4820      	ldr	r0, [pc, #128]	; (8003a74 <sin+0xa4>)
 80039f2:	4281      	cmp	r1, r0
 80039f4:	dd09      	ble.n	8003a0a <sin+0x3a>
 80039f6:	ee10 0a10 	vmov	r0, s0
 80039fa:	4619      	mov	r1, r3
 80039fc:	f7fc fbf0 	bl	80001e0 <__aeabi_dsub>
 8003a00:	ec41 0b10 	vmov	d0, r0, r1
 8003a04:	b005      	add	sp, #20
 8003a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a0a:	4668      	mov	r0, sp
 8003a0c:	f000 fa00 	bl	8003e10 <__ieee754_rem_pio2>
 8003a10:	f000 0003 	and.w	r0, r0, #3
 8003a14:	2801      	cmp	r0, #1
 8003a16:	d008      	beq.n	8003a2a <sin+0x5a>
 8003a18:	2802      	cmp	r0, #2
 8003a1a:	d00d      	beq.n	8003a38 <sin+0x68>
 8003a1c:	b9d0      	cbnz	r0, 8003a54 <sin+0x84>
 8003a1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a22:	ed9d 0b00 	vldr	d0, [sp]
 8003a26:	2001      	movs	r0, #1
 8003a28:	e7dd      	b.n	80039e6 <sin+0x16>
 8003a2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a2e:	ed9d 0b00 	vldr	d0, [sp]
 8003a32:	f000 fbf9 	bl	8004228 <__kernel_cos>
 8003a36:	e7d8      	b.n	80039ea <sin+0x1a>
 8003a38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a3c:	ed9d 0b00 	vldr	d0, [sp]
 8003a40:	2001      	movs	r0, #1
 8003a42:	f000 fff9 	bl	8004a38 <__kernel_sin>
 8003a46:	ec53 2b10 	vmov	r2, r3, d0
 8003a4a:	ee10 0a10 	vmov	r0, s0
 8003a4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003a52:	e7d5      	b.n	8003a00 <sin+0x30>
 8003a54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a58:	ed9d 0b00 	vldr	d0, [sp]
 8003a5c:	f000 fbe4 	bl	8004228 <__kernel_cos>
 8003a60:	e7f1      	b.n	8003a46 <sin+0x76>
 8003a62:	bf00      	nop
 8003a64:	f3af 8000 	nop.w
	...
 8003a70:	3fe921fb 	.word	0x3fe921fb
 8003a74:	7fefffff 	.word	0x7fefffff

08003a78 <exp>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	ed2d 8b02 	vpush	{d8}
 8003a7e:	ec55 4b10 	vmov	r4, r5, d0
 8003a82:	f000 f849 	bl	8003b18 <__ieee754_exp>
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <exp+0x98>)
 8003a88:	eeb0 8a40 	vmov.f32	s16, s0
 8003a8c:	eef0 8a60 	vmov.f32	s17, s1
 8003a90:	f993 3000 	ldrsb.w	r3, [r3]
 8003a94:	3301      	adds	r3, #1
 8003a96:	d012      	beq.n	8003abe <exp+0x46>
 8003a98:	ec45 4b10 	vmov	d0, r4, r5
 8003a9c:	f001 f893 	bl	8004bc6 <finite>
 8003aa0:	b168      	cbz	r0, 8003abe <exp+0x46>
 8003aa2:	a313      	add	r3, pc, #76	; (adr r3, 8003af0 <exp+0x78>)
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4629      	mov	r1, r5
 8003aac:	f7fc ffe0 	bl	8000a70 <__aeabi_dcmpgt>
 8003ab0:	b160      	cbz	r0, 8003acc <exp+0x54>
 8003ab2:	f7ff ff59 	bl	8003968 <__errno>
 8003ab6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8003af8 <exp+0x80>
 8003aba:	2322      	movs	r3, #34	; 0x22
 8003abc:	6003      	str	r3, [r0, #0]
 8003abe:	eeb0 0a48 	vmov.f32	s0, s16
 8003ac2:	eef0 0a68 	vmov.f32	s1, s17
 8003ac6:	ecbd 8b02 	vpop	{d8}
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	a30c      	add	r3, pc, #48	; (adr r3, 8003b00 <exp+0x88>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7fc ffad 	bl	8000a34 <__aeabi_dcmplt>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0ef      	beq.n	8003abe <exp+0x46>
 8003ade:	f7ff ff43 	bl	8003968 <__errno>
 8003ae2:	2322      	movs	r3, #34	; 0x22
 8003ae4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8003b08 <exp+0x90>
 8003ae8:	6003      	str	r3, [r0, #0]
 8003aea:	e7e8      	b.n	8003abe <exp+0x46>
 8003aec:	f3af 8000 	nop.w
 8003af0:	fefa39ef 	.word	0xfefa39ef
 8003af4:	40862e42 	.word	0x40862e42
 8003af8:	00000000 	.word	0x00000000
 8003afc:	7ff00000 	.word	0x7ff00000
 8003b00:	d52d3051 	.word	0xd52d3051
 8003b04:	c0874910 	.word	0xc0874910
	...
 8003b10:	20000070 	.word	0x20000070
 8003b14:	00000000 	.word	0x00000000

08003b18 <__ieee754_exp>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	ec55 4b10 	vmov	r4, r5, d0
 8003b20:	49b1      	ldr	r1, [pc, #708]	; (8003de8 <__ieee754_exp+0x2d0>)
 8003b22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003b26:	428b      	cmp	r3, r1
 8003b28:	ed2d 8b04 	vpush	{d8-d9}
 8003b2c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8003b30:	d937      	bls.n	8003ba2 <__ieee754_exp+0x8a>
 8003b32:	49ae      	ldr	r1, [pc, #696]	; (8003dec <__ieee754_exp+0x2d4>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d916      	bls.n	8003b66 <__ieee754_exp+0x4e>
 8003b38:	ee10 3a10 	vmov	r3, s0
 8003b3c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8003b40:	4313      	orrs	r3, r2
 8003b42:	d009      	beq.n	8003b58 <__ieee754_exp+0x40>
 8003b44:	ee10 2a10 	vmov	r2, s0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f7fc fb49 	bl	80001e4 <__adddf3>
 8003b52:	4604      	mov	r4, r0
 8003b54:	460d      	mov	r5, r1
 8003b56:	e000      	b.n	8003b5a <__ieee754_exp+0x42>
 8003b58:	bb06      	cbnz	r6, 8003b9c <__ieee754_exp+0x84>
 8003b5a:	ecbd 8b04 	vpop	{d8-d9}
 8003b5e:	ec45 4b10 	vmov	d0, r4, r5
 8003b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b66:	a38a      	add	r3, pc, #552	; (adr r3, 8003d90 <__ieee754_exp+0x278>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	ee10 0a10 	vmov	r0, s0
 8003b70:	4629      	mov	r1, r5
 8003b72:	f7fc ff7d 	bl	8000a70 <__aeabi_dcmpgt>
 8003b76:	b138      	cbz	r0, 8003b88 <__ieee754_exp+0x70>
 8003b78:	a387      	add	r3, pc, #540	; (adr r3, 8003d98 <__ieee754_exp+0x280>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fc fce5 	bl	8000550 <__aeabi_dmul>
 8003b86:	e7e4      	b.n	8003b52 <__ieee754_exp+0x3a>
 8003b88:	a385      	add	r3, pc, #532	; (adr r3, 8003da0 <__ieee754_exp+0x288>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7fc ff4f 	bl	8000a34 <__aeabi_dcmplt>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f000 8087 	beq.w	8003caa <__ieee754_exp+0x192>
 8003b9c:	2400      	movs	r4, #0
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	e7db      	b.n	8003b5a <__ieee754_exp+0x42>
 8003ba2:	4a93      	ldr	r2, [pc, #588]	; (8003df0 <__ieee754_exp+0x2d8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f240 80ac 	bls.w	8003d02 <__ieee754_exp+0x1ea>
 8003baa:	4a92      	ldr	r2, [pc, #584]	; (8003df4 <__ieee754_exp+0x2dc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d87c      	bhi.n	8003caa <__ieee754_exp+0x192>
 8003bb0:	4b91      	ldr	r3, [pc, #580]	; (8003df8 <__ieee754_exp+0x2e0>)
 8003bb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	ee10 0a10 	vmov	r0, s0
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7fc fb0e 	bl	80001e0 <__aeabi_dsub>
 8003bc4:	4b8d      	ldr	r3, [pc, #564]	; (8003dfc <__ieee754_exp+0x2e4>)
 8003bc6:	00f7      	lsls	r7, r6, #3
 8003bc8:	443b      	add	r3, r7
 8003bca:	ed93 7b00 	vldr	d7, [r3]
 8003bce:	f1c6 0a01 	rsb	sl, r6, #1
 8003bd2:	4680      	mov	r8, r0
 8003bd4:	4689      	mov	r9, r1
 8003bd6:	ebaa 0a06 	sub.w	sl, sl, r6
 8003bda:	eeb0 8a47 	vmov.f32	s16, s14
 8003bde:	eef0 8a67 	vmov.f32	s17, s15
 8003be2:	ec53 2b18 	vmov	r2, r3, d8
 8003be6:	4640      	mov	r0, r8
 8003be8:	4649      	mov	r1, r9
 8003bea:	f7fc faf9 	bl	80001e0 <__aeabi_dsub>
 8003bee:	4604      	mov	r4, r0
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fca9 	bl	8000550 <__aeabi_dmul>
 8003bfe:	a36a      	add	r3, pc, #424	; (adr r3, 8003da8 <__ieee754_exp+0x290>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	4606      	mov	r6, r0
 8003c06:	460f      	mov	r7, r1
 8003c08:	f7fc fca2 	bl	8000550 <__aeabi_dmul>
 8003c0c:	a368      	add	r3, pc, #416	; (adr r3, 8003db0 <__ieee754_exp+0x298>)
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f7fc fae5 	bl	80001e0 <__aeabi_dsub>
 8003c16:	4632      	mov	r2, r6
 8003c18:	463b      	mov	r3, r7
 8003c1a:	f7fc fc99 	bl	8000550 <__aeabi_dmul>
 8003c1e:	a366      	add	r3, pc, #408	; (adr r3, 8003db8 <__ieee754_exp+0x2a0>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fade 	bl	80001e4 <__adddf3>
 8003c28:	4632      	mov	r2, r6
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	f7fc fc90 	bl	8000550 <__aeabi_dmul>
 8003c30:	a363      	add	r3, pc, #396	; (adr r3, 8003dc0 <__ieee754_exp+0x2a8>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f7fc fad3 	bl	80001e0 <__aeabi_dsub>
 8003c3a:	4632      	mov	r2, r6
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	f7fc fc87 	bl	8000550 <__aeabi_dmul>
 8003c42:	a361      	add	r3, pc, #388	; (adr r3, 8003dc8 <__ieee754_exp+0x2b0>)
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f7fc facc 	bl	80001e4 <__adddf3>
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	463b      	mov	r3, r7
 8003c50:	f7fc fc7e 	bl	8000550 <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4620      	mov	r0, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7fc fac0 	bl	80001e0 <__aeabi_dsub>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4606      	mov	r6, r0
 8003c66:	460f      	mov	r7, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fc70 	bl	8000550 <__aeabi_dmul>
 8003c70:	ec41 0b19 	vmov	d9, r0, r1
 8003c74:	f1ba 0f00 	cmp.w	sl, #0
 8003c78:	d15d      	bne.n	8003d36 <__ieee754_exp+0x21e>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c80:	4630      	mov	r0, r6
 8003c82:	4639      	mov	r1, r7
 8003c84:	f7fc faac 	bl	80001e0 <__aeabi_dsub>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	ec51 0b19 	vmov	r0, r1, d9
 8003c90:	f7fc fd88 	bl	80007a4 <__aeabi_ddiv>
 8003c94:	4622      	mov	r2, r4
 8003c96:	462b      	mov	r3, r5
 8003c98:	f7fc faa2 	bl	80001e0 <__aeabi_dsub>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	4957      	ldr	r1, [pc, #348]	; (8003e00 <__ieee754_exp+0x2e8>)
 8003ca4:	f7fc fa9c 	bl	80001e0 <__aeabi_dsub>
 8003ca8:	e753      	b.n	8003b52 <__ieee754_exp+0x3a>
 8003caa:	4856      	ldr	r0, [pc, #344]	; (8003e04 <__ieee754_exp+0x2ec>)
 8003cac:	a348      	add	r3, pc, #288	; (adr r3, 8003dd0 <__ieee754_exp+0x2b8>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7fc fc49 	bl	8000550 <__aeabi_dmul>
 8003cbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003cc2:	f7fc fa8f 	bl	80001e4 <__adddf3>
 8003cc6:	f7fc fedd 	bl	8000a84 <__aeabi_d2iz>
 8003cca:	4682      	mov	sl, r0
 8003ccc:	f7fc fbd6 	bl	800047c <__aeabi_i2d>
 8003cd0:	a341      	add	r3, pc, #260	; (adr r3, 8003dd8 <__ieee754_exp+0x2c0>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	460f      	mov	r7, r1
 8003cda:	f7fc fc39 	bl	8000550 <__aeabi_dmul>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	f7fc fa7b 	bl	80001e0 <__aeabi_dsub>
 8003cea:	a33d      	add	r3, pc, #244	; (adr r3, 8003de0 <__ieee754_exp+0x2c8>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	4689      	mov	r9, r1
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	f7fc fc2a 	bl	8000550 <__aeabi_dmul>
 8003cfc:	ec41 0b18 	vmov	d8, r0, r1
 8003d00:	e76f      	b.n	8003be2 <__ieee754_exp+0xca>
 8003d02:	4a41      	ldr	r2, [pc, #260]	; (8003e08 <__ieee754_exp+0x2f0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d811      	bhi.n	8003d2c <__ieee754_exp+0x214>
 8003d08:	a323      	add	r3, pc, #140	; (adr r3, 8003d98 <__ieee754_exp+0x280>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	ee10 0a10 	vmov	r0, s0
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fa66 	bl	80001e4 <__adddf3>
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <__ieee754_exp+0x2e8>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f7fc fea8 	bl	8000a70 <__aeabi_dcmpgt>
 8003d20:	b138      	cbz	r0, 8003d32 <__ieee754_exp+0x21a>
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <__ieee754_exp+0x2e8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	e710      	b.n	8003b4e <__ieee754_exp+0x36>
 8003d2c:	f04f 0a00 	mov.w	sl, #0
 8003d30:	e75f      	b.n	8003bf2 <__ieee754_exp+0xda>
 8003d32:	4682      	mov	sl, r0
 8003d34:	e75d      	b.n	8003bf2 <__ieee754_exp+0xda>
 8003d36:	4632      	mov	r2, r6
 8003d38:	463b      	mov	r3, r7
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d40:	f7fc fa4e 	bl	80001e0 <__aeabi_dsub>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	ec51 0b19 	vmov	r0, r1, d9
 8003d4c:	f7fc fd2a 	bl	80007a4 <__aeabi_ddiv>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	ec51 0b18 	vmov	r0, r1, d8
 8003d58:	f7fc fa42 	bl	80001e0 <__aeabi_dsub>
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	f7fc fa3e 	bl	80001e0 <__aeabi_dsub>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	2000      	movs	r0, #0
 8003d6a:	4925      	ldr	r1, [pc, #148]	; (8003e00 <__ieee754_exp+0x2e8>)
 8003d6c:	f7fc fa38 	bl	80001e0 <__aeabi_dsub>
 8003d70:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8003d74:	4592      	cmp	sl, r2
 8003d76:	db02      	blt.n	8003d7e <__ieee754_exp+0x266>
 8003d78:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003d7c:	e6e9      	b.n	8003b52 <__ieee754_exp+0x3a>
 8003d7e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8003d82:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8003d86:	2200      	movs	r2, #0
 8003d88:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8003d8c:	e6f9      	b.n	8003b82 <__ieee754_exp+0x6a>
 8003d8e:	bf00      	nop
 8003d90:	fefa39ef 	.word	0xfefa39ef
 8003d94:	40862e42 	.word	0x40862e42
 8003d98:	8800759c 	.word	0x8800759c
 8003d9c:	7e37e43c 	.word	0x7e37e43c
 8003da0:	d52d3051 	.word	0xd52d3051
 8003da4:	c0874910 	.word	0xc0874910
 8003da8:	72bea4d0 	.word	0x72bea4d0
 8003dac:	3e663769 	.word	0x3e663769
 8003db0:	c5d26bf1 	.word	0xc5d26bf1
 8003db4:	3ebbbd41 	.word	0x3ebbbd41
 8003db8:	af25de2c 	.word	0xaf25de2c
 8003dbc:	3f11566a 	.word	0x3f11566a
 8003dc0:	16bebd93 	.word	0x16bebd93
 8003dc4:	3f66c16c 	.word	0x3f66c16c
 8003dc8:	5555553e 	.word	0x5555553e
 8003dcc:	3fc55555 	.word	0x3fc55555
 8003dd0:	652b82fe 	.word	0x652b82fe
 8003dd4:	3ff71547 	.word	0x3ff71547
 8003dd8:	fee00000 	.word	0xfee00000
 8003ddc:	3fe62e42 	.word	0x3fe62e42
 8003de0:	35793c76 	.word	0x35793c76
 8003de4:	3dea39ef 	.word	0x3dea39ef
 8003de8:	40862e41 	.word	0x40862e41
 8003dec:	7fefffff 	.word	0x7fefffff
 8003df0:	3fd62e42 	.word	0x3fd62e42
 8003df4:	3ff0a2b1 	.word	0x3ff0a2b1
 8003df8:	08004e30 	.word	0x08004e30
 8003dfc:	08004e40 	.word	0x08004e40
 8003e00:	3ff00000 	.word	0x3ff00000
 8003e04:	08004e20 	.word	0x08004e20
 8003e08:	3e2fffff 	.word	0x3e2fffff
 8003e0c:	00000000 	.word	0x00000000

08003e10 <__ieee754_rem_pio2>:
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	ed2d 8b02 	vpush	{d8}
 8003e18:	ec55 4b10 	vmov	r4, r5, d0
 8003e1c:	4bca      	ldr	r3, [pc, #808]	; (8004148 <__ieee754_rem_pio2+0x338>)
 8003e1e:	b08b      	sub	sp, #44	; 0x2c
 8003e20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003e24:	4598      	cmp	r8, r3
 8003e26:	4682      	mov	sl, r0
 8003e28:	9502      	str	r5, [sp, #8]
 8003e2a:	dc08      	bgt.n	8003e3e <__ieee754_rem_pio2+0x2e>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	ed80 0b00 	vstr	d0, [r0]
 8003e34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003e38:	f04f 0b00 	mov.w	fp, #0
 8003e3c:	e028      	b.n	8003e90 <__ieee754_rem_pio2+0x80>
 8003e3e:	4bc3      	ldr	r3, [pc, #780]	; (800414c <__ieee754_rem_pio2+0x33c>)
 8003e40:	4598      	cmp	r8, r3
 8003e42:	dc78      	bgt.n	8003f36 <__ieee754_rem_pio2+0x126>
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	4ec2      	ldr	r6, [pc, #776]	; (8004150 <__ieee754_rem_pio2+0x340>)
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	ee10 0a10 	vmov	r0, s0
 8003e4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004110 <__ieee754_rem_pio2+0x300>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	4629      	mov	r1, r5
 8003e56:	dd39      	ble.n	8003ecc <__ieee754_rem_pio2+0xbc>
 8003e58:	f7fc f9c2 	bl	80001e0 <__aeabi_dsub>
 8003e5c:	45b0      	cmp	r8, r6
 8003e5e:	4604      	mov	r4, r0
 8003e60:	460d      	mov	r5, r1
 8003e62:	d01b      	beq.n	8003e9c <__ieee754_rem_pio2+0x8c>
 8003e64:	a3ac      	add	r3, pc, #688	; (adr r3, 8004118 <__ieee754_rem_pio2+0x308>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f7fc f9b9 	bl	80001e0 <__aeabi_dsub>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	e9ca 2300 	strd	r2, r3, [sl]
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc f9b1 	bl	80001e0 <__aeabi_dsub>
 8003e7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004118 <__ieee754_rem_pio2+0x308>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc f9ac 	bl	80001e0 <__aeabi_dsub>
 8003e88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003e8c:	f04f 0b01 	mov.w	fp, #1
 8003e90:	4658      	mov	r0, fp
 8003e92:	b00b      	add	sp, #44	; 0x2c
 8003e94:	ecbd 8b02 	vpop	{d8}
 8003e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004120 <__ieee754_rem_pio2+0x310>)
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f7fc f99d 	bl	80001e0 <__aeabi_dsub>
 8003ea6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004128 <__ieee754_rem_pio2+0x318>)
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	4604      	mov	r4, r0
 8003eae:	460d      	mov	r5, r1
 8003eb0:	f7fc f996 	bl	80001e0 <__aeabi_dsub>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	e9ca 2300 	strd	r2, r3, [sl]
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc f98e 	bl	80001e0 <__aeabi_dsub>
 8003ec4:	a398      	add	r3, pc, #608	; (adr r3, 8004128 <__ieee754_rem_pio2+0x318>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	e7db      	b.n	8003e84 <__ieee754_rem_pio2+0x74>
 8003ecc:	f7fc f98a 	bl	80001e4 <__adddf3>
 8003ed0:	45b0      	cmp	r8, r6
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	460d      	mov	r5, r1
 8003ed6:	d016      	beq.n	8003f06 <__ieee754_rem_pio2+0xf6>
 8003ed8:	a38f      	add	r3, pc, #572	; (adr r3, 8004118 <__ieee754_rem_pio2+0x308>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc f981 	bl	80001e4 <__adddf3>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	e9ca 2300 	strd	r2, r3, [sl]
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7fc f977 	bl	80001e0 <__aeabi_dsub>
 8003ef2:	a389      	add	r3, pc, #548	; (adr r3, 8004118 <__ieee754_rem_pio2+0x308>)
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f7fc f974 	bl	80001e4 <__adddf3>
 8003efc:	f04f 3bff 	mov.w	fp, #4294967295
 8003f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f04:	e7c4      	b.n	8003e90 <__ieee754_rem_pio2+0x80>
 8003f06:	a386      	add	r3, pc, #536	; (adr r3, 8004120 <__ieee754_rem_pio2+0x310>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc f96a 	bl	80001e4 <__adddf3>
 8003f10:	a385      	add	r3, pc, #532	; (adr r3, 8004128 <__ieee754_rem_pio2+0x318>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	4604      	mov	r4, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	f7fc f963 	bl	80001e4 <__adddf3>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	e9ca 2300 	strd	r2, r3, [sl]
 8003f26:	4620      	mov	r0, r4
 8003f28:	4629      	mov	r1, r5
 8003f2a:	f7fc f959 	bl	80001e0 <__aeabi_dsub>
 8003f2e:	a37e      	add	r3, pc, #504	; (adr r3, 8004128 <__ieee754_rem_pio2+0x318>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	e7e0      	b.n	8003ef8 <__ieee754_rem_pio2+0xe8>
 8003f36:	4b87      	ldr	r3, [pc, #540]	; (8004154 <__ieee754_rem_pio2+0x344>)
 8003f38:	4598      	cmp	r8, r3
 8003f3a:	f300 80d9 	bgt.w	80040f0 <__ieee754_rem_pio2+0x2e0>
 8003f3e:	f000 fe39 	bl	8004bb4 <fabs>
 8003f42:	ec55 4b10 	vmov	r4, r5, d0
 8003f46:	ee10 0a10 	vmov	r0, s0
 8003f4a:	a379      	add	r3, pc, #484	; (adr r3, 8004130 <__ieee754_rem_pio2+0x320>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	4629      	mov	r1, r5
 8003f52:	f7fc fafd 	bl	8000550 <__aeabi_dmul>
 8003f56:	4b80      	ldr	r3, [pc, #512]	; (8004158 <__ieee754_rem_pio2+0x348>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f7fc f943 	bl	80001e4 <__adddf3>
 8003f5e:	f7fc fd91 	bl	8000a84 <__aeabi_d2iz>
 8003f62:	4683      	mov	fp, r0
 8003f64:	f7fc fa8a 	bl	800047c <__aeabi_i2d>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	ec43 2b18 	vmov	d8, r2, r3
 8003f70:	a367      	add	r3, pc, #412	; (adr r3, 8004110 <__ieee754_rem_pio2+0x300>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	f7fc faeb 	bl	8000550 <__aeabi_dmul>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f7fc f92d 	bl	80001e0 <__aeabi_dsub>
 8003f86:	a364      	add	r3, pc, #400	; (adr r3, 8004118 <__ieee754_rem_pio2+0x308>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	460f      	mov	r7, r1
 8003f90:	ec51 0b18 	vmov	r0, r1, d8
 8003f94:	f7fc fadc 	bl	8000550 <__aeabi_dmul>
 8003f98:	f1bb 0f1f 	cmp.w	fp, #31
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	460d      	mov	r5, r1
 8003fa0:	dc0d      	bgt.n	8003fbe <__ieee754_rem_pio2+0x1ae>
 8003fa2:	4b6e      	ldr	r3, [pc, #440]	; (800415c <__ieee754_rem_pio2+0x34c>)
 8003fa4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fac:	4543      	cmp	r3, r8
 8003fae:	d006      	beq.n	8003fbe <__ieee754_rem_pio2+0x1ae>
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	f7fc f912 	bl	80001e0 <__aeabi_dsub>
 8003fbc:	e00f      	b.n	8003fde <__ieee754_rem_pio2+0x1ce>
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	4622      	mov	r2, r4
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	f7fc f90b 	bl	80001e0 <__aeabi_dsub>
 8003fca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003fd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003fd8:	f1b8 0f10 	cmp.w	r8, #16
 8003fdc:	dc02      	bgt.n	8003fe4 <__ieee754_rem_pio2+0x1d4>
 8003fde:	e9ca 0100 	strd	r0, r1, [sl]
 8003fe2:	e039      	b.n	8004058 <__ieee754_rem_pio2+0x248>
 8003fe4:	a34e      	add	r3, pc, #312	; (adr r3, 8004120 <__ieee754_rem_pio2+0x310>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	ec51 0b18 	vmov	r0, r1, d8
 8003fee:	f7fc faaf 	bl	8000550 <__aeabi_dmul>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	f7fc f8ef 	bl	80001e0 <__aeabi_dsub>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4680      	mov	r8, r0
 8004008:	4689      	mov	r9, r1
 800400a:	4630      	mov	r0, r6
 800400c:	4639      	mov	r1, r7
 800400e:	f7fc f8e7 	bl	80001e0 <__aeabi_dsub>
 8004012:	4622      	mov	r2, r4
 8004014:	462b      	mov	r3, r5
 8004016:	f7fc f8e3 	bl	80001e0 <__aeabi_dsub>
 800401a:	a343      	add	r3, pc, #268	; (adr r3, 8004128 <__ieee754_rem_pio2+0x318>)
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	4604      	mov	r4, r0
 8004022:	460d      	mov	r5, r1
 8004024:	ec51 0b18 	vmov	r0, r1, d8
 8004028:	f7fc fa92 	bl	8000550 <__aeabi_dmul>
 800402c:	4622      	mov	r2, r4
 800402e:	462b      	mov	r3, r5
 8004030:	f7fc f8d6 	bl	80001e0 <__aeabi_dsub>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4604      	mov	r4, r0
 800403a:	460d      	mov	r5, r1
 800403c:	4640      	mov	r0, r8
 800403e:	4649      	mov	r1, r9
 8004040:	f7fc f8ce 	bl	80001e0 <__aeabi_dsub>
 8004044:	9a03      	ldr	r2, [sp, #12]
 8004046:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b31      	cmp	r3, #49	; 0x31
 800404e:	dc24      	bgt.n	800409a <__ieee754_rem_pio2+0x28a>
 8004050:	e9ca 0100 	strd	r0, r1, [sl]
 8004054:	4646      	mov	r6, r8
 8004056:	464f      	mov	r7, r9
 8004058:	e9da 8900 	ldrd	r8, r9, [sl]
 800405c:	4630      	mov	r0, r6
 800405e:	4642      	mov	r2, r8
 8004060:	464b      	mov	r3, r9
 8004062:	4639      	mov	r1, r7
 8004064:	f7fc f8bc 	bl	80001e0 <__aeabi_dsub>
 8004068:	462b      	mov	r3, r5
 800406a:	4622      	mov	r2, r4
 800406c:	f7fc f8b8 	bl	80001e0 <__aeabi_dsub>
 8004070:	9b02      	ldr	r3, [sp, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004078:	f6bf af0a 	bge.w	8003e90 <__ieee754_rem_pio2+0x80>
 800407c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004080:	f8ca 3004 	str.w	r3, [sl, #4]
 8004084:	f8ca 8000 	str.w	r8, [sl]
 8004088:	f8ca 0008 	str.w	r0, [sl, #8]
 800408c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004090:	f8ca 300c 	str.w	r3, [sl, #12]
 8004094:	f1cb 0b00 	rsb	fp, fp, #0
 8004098:	e6fa      	b.n	8003e90 <__ieee754_rem_pio2+0x80>
 800409a:	a327      	add	r3, pc, #156	; (adr r3, 8004138 <__ieee754_rem_pio2+0x328>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	ec51 0b18 	vmov	r0, r1, d8
 80040a4:	f7fc fa54 	bl	8000550 <__aeabi_dmul>
 80040a8:	4604      	mov	r4, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4640      	mov	r0, r8
 80040b2:	4649      	mov	r1, r9
 80040b4:	f7fc f894 	bl	80001e0 <__aeabi_dsub>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4606      	mov	r6, r0
 80040be:	460f      	mov	r7, r1
 80040c0:	4640      	mov	r0, r8
 80040c2:	4649      	mov	r1, r9
 80040c4:	f7fc f88c 	bl	80001e0 <__aeabi_dsub>
 80040c8:	4622      	mov	r2, r4
 80040ca:	462b      	mov	r3, r5
 80040cc:	f7fc f888 	bl	80001e0 <__aeabi_dsub>
 80040d0:	a31b      	add	r3, pc, #108	; (adr r3, 8004140 <__ieee754_rem_pio2+0x330>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	4604      	mov	r4, r0
 80040d8:	460d      	mov	r5, r1
 80040da:	ec51 0b18 	vmov	r0, r1, d8
 80040de:	f7fc fa37 	bl	8000550 <__aeabi_dmul>
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f7fc f87b 	bl	80001e0 <__aeabi_dsub>
 80040ea:	4604      	mov	r4, r0
 80040ec:	460d      	mov	r5, r1
 80040ee:	e75f      	b.n	8003fb0 <__ieee754_rem_pio2+0x1a0>
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <__ieee754_rem_pio2+0x350>)
 80040f2:	4598      	cmp	r8, r3
 80040f4:	dd36      	ble.n	8004164 <__ieee754_rem_pio2+0x354>
 80040f6:	ee10 2a10 	vmov	r2, s0
 80040fa:	462b      	mov	r3, r5
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	f7fc f86e 	bl	80001e0 <__aeabi_dsub>
 8004104:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004108:	e9ca 0100 	strd	r0, r1, [sl]
 800410c:	e694      	b.n	8003e38 <__ieee754_rem_pio2+0x28>
 800410e:	bf00      	nop
 8004110:	54400000 	.word	0x54400000
 8004114:	3ff921fb 	.word	0x3ff921fb
 8004118:	1a626331 	.word	0x1a626331
 800411c:	3dd0b461 	.word	0x3dd0b461
 8004120:	1a600000 	.word	0x1a600000
 8004124:	3dd0b461 	.word	0x3dd0b461
 8004128:	2e037073 	.word	0x2e037073
 800412c:	3ba3198a 	.word	0x3ba3198a
 8004130:	6dc9c883 	.word	0x6dc9c883
 8004134:	3fe45f30 	.word	0x3fe45f30
 8004138:	2e000000 	.word	0x2e000000
 800413c:	3ba3198a 	.word	0x3ba3198a
 8004140:	252049c1 	.word	0x252049c1
 8004144:	397b839a 	.word	0x397b839a
 8004148:	3fe921fb 	.word	0x3fe921fb
 800414c:	4002d97b 	.word	0x4002d97b
 8004150:	3ff921fb 	.word	0x3ff921fb
 8004154:	413921fb 	.word	0x413921fb
 8004158:	3fe00000 	.word	0x3fe00000
 800415c:	08004e50 	.word	0x08004e50
 8004160:	7fefffff 	.word	0x7fefffff
 8004164:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004168:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800416c:	ee10 0a10 	vmov	r0, s0
 8004170:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004174:	ee10 6a10 	vmov	r6, s0
 8004178:	460f      	mov	r7, r1
 800417a:	f7fc fc83 	bl	8000a84 <__aeabi_d2iz>
 800417e:	f7fc f97d 	bl	800047c <__aeabi_i2d>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4630      	mov	r0, r6
 8004188:	4639      	mov	r1, r7
 800418a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800418e:	f7fc f827 	bl	80001e0 <__aeabi_dsub>
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <__ieee754_rem_pio2+0x40c>)
 8004194:	2200      	movs	r2, #0
 8004196:	f7fc f9db 	bl	8000550 <__aeabi_dmul>
 800419a:	460f      	mov	r7, r1
 800419c:	4606      	mov	r6, r0
 800419e:	f7fc fc71 	bl	8000a84 <__aeabi_d2iz>
 80041a2:	f7fc f96b 	bl	800047c <__aeabi_i2d>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4630      	mov	r0, r6
 80041ac:	4639      	mov	r1, r7
 80041ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041b2:	f7fc f815 	bl	80001e0 <__aeabi_dsub>
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <__ieee754_rem_pio2+0x40c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	f7fc f9c9 	bl	8000550 <__aeabi_dmul>
 80041be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041c2:	ad04      	add	r5, sp, #16
 80041c4:	f04f 0803 	mov.w	r8, #3
 80041c8:	46a9      	mov	r9, r5
 80041ca:	2600      	movs	r6, #0
 80041cc:	2700      	movs	r7, #0
 80041ce:	4632      	mov	r2, r6
 80041d0:	463b      	mov	r3, r7
 80041d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80041d6:	46c3      	mov	fp, r8
 80041d8:	3d08      	subs	r5, #8
 80041da:	f108 38ff 	add.w	r8, r8, #4294967295
 80041de:	f7fc fc1f 	bl	8000a20 <__aeabi_dcmpeq>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1f3      	bne.n	80041ce <__ieee754_rem_pio2+0x3be>
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <__ieee754_rem_pio2+0x410>)
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	2302      	movs	r3, #2
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4622      	mov	r2, r4
 80041f0:	465b      	mov	r3, fp
 80041f2:	4651      	mov	r1, sl
 80041f4:	4648      	mov	r0, r9
 80041f6:	f000 f8df 	bl	80043b8 <__kernel_rem_pio2>
 80041fa:	9b02      	ldr	r3, [sp, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	4683      	mov	fp, r0
 8004200:	f6bf ae46 	bge.w	8003e90 <__ieee754_rem_pio2+0x80>
 8004204:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004208:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800420c:	f8ca 3004 	str.w	r3, [sl, #4]
 8004210:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004214:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004218:	e73a      	b.n	8004090 <__ieee754_rem_pio2+0x280>
 800421a:	bf00      	nop
 800421c:	41700000 	.word	0x41700000
 8004220:	08004ed0 	.word	0x08004ed0
 8004224:	00000000 	.word	0x00000000

08004228 <__kernel_cos>:
 8004228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422c:	ec57 6b10 	vmov	r6, r7, d0
 8004230:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004234:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004238:	ed8d 1b00 	vstr	d1, [sp]
 800423c:	da07      	bge.n	800424e <__kernel_cos+0x26>
 800423e:	ee10 0a10 	vmov	r0, s0
 8004242:	4639      	mov	r1, r7
 8004244:	f7fc fc1e 	bl	8000a84 <__aeabi_d2iz>
 8004248:	2800      	cmp	r0, #0
 800424a:	f000 8088 	beq.w	800435e <__kernel_cos+0x136>
 800424e:	4632      	mov	r2, r6
 8004250:	463b      	mov	r3, r7
 8004252:	4630      	mov	r0, r6
 8004254:	4639      	mov	r1, r7
 8004256:	f7fc f97b 	bl	8000550 <__aeabi_dmul>
 800425a:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <__kernel_cos+0x178>)
 800425c:	2200      	movs	r2, #0
 800425e:	4604      	mov	r4, r0
 8004260:	460d      	mov	r5, r1
 8004262:	f7fc f975 	bl	8000550 <__aeabi_dmul>
 8004266:	a340      	add	r3, pc, #256	; (adr r3, 8004368 <__kernel_cos+0x140>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	4682      	mov	sl, r0
 800426e:	468b      	mov	fp, r1
 8004270:	4620      	mov	r0, r4
 8004272:	4629      	mov	r1, r5
 8004274:	f7fc f96c 	bl	8000550 <__aeabi_dmul>
 8004278:	a33d      	add	r3, pc, #244	; (adr r3, 8004370 <__kernel_cos+0x148>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f7fb ffb1 	bl	80001e4 <__adddf3>
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f7fc f963 	bl	8000550 <__aeabi_dmul>
 800428a:	a33b      	add	r3, pc, #236	; (adr r3, 8004378 <__kernel_cos+0x150>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fb ffa6 	bl	80001e0 <__aeabi_dsub>
 8004294:	4622      	mov	r2, r4
 8004296:	462b      	mov	r3, r5
 8004298:	f7fc f95a 	bl	8000550 <__aeabi_dmul>
 800429c:	a338      	add	r3, pc, #224	; (adr r3, 8004380 <__kernel_cos+0x158>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f7fb ff9f 	bl	80001e4 <__adddf3>
 80042a6:	4622      	mov	r2, r4
 80042a8:	462b      	mov	r3, r5
 80042aa:	f7fc f951 	bl	8000550 <__aeabi_dmul>
 80042ae:	a336      	add	r3, pc, #216	; (adr r3, 8004388 <__kernel_cos+0x160>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fb ff94 	bl	80001e0 <__aeabi_dsub>
 80042b8:	4622      	mov	r2, r4
 80042ba:	462b      	mov	r3, r5
 80042bc:	f7fc f948 	bl	8000550 <__aeabi_dmul>
 80042c0:	a333      	add	r3, pc, #204	; (adr r3, 8004390 <__kernel_cos+0x168>)
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f7fb ff8d 	bl	80001e4 <__adddf3>
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	f7fc f93f 	bl	8000550 <__aeabi_dmul>
 80042d2:	4622      	mov	r2, r4
 80042d4:	462b      	mov	r3, r5
 80042d6:	f7fc f93b 	bl	8000550 <__aeabi_dmul>
 80042da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042de:	4604      	mov	r4, r0
 80042e0:	460d      	mov	r5, r1
 80042e2:	4630      	mov	r0, r6
 80042e4:	4639      	mov	r1, r7
 80042e6:	f7fc f933 	bl	8000550 <__aeabi_dmul>
 80042ea:	460b      	mov	r3, r1
 80042ec:	4602      	mov	r2, r0
 80042ee:	4629      	mov	r1, r5
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fb ff75 	bl	80001e0 <__aeabi_dsub>
 80042f6:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <__kernel_cos+0x17c>)
 80042f8:	4598      	cmp	r8, r3
 80042fa:	4606      	mov	r6, r0
 80042fc:	460f      	mov	r7, r1
 80042fe:	dc10      	bgt.n	8004322 <__kernel_cos+0xfa>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4650      	mov	r0, sl
 8004306:	4659      	mov	r1, fp
 8004308:	f7fb ff6a 	bl	80001e0 <__aeabi_dsub>
 800430c:	460b      	mov	r3, r1
 800430e:	4926      	ldr	r1, [pc, #152]	; (80043a8 <__kernel_cos+0x180>)
 8004310:	4602      	mov	r2, r0
 8004312:	2000      	movs	r0, #0
 8004314:	f7fb ff64 	bl	80001e0 <__aeabi_dsub>
 8004318:	ec41 0b10 	vmov	d0, r0, r1
 800431c:	b003      	add	sp, #12
 800431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <__kernel_cos+0x184>)
 8004324:	4920      	ldr	r1, [pc, #128]	; (80043a8 <__kernel_cos+0x180>)
 8004326:	4598      	cmp	r8, r3
 8004328:	bfcc      	ite	gt
 800432a:	4d21      	ldrgt	r5, [pc, #132]	; (80043b0 <__kernel_cos+0x188>)
 800432c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004330:	2400      	movs	r4, #0
 8004332:	4622      	mov	r2, r4
 8004334:	462b      	mov	r3, r5
 8004336:	2000      	movs	r0, #0
 8004338:	f7fb ff52 	bl	80001e0 <__aeabi_dsub>
 800433c:	4622      	mov	r2, r4
 800433e:	4680      	mov	r8, r0
 8004340:	4689      	mov	r9, r1
 8004342:	462b      	mov	r3, r5
 8004344:	4650      	mov	r0, sl
 8004346:	4659      	mov	r1, fp
 8004348:	f7fb ff4a 	bl	80001e0 <__aeabi_dsub>
 800434c:	4632      	mov	r2, r6
 800434e:	463b      	mov	r3, r7
 8004350:	f7fb ff46 	bl	80001e0 <__aeabi_dsub>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4640      	mov	r0, r8
 800435a:	4649      	mov	r1, r9
 800435c:	e7da      	b.n	8004314 <__kernel_cos+0xec>
 800435e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004398 <__kernel_cos+0x170>
 8004362:	e7db      	b.n	800431c <__kernel_cos+0xf4>
 8004364:	f3af 8000 	nop.w
 8004368:	be8838d4 	.word	0xbe8838d4
 800436c:	bda8fae9 	.word	0xbda8fae9
 8004370:	bdb4b1c4 	.word	0xbdb4b1c4
 8004374:	3e21ee9e 	.word	0x3e21ee9e
 8004378:	809c52ad 	.word	0x809c52ad
 800437c:	3e927e4f 	.word	0x3e927e4f
 8004380:	19cb1590 	.word	0x19cb1590
 8004384:	3efa01a0 	.word	0x3efa01a0
 8004388:	16c15177 	.word	0x16c15177
 800438c:	3f56c16c 	.word	0x3f56c16c
 8004390:	5555554c 	.word	0x5555554c
 8004394:	3fa55555 	.word	0x3fa55555
 8004398:	00000000 	.word	0x00000000
 800439c:	3ff00000 	.word	0x3ff00000
 80043a0:	3fe00000 	.word	0x3fe00000
 80043a4:	3fd33332 	.word	0x3fd33332
 80043a8:	3ff00000 	.word	0x3ff00000
 80043ac:	3fe90000 	.word	0x3fe90000
 80043b0:	3fd20000 	.word	0x3fd20000
 80043b4:	00000000 	.word	0x00000000

080043b8 <__kernel_rem_pio2>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	ed2d 8b02 	vpush	{d8}
 80043c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80043c4:	f112 0f14 	cmn.w	r2, #20
 80043c8:	9308      	str	r3, [sp, #32]
 80043ca:	9101      	str	r1, [sp, #4]
 80043cc:	4bc6      	ldr	r3, [pc, #792]	; (80046e8 <__kernel_rem_pio2+0x330>)
 80043ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80043d0:	9009      	str	r0, [sp, #36]	; 0x24
 80043d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	9b08      	ldr	r3, [sp, #32]
 80043da:	f103 33ff 	add.w	r3, r3, #4294967295
 80043de:	bfa8      	it	ge
 80043e0:	1ed4      	subge	r4, r2, #3
 80043e2:	9306      	str	r3, [sp, #24]
 80043e4:	bfb2      	itee	lt
 80043e6:	2400      	movlt	r4, #0
 80043e8:	2318      	movge	r3, #24
 80043ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80043ee:	f06f 0317 	mvn.w	r3, #23
 80043f2:	fb04 3303 	mla	r3, r4, r3, r3
 80043f6:	eb03 0a02 	add.w	sl, r3, r2
 80043fa:	9b04      	ldr	r3, [sp, #16]
 80043fc:	9a06      	ldr	r2, [sp, #24]
 80043fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80046d8 <__kernel_rem_pio2+0x320>
 8004402:	eb03 0802 	add.w	r8, r3, r2
 8004406:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004408:	1aa7      	subs	r7, r4, r2
 800440a:	ae20      	add	r6, sp, #128	; 0x80
 800440c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004410:	2500      	movs	r5, #0
 8004412:	4545      	cmp	r5, r8
 8004414:	dd18      	ble.n	8004448 <__kernel_rem_pio2+0x90>
 8004416:	9b08      	ldr	r3, [sp, #32]
 8004418:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800441c:	aa20      	add	r2, sp, #128	; 0x80
 800441e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80046d8 <__kernel_rem_pio2+0x320>
 8004422:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004426:	f1c3 0301 	rsb	r3, r3, #1
 800442a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800442e:	9307      	str	r3, [sp, #28]
 8004430:	9b07      	ldr	r3, [sp, #28]
 8004432:	9a04      	ldr	r2, [sp, #16]
 8004434:	4443      	add	r3, r8
 8004436:	429a      	cmp	r2, r3
 8004438:	db2f      	blt.n	800449a <__kernel_rem_pio2+0xe2>
 800443a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800443e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004442:	462f      	mov	r7, r5
 8004444:	2600      	movs	r6, #0
 8004446:	e01b      	b.n	8004480 <__kernel_rem_pio2+0xc8>
 8004448:	42ef      	cmn	r7, r5
 800444a:	d407      	bmi.n	800445c <__kernel_rem_pio2+0xa4>
 800444c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004450:	f7fc f814 	bl	800047c <__aeabi_i2d>
 8004454:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004458:	3501      	adds	r5, #1
 800445a:	e7da      	b.n	8004412 <__kernel_rem_pio2+0x5a>
 800445c:	ec51 0b18 	vmov	r0, r1, d8
 8004460:	e7f8      	b.n	8004454 <__kernel_rem_pio2+0x9c>
 8004462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004466:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800446a:	f7fc f871 	bl	8000550 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004476:	f7fb feb5 	bl	80001e4 <__adddf3>
 800447a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800447e:	3601      	adds	r6, #1
 8004480:	9b06      	ldr	r3, [sp, #24]
 8004482:	429e      	cmp	r6, r3
 8004484:	f1a7 0708 	sub.w	r7, r7, #8
 8004488:	ddeb      	ble.n	8004462 <__kernel_rem_pio2+0xaa>
 800448a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800448e:	3508      	adds	r5, #8
 8004490:	ecab 7b02 	vstmia	fp!, {d7}
 8004494:	f108 0801 	add.w	r8, r8, #1
 8004498:	e7ca      	b.n	8004430 <__kernel_rem_pio2+0x78>
 800449a:	9b04      	ldr	r3, [sp, #16]
 800449c:	aa0c      	add	r2, sp, #48	; 0x30
 800449e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80044a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80044aa:	9c04      	ldr	r4, [sp, #16]
 80044ac:	930a      	str	r3, [sp, #40]	; 0x28
 80044ae:	ab98      	add	r3, sp, #608	; 0x260
 80044b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044b4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80044b8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80044bc:	f8cd b008 	str.w	fp, [sp, #8]
 80044c0:	4625      	mov	r5, r4
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	dc78      	bgt.n	80045b8 <__kernel_rem_pio2+0x200>
 80044c6:	ec47 6b10 	vmov	d0, r6, r7
 80044ca:	4650      	mov	r0, sl
 80044cc:	f000 fc08 	bl	8004ce0 <scalbn>
 80044d0:	ec57 6b10 	vmov	r6, r7, d0
 80044d4:	2200      	movs	r2, #0
 80044d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80044da:	ee10 0a10 	vmov	r0, s0
 80044de:	4639      	mov	r1, r7
 80044e0:	f7fc f836 	bl	8000550 <__aeabi_dmul>
 80044e4:	ec41 0b10 	vmov	d0, r0, r1
 80044e8:	f000 fb7a 	bl	8004be0 <floor>
 80044ec:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <__kernel_rem_pio2+0x334>)
 80044ee:	ec51 0b10 	vmov	r0, r1, d0
 80044f2:	2200      	movs	r2, #0
 80044f4:	f7fc f82c 	bl	8000550 <__aeabi_dmul>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4630      	mov	r0, r6
 80044fe:	4639      	mov	r1, r7
 8004500:	f7fb fe6e 	bl	80001e0 <__aeabi_dsub>
 8004504:	460f      	mov	r7, r1
 8004506:	4606      	mov	r6, r0
 8004508:	f7fc fabc 	bl	8000a84 <__aeabi_d2iz>
 800450c:	9007      	str	r0, [sp, #28]
 800450e:	f7fb ffb5 	bl	800047c <__aeabi_i2d>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fb fe61 	bl	80001e0 <__aeabi_dsub>
 800451e:	f1ba 0f00 	cmp.w	sl, #0
 8004522:	4606      	mov	r6, r0
 8004524:	460f      	mov	r7, r1
 8004526:	dd70      	ble.n	800460a <__kernel_rem_pio2+0x252>
 8004528:	1e62      	subs	r2, r4, #1
 800452a:	ab0c      	add	r3, sp, #48	; 0x30
 800452c:	9d07      	ldr	r5, [sp, #28]
 800452e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004532:	f1ca 0118 	rsb	r1, sl, #24
 8004536:	fa40 f301 	asr.w	r3, r0, r1
 800453a:	441d      	add	r5, r3
 800453c:	408b      	lsls	r3, r1
 800453e:	1ac0      	subs	r0, r0, r3
 8004540:	ab0c      	add	r3, sp, #48	; 0x30
 8004542:	9507      	str	r5, [sp, #28]
 8004544:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004548:	f1ca 0317 	rsb	r3, sl, #23
 800454c:	fa40 f303 	asr.w	r3, r0, r3
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	9b02      	ldr	r3, [sp, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	dd66      	ble.n	8004626 <__kernel_rem_pio2+0x26e>
 8004558:	9b07      	ldr	r3, [sp, #28]
 800455a:	2200      	movs	r2, #0
 800455c:	3301      	adds	r3, #1
 800455e:	9307      	str	r3, [sp, #28]
 8004560:	4615      	mov	r5, r2
 8004562:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004566:	4294      	cmp	r4, r2
 8004568:	f300 8099 	bgt.w	800469e <__kernel_rem_pio2+0x2e6>
 800456c:	f1ba 0f00 	cmp.w	sl, #0
 8004570:	dd07      	ble.n	8004582 <__kernel_rem_pio2+0x1ca>
 8004572:	f1ba 0f01 	cmp.w	sl, #1
 8004576:	f000 80a5 	beq.w	80046c4 <__kernel_rem_pio2+0x30c>
 800457a:	f1ba 0f02 	cmp.w	sl, #2
 800457e:	f000 80c1 	beq.w	8004704 <__kernel_rem_pio2+0x34c>
 8004582:	9b02      	ldr	r3, [sp, #8]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d14e      	bne.n	8004626 <__kernel_rem_pio2+0x26e>
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	4958      	ldr	r1, [pc, #352]	; (80046f0 <__kernel_rem_pio2+0x338>)
 800458e:	2000      	movs	r0, #0
 8004590:	f7fb fe26 	bl	80001e0 <__aeabi_dsub>
 8004594:	4606      	mov	r6, r0
 8004596:	460f      	mov	r7, r1
 8004598:	2d00      	cmp	r5, #0
 800459a:	d044      	beq.n	8004626 <__kernel_rem_pio2+0x26e>
 800459c:	4650      	mov	r0, sl
 800459e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80046e0 <__kernel_rem_pio2+0x328>
 80045a2:	f000 fb9d 	bl	8004ce0 <scalbn>
 80045a6:	4630      	mov	r0, r6
 80045a8:	4639      	mov	r1, r7
 80045aa:	ec53 2b10 	vmov	r2, r3, d0
 80045ae:	f7fb fe17 	bl	80001e0 <__aeabi_dsub>
 80045b2:	4606      	mov	r6, r0
 80045b4:	460f      	mov	r7, r1
 80045b6:	e036      	b.n	8004626 <__kernel_rem_pio2+0x26e>
 80045b8:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <__kernel_rem_pio2+0x33c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	4630      	mov	r0, r6
 80045be:	4639      	mov	r1, r7
 80045c0:	f7fb ffc6 	bl	8000550 <__aeabi_dmul>
 80045c4:	f7fc fa5e 	bl	8000a84 <__aeabi_d2iz>
 80045c8:	f7fb ff58 	bl	800047c <__aeabi_i2d>
 80045cc:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <__kernel_rem_pio2+0x340>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	4680      	mov	r8, r0
 80045d2:	4689      	mov	r9, r1
 80045d4:	f7fb ffbc 	bl	8000550 <__aeabi_dmul>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4630      	mov	r0, r6
 80045de:	4639      	mov	r1, r7
 80045e0:	f7fb fdfe 	bl	80001e0 <__aeabi_dsub>
 80045e4:	f7fc fa4e 	bl	8000a84 <__aeabi_d2iz>
 80045e8:	9b02      	ldr	r3, [sp, #8]
 80045ea:	f843 0b04 	str.w	r0, [r3], #4
 80045ee:	3d01      	subs	r5, #1
 80045f0:	9302      	str	r3, [sp, #8]
 80045f2:	ab70      	add	r3, sp, #448	; 0x1c0
 80045f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	4640      	mov	r0, r8
 80045fe:	4649      	mov	r1, r9
 8004600:	f7fb fdf0 	bl	80001e4 <__adddf3>
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	e75b      	b.n	80044c2 <__kernel_rem_pio2+0x10a>
 800460a:	d105      	bne.n	8004618 <__kernel_rem_pio2+0x260>
 800460c:	1e63      	subs	r3, r4, #1
 800460e:	aa0c      	add	r2, sp, #48	; 0x30
 8004610:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004614:	15c3      	asrs	r3, r0, #23
 8004616:	e79b      	b.n	8004550 <__kernel_rem_pio2+0x198>
 8004618:	4b38      	ldr	r3, [pc, #224]	; (80046fc <__kernel_rem_pio2+0x344>)
 800461a:	2200      	movs	r2, #0
 800461c:	f7fc fa1e 	bl	8000a5c <__aeabi_dcmpge>
 8004620:	2800      	cmp	r0, #0
 8004622:	d139      	bne.n	8004698 <__kernel_rem_pio2+0x2e0>
 8004624:	9002      	str	r0, [sp, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	2300      	movs	r3, #0
 800462a:	4630      	mov	r0, r6
 800462c:	4639      	mov	r1, r7
 800462e:	f7fc f9f7 	bl	8000a20 <__aeabi_dcmpeq>
 8004632:	2800      	cmp	r0, #0
 8004634:	f000 80b4 	beq.w	80047a0 <__kernel_rem_pio2+0x3e8>
 8004638:	f104 3bff 	add.w	fp, r4, #4294967295
 800463c:	465b      	mov	r3, fp
 800463e:	2200      	movs	r2, #0
 8004640:	9904      	ldr	r1, [sp, #16]
 8004642:	428b      	cmp	r3, r1
 8004644:	da65      	bge.n	8004712 <__kernel_rem_pio2+0x35a>
 8004646:	2a00      	cmp	r2, #0
 8004648:	d07b      	beq.n	8004742 <__kernel_rem_pio2+0x38a>
 800464a:	ab0c      	add	r3, sp, #48	; 0x30
 800464c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004650:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a0 	beq.w	800479a <__kernel_rem_pio2+0x3e2>
 800465a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80046e0 <__kernel_rem_pio2+0x328>
 800465e:	4650      	mov	r0, sl
 8004660:	f000 fb3e 	bl	8004ce0 <scalbn>
 8004664:	4f23      	ldr	r7, [pc, #140]	; (80046f4 <__kernel_rem_pio2+0x33c>)
 8004666:	ec55 4b10 	vmov	r4, r5, d0
 800466a:	46d8      	mov	r8, fp
 800466c:	2600      	movs	r6, #0
 800466e:	f1b8 0f00 	cmp.w	r8, #0
 8004672:	f280 80cf 	bge.w	8004814 <__kernel_rem_pio2+0x45c>
 8004676:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80046d8 <__kernel_rem_pio2+0x320>
 800467a:	465f      	mov	r7, fp
 800467c:	f04f 0800 	mov.w	r8, #0
 8004680:	2f00      	cmp	r7, #0
 8004682:	f2c0 80fd 	blt.w	8004880 <__kernel_rem_pio2+0x4c8>
 8004686:	ab70      	add	r3, sp, #448	; 0x1c0
 8004688:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004700 <__kernel_rem_pio2+0x348>
 800468c:	ec55 4b18 	vmov	r4, r5, d8
 8004690:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004694:	2600      	movs	r6, #0
 8004696:	e0e5      	b.n	8004864 <__kernel_rem_pio2+0x4ac>
 8004698:	2302      	movs	r3, #2
 800469a:	9302      	str	r3, [sp, #8]
 800469c:	e75c      	b.n	8004558 <__kernel_rem_pio2+0x1a0>
 800469e:	f8db 3000 	ldr.w	r3, [fp]
 80046a2:	b955      	cbnz	r5, 80046ba <__kernel_rem_pio2+0x302>
 80046a4:	b123      	cbz	r3, 80046b0 <__kernel_rem_pio2+0x2f8>
 80046a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80046aa:	f8cb 3000 	str.w	r3, [fp]
 80046ae:	2301      	movs	r3, #1
 80046b0:	3201      	adds	r2, #1
 80046b2:	f10b 0b04 	add.w	fp, fp, #4
 80046b6:	461d      	mov	r5, r3
 80046b8:	e755      	b.n	8004566 <__kernel_rem_pio2+0x1ae>
 80046ba:	1acb      	subs	r3, r1, r3
 80046bc:	f8cb 3000 	str.w	r3, [fp]
 80046c0:	462b      	mov	r3, r5
 80046c2:	e7f5      	b.n	80046b0 <__kernel_rem_pio2+0x2f8>
 80046c4:	1e62      	subs	r2, r4, #1
 80046c6:	ab0c      	add	r3, sp, #48	; 0x30
 80046c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80046d0:	a90c      	add	r1, sp, #48	; 0x30
 80046d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80046d6:	e754      	b.n	8004582 <__kernel_rem_pio2+0x1ca>
	...
 80046e4:	3ff00000 	.word	0x3ff00000
 80046e8:	08005018 	.word	0x08005018
 80046ec:	40200000 	.word	0x40200000
 80046f0:	3ff00000 	.word	0x3ff00000
 80046f4:	3e700000 	.word	0x3e700000
 80046f8:	41700000 	.word	0x41700000
 80046fc:	3fe00000 	.word	0x3fe00000
 8004700:	08004fd8 	.word	0x08004fd8
 8004704:	1e62      	subs	r2, r4, #1
 8004706:	ab0c      	add	r3, sp, #48	; 0x30
 8004708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004710:	e7de      	b.n	80046d0 <__kernel_rem_pio2+0x318>
 8004712:	a90c      	add	r1, sp, #48	; 0x30
 8004714:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004718:	3b01      	subs	r3, #1
 800471a:	430a      	orrs	r2, r1
 800471c:	e790      	b.n	8004640 <__kernel_rem_pio2+0x288>
 800471e:	3301      	adds	r3, #1
 8004720:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004724:	2900      	cmp	r1, #0
 8004726:	d0fa      	beq.n	800471e <__kernel_rem_pio2+0x366>
 8004728:	9a08      	ldr	r2, [sp, #32]
 800472a:	18e3      	adds	r3, r4, r3
 800472c:	18a6      	adds	r6, r4, r2
 800472e:	aa20      	add	r2, sp, #128	; 0x80
 8004730:	1c65      	adds	r5, r4, #1
 8004732:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	9b02      	ldr	r3, [sp, #8]
 800473a:	42ab      	cmp	r3, r5
 800473c:	da04      	bge.n	8004748 <__kernel_rem_pio2+0x390>
 800473e:	461c      	mov	r4, r3
 8004740:	e6b5      	b.n	80044ae <__kernel_rem_pio2+0xf6>
 8004742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004744:	2301      	movs	r3, #1
 8004746:	e7eb      	b.n	8004720 <__kernel_rem_pio2+0x368>
 8004748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800474e:	f7fb fe95 	bl	800047c <__aeabi_i2d>
 8004752:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004758:	46b3      	mov	fp, r6
 800475a:	461c      	mov	r4, r3
 800475c:	2700      	movs	r7, #0
 800475e:	f04f 0800 	mov.w	r8, #0
 8004762:	f04f 0900 	mov.w	r9, #0
 8004766:	9b06      	ldr	r3, [sp, #24]
 8004768:	429f      	cmp	r7, r3
 800476a:	dd06      	ble.n	800477a <__kernel_rem_pio2+0x3c2>
 800476c:	ab70      	add	r3, sp, #448	; 0x1c0
 800476e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004772:	e9c3 8900 	strd	r8, r9, [r3]
 8004776:	3501      	adds	r5, #1
 8004778:	e7de      	b.n	8004738 <__kernel_rem_pio2+0x380>
 800477a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800477e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004782:	f7fb fee5 	bl	8000550 <__aeabi_dmul>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4640      	mov	r0, r8
 800478c:	4649      	mov	r1, r9
 800478e:	f7fb fd29 	bl	80001e4 <__adddf3>
 8004792:	3701      	adds	r7, #1
 8004794:	4680      	mov	r8, r0
 8004796:	4689      	mov	r9, r1
 8004798:	e7e5      	b.n	8004766 <__kernel_rem_pio2+0x3ae>
 800479a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800479e:	e754      	b.n	800464a <__kernel_rem_pio2+0x292>
 80047a0:	ec47 6b10 	vmov	d0, r6, r7
 80047a4:	f1ca 0000 	rsb	r0, sl, #0
 80047a8:	f000 fa9a 	bl	8004ce0 <scalbn>
 80047ac:	ec57 6b10 	vmov	r6, r7, d0
 80047b0:	4b9f      	ldr	r3, [pc, #636]	; (8004a30 <__kernel_rem_pio2+0x678>)
 80047b2:	ee10 0a10 	vmov	r0, s0
 80047b6:	2200      	movs	r2, #0
 80047b8:	4639      	mov	r1, r7
 80047ba:	f7fc f94f 	bl	8000a5c <__aeabi_dcmpge>
 80047be:	b300      	cbz	r0, 8004802 <__kernel_rem_pio2+0x44a>
 80047c0:	4b9c      	ldr	r3, [pc, #624]	; (8004a34 <__kernel_rem_pio2+0x67c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	4630      	mov	r0, r6
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fb fec2 	bl	8000550 <__aeabi_dmul>
 80047cc:	f7fc f95a 	bl	8000a84 <__aeabi_d2iz>
 80047d0:	4605      	mov	r5, r0
 80047d2:	f7fb fe53 	bl	800047c <__aeabi_i2d>
 80047d6:	4b96      	ldr	r3, [pc, #600]	; (8004a30 <__kernel_rem_pio2+0x678>)
 80047d8:	2200      	movs	r2, #0
 80047da:	f7fb feb9 	bl	8000550 <__aeabi_dmul>
 80047de:	460b      	mov	r3, r1
 80047e0:	4602      	mov	r2, r0
 80047e2:	4639      	mov	r1, r7
 80047e4:	4630      	mov	r0, r6
 80047e6:	f7fb fcfb 	bl	80001e0 <__aeabi_dsub>
 80047ea:	f7fc f94b 	bl	8000a84 <__aeabi_d2iz>
 80047ee:	f104 0b01 	add.w	fp, r4, #1
 80047f2:	ab0c      	add	r3, sp, #48	; 0x30
 80047f4:	f10a 0a18 	add.w	sl, sl, #24
 80047f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80047fc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004800:	e72b      	b.n	800465a <__kernel_rem_pio2+0x2a2>
 8004802:	4630      	mov	r0, r6
 8004804:	4639      	mov	r1, r7
 8004806:	f7fc f93d 	bl	8000a84 <__aeabi_d2iz>
 800480a:	ab0c      	add	r3, sp, #48	; 0x30
 800480c:	46a3      	mov	fp, r4
 800480e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004812:	e722      	b.n	800465a <__kernel_rem_pio2+0x2a2>
 8004814:	ab70      	add	r3, sp, #448	; 0x1c0
 8004816:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800481a:	ab0c      	add	r3, sp, #48	; 0x30
 800481c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004820:	f7fb fe2c 	bl	800047c <__aeabi_i2d>
 8004824:	4622      	mov	r2, r4
 8004826:	462b      	mov	r3, r5
 8004828:	f7fb fe92 	bl	8000550 <__aeabi_dmul>
 800482c:	4632      	mov	r2, r6
 800482e:	e9c9 0100 	strd	r0, r1, [r9]
 8004832:	463b      	mov	r3, r7
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f7fb fe8a 	bl	8000550 <__aeabi_dmul>
 800483c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004840:	4604      	mov	r4, r0
 8004842:	460d      	mov	r5, r1
 8004844:	e713      	b.n	800466e <__kernel_rem_pio2+0x2b6>
 8004846:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800484a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800484e:	f7fb fe7f 	bl	8000550 <__aeabi_dmul>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fcc3 	bl	80001e4 <__adddf3>
 800485e:	3601      	adds	r6, #1
 8004860:	4604      	mov	r4, r0
 8004862:	460d      	mov	r5, r1
 8004864:	9b04      	ldr	r3, [sp, #16]
 8004866:	429e      	cmp	r6, r3
 8004868:	dc01      	bgt.n	800486e <__kernel_rem_pio2+0x4b6>
 800486a:	45b0      	cmp	r8, r6
 800486c:	daeb      	bge.n	8004846 <__kernel_rem_pio2+0x48e>
 800486e:	ab48      	add	r3, sp, #288	; 0x120
 8004870:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004874:	e9c3 4500 	strd	r4, r5, [r3]
 8004878:	3f01      	subs	r7, #1
 800487a:	f108 0801 	add.w	r8, r8, #1
 800487e:	e6ff      	b.n	8004680 <__kernel_rem_pio2+0x2c8>
 8004880:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004882:	2b02      	cmp	r3, #2
 8004884:	dc0b      	bgt.n	800489e <__kernel_rem_pio2+0x4e6>
 8004886:	2b00      	cmp	r3, #0
 8004888:	dc6e      	bgt.n	8004968 <__kernel_rem_pio2+0x5b0>
 800488a:	d045      	beq.n	8004918 <__kernel_rem_pio2+0x560>
 800488c:	9b07      	ldr	r3, [sp, #28]
 800488e:	f003 0007 	and.w	r0, r3, #7
 8004892:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004896:	ecbd 8b02 	vpop	{d8}
 800489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d1f3      	bne.n	800488c <__kernel_rem_pio2+0x4d4>
 80048a4:	ab48      	add	r3, sp, #288	; 0x120
 80048a6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80048aa:	46d0      	mov	r8, sl
 80048ac:	46d9      	mov	r9, fp
 80048ae:	f1b9 0f00 	cmp.w	r9, #0
 80048b2:	f1a8 0808 	sub.w	r8, r8, #8
 80048b6:	dc64      	bgt.n	8004982 <__kernel_rem_pio2+0x5ca>
 80048b8:	465c      	mov	r4, fp
 80048ba:	2c01      	cmp	r4, #1
 80048bc:	f1aa 0a08 	sub.w	sl, sl, #8
 80048c0:	dc7e      	bgt.n	80049c0 <__kernel_rem_pio2+0x608>
 80048c2:	2000      	movs	r0, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	f1bb 0f01 	cmp.w	fp, #1
 80048ca:	f300 8097 	bgt.w	80049fc <__kernel_rem_pio2+0x644>
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80048d4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 8099 	bne.w	8004a10 <__kernel_rem_pio2+0x658>
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	e9c3 5600 	strd	r5, r6, [r3]
 80048e4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80048e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80048ec:	e7ce      	b.n	800488c <__kernel_rem_pio2+0x4d4>
 80048ee:	ab48      	add	r3, sp, #288	; 0x120
 80048f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb fc74 	bl	80001e4 <__adddf3>
 80048fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004900:	f1bb 0f00 	cmp.w	fp, #0
 8004904:	daf3      	bge.n	80048ee <__kernel_rem_pio2+0x536>
 8004906:	9b02      	ldr	r3, [sp, #8]
 8004908:	b113      	cbz	r3, 8004910 <__kernel_rem_pio2+0x558>
 800490a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800490e:	4619      	mov	r1, r3
 8004910:	9b01      	ldr	r3, [sp, #4]
 8004912:	e9c3 0100 	strd	r0, r1, [r3]
 8004916:	e7b9      	b.n	800488c <__kernel_rem_pio2+0x4d4>
 8004918:	2000      	movs	r0, #0
 800491a:	2100      	movs	r1, #0
 800491c:	e7f0      	b.n	8004900 <__kernel_rem_pio2+0x548>
 800491e:	ab48      	add	r3, sp, #288	; 0x120
 8004920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fc5c 	bl	80001e4 <__adddf3>
 800492c:	3c01      	subs	r4, #1
 800492e:	2c00      	cmp	r4, #0
 8004930:	daf5      	bge.n	800491e <__kernel_rem_pio2+0x566>
 8004932:	9b02      	ldr	r3, [sp, #8]
 8004934:	b1e3      	cbz	r3, 8004970 <__kernel_rem_pio2+0x5b8>
 8004936:	4602      	mov	r2, r0
 8004938:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800493c:	9c01      	ldr	r4, [sp, #4]
 800493e:	e9c4 2300 	strd	r2, r3, [r4]
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800494a:	f7fb fc49 	bl	80001e0 <__aeabi_dsub>
 800494e:	ad4a      	add	r5, sp, #296	; 0x128
 8004950:	2401      	movs	r4, #1
 8004952:	45a3      	cmp	fp, r4
 8004954:	da0f      	bge.n	8004976 <__kernel_rem_pio2+0x5be>
 8004956:	9b02      	ldr	r3, [sp, #8]
 8004958:	b113      	cbz	r3, 8004960 <__kernel_rem_pio2+0x5a8>
 800495a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800495e:	4619      	mov	r1, r3
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004966:	e791      	b.n	800488c <__kernel_rem_pio2+0x4d4>
 8004968:	465c      	mov	r4, fp
 800496a:	2000      	movs	r0, #0
 800496c:	2100      	movs	r1, #0
 800496e:	e7de      	b.n	800492e <__kernel_rem_pio2+0x576>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	e7e2      	b.n	800493c <__kernel_rem_pio2+0x584>
 8004976:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800497a:	f7fb fc33 	bl	80001e4 <__adddf3>
 800497e:	3401      	adds	r4, #1
 8004980:	e7e7      	b.n	8004952 <__kernel_rem_pio2+0x59a>
 8004982:	e9d8 4500 	ldrd	r4, r5, [r8]
 8004986:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800498a:	4620      	mov	r0, r4
 800498c:	4632      	mov	r2, r6
 800498e:	463b      	mov	r3, r7
 8004990:	4629      	mov	r1, r5
 8004992:	f7fb fc27 	bl	80001e4 <__adddf3>
 8004996:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4620      	mov	r0, r4
 80049a0:	4629      	mov	r1, r5
 80049a2:	f7fb fc1d 	bl	80001e0 <__aeabi_dsub>
 80049a6:	4632      	mov	r2, r6
 80049a8:	463b      	mov	r3, r7
 80049aa:	f7fb fc1b 	bl	80001e4 <__adddf3>
 80049ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80049b2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80049b6:	ed88 7b00 	vstr	d7, [r8]
 80049ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80049be:	e776      	b.n	80048ae <__kernel_rem_pio2+0x4f6>
 80049c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80049c4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80049c8:	4640      	mov	r0, r8
 80049ca:	4632      	mov	r2, r6
 80049cc:	463b      	mov	r3, r7
 80049ce:	4649      	mov	r1, r9
 80049d0:	f7fb fc08 	bl	80001e4 <__adddf3>
 80049d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4640      	mov	r0, r8
 80049de:	4649      	mov	r1, r9
 80049e0:	f7fb fbfe 	bl	80001e0 <__aeabi_dsub>
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	f7fb fbfc 	bl	80001e4 <__adddf3>
 80049ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 80049f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049f4:	ed8a 7b00 	vstr	d7, [sl]
 80049f8:	3c01      	subs	r4, #1
 80049fa:	e75e      	b.n	80048ba <__kernel_rem_pio2+0x502>
 80049fc:	ab48      	add	r3, sp, #288	; 0x120
 80049fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fbed 	bl	80001e4 <__adddf3>
 8004a0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a0e:	e75a      	b.n	80048c6 <__kernel_rem_pio2+0x50e>
 8004a10:	9b01      	ldr	r3, [sp, #4]
 8004a12:	9a01      	ldr	r2, [sp, #4]
 8004a14:	601d      	str	r5, [r3, #0]
 8004a16:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004a1a:	605c      	str	r4, [r3, #4]
 8004a1c:	609f      	str	r7, [r3, #8]
 8004a1e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004a22:	60d3      	str	r3, [r2, #12]
 8004a24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a28:	6110      	str	r0, [r2, #16]
 8004a2a:	6153      	str	r3, [r2, #20]
 8004a2c:	e72e      	b.n	800488c <__kernel_rem_pio2+0x4d4>
 8004a2e:	bf00      	nop
 8004a30:	41700000 	.word	0x41700000
 8004a34:	3e700000 	.word	0x3e700000

08004a38 <__kernel_sin>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	ed2d 8b04 	vpush	{d8-d9}
 8004a40:	eeb0 8a41 	vmov.f32	s16, s2
 8004a44:	eef0 8a61 	vmov.f32	s17, s3
 8004a48:	ec55 4b10 	vmov	r4, r5, d0
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004a52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004a56:	9001      	str	r0, [sp, #4]
 8004a58:	da06      	bge.n	8004a68 <__kernel_sin+0x30>
 8004a5a:	ee10 0a10 	vmov	r0, s0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fc f810 	bl	8000a84 <__aeabi_d2iz>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d051      	beq.n	8004b0c <__kernel_sin+0xd4>
 8004a68:	4622      	mov	r2, r4
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4629      	mov	r1, r5
 8004a70:	f7fb fd6e 	bl	8000550 <__aeabi_dmul>
 8004a74:	4682      	mov	sl, r0
 8004a76:	468b      	mov	fp, r1
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	4629      	mov	r1, r5
 8004a80:	f7fb fd66 	bl	8000550 <__aeabi_dmul>
 8004a84:	a341      	add	r3, pc, #260	; (adr r3, 8004b8c <__kernel_sin+0x154>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	4680      	mov	r8, r0
 8004a8c:	4689      	mov	r9, r1
 8004a8e:	4650      	mov	r0, sl
 8004a90:	4659      	mov	r1, fp
 8004a92:	f7fb fd5d 	bl	8000550 <__aeabi_dmul>
 8004a96:	a33f      	add	r3, pc, #252	; (adr r3, 8004b94 <__kernel_sin+0x15c>)
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f7fb fba0 	bl	80001e0 <__aeabi_dsub>
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	465b      	mov	r3, fp
 8004aa4:	f7fb fd54 	bl	8000550 <__aeabi_dmul>
 8004aa8:	a33c      	add	r3, pc, #240	; (adr r3, 8004b9c <__kernel_sin+0x164>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb fb99 	bl	80001e4 <__adddf3>
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	465b      	mov	r3, fp
 8004ab6:	f7fb fd4b 	bl	8000550 <__aeabi_dmul>
 8004aba:	a33a      	add	r3, pc, #232	; (adr r3, 8004ba4 <__kernel_sin+0x16c>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fb8e 	bl	80001e0 <__aeabi_dsub>
 8004ac4:	4652      	mov	r2, sl
 8004ac6:	465b      	mov	r3, fp
 8004ac8:	f7fb fd42 	bl	8000550 <__aeabi_dmul>
 8004acc:	a337      	add	r3, pc, #220	; (adr r3, 8004bac <__kernel_sin+0x174>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f7fb fb87 	bl	80001e4 <__adddf3>
 8004ad6:	9b01      	ldr	r3, [sp, #4]
 8004ad8:	4606      	mov	r6, r0
 8004ada:	460f      	mov	r7, r1
 8004adc:	b9eb      	cbnz	r3, 8004b1a <__kernel_sin+0xe2>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	f7fb fd33 	bl	8000550 <__aeabi_dmul>
 8004aea:	a325      	add	r3, pc, #148	; (adr r3, 8004b80 <__kernel_sin+0x148>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f7fb fb76 	bl	80001e0 <__aeabi_dsub>
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	f7fb fd2a 	bl	8000550 <__aeabi_dmul>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fb6e 	bl	80001e4 <__adddf3>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
 8004b0c:	ec45 4b10 	vmov	d0, r4, r5
 8004b10:	b003      	add	sp, #12
 8004b12:	ecbd 8b04 	vpop	{d8-d9}
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <__kernel_sin+0x150>)
 8004b1c:	ec51 0b18 	vmov	r0, r1, d8
 8004b20:	2200      	movs	r2, #0
 8004b22:	f7fb fd15 	bl	8000550 <__aeabi_dmul>
 8004b26:	4632      	mov	r2, r6
 8004b28:	ec41 0b19 	vmov	d9, r0, r1
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	4640      	mov	r0, r8
 8004b30:	4649      	mov	r1, r9
 8004b32:	f7fb fd0d 	bl	8000550 <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	ec51 0b19 	vmov	r0, r1, d9
 8004b3e:	f7fb fb4f 	bl	80001e0 <__aeabi_dsub>
 8004b42:	4652      	mov	r2, sl
 8004b44:	465b      	mov	r3, fp
 8004b46:	f7fb fd03 	bl	8000550 <__aeabi_dmul>
 8004b4a:	ec53 2b18 	vmov	r2, r3, d8
 8004b4e:	f7fb fb47 	bl	80001e0 <__aeabi_dsub>
 8004b52:	a30b      	add	r3, pc, #44	; (adr r3, 8004b80 <__kernel_sin+0x148>)
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	4606      	mov	r6, r0
 8004b5a:	460f      	mov	r7, r1
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb fcf6 	bl	8000550 <__aeabi_dmul>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	f7fb fb3a 	bl	80001e4 <__adddf3>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fb32 	bl	80001e0 <__aeabi_dsub>
 8004b7c:	e7c4      	b.n	8004b08 <__kernel_sin+0xd0>
 8004b7e:	bf00      	nop
 8004b80:	55555549 	.word	0x55555549
 8004b84:	3fc55555 	.word	0x3fc55555
 8004b88:	3fe00000 	.word	0x3fe00000
 8004b8c:	5acfd57c 	.word	0x5acfd57c
 8004b90:	3de5d93a 	.word	0x3de5d93a
 8004b94:	8a2b9ceb 	.word	0x8a2b9ceb
 8004b98:	3e5ae5e6 	.word	0x3e5ae5e6
 8004b9c:	57b1fe7d 	.word	0x57b1fe7d
 8004ba0:	3ec71de3 	.word	0x3ec71de3
 8004ba4:	19c161d5 	.word	0x19c161d5
 8004ba8:	3f2a01a0 	.word	0x3f2a01a0
 8004bac:	1110f8a6 	.word	0x1110f8a6
 8004bb0:	3f811111 	.word	0x3f811111

08004bb4 <fabs>:
 8004bb4:	ec51 0b10 	vmov	r0, r1, d0
 8004bb8:	ee10 2a10 	vmov	r2, s0
 8004bbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004bc0:	ec43 2b10 	vmov	d0, r2, r3
 8004bc4:	4770      	bx	lr

08004bc6 <finite>:
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	ed8d 0b00 	vstr	d0, [sp]
 8004bcc:	9801      	ldr	r0, [sp, #4]
 8004bce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004bd2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004bd6:	0fc0      	lsrs	r0, r0, #31
 8004bd8:	b002      	add	sp, #8
 8004bda:	4770      	bx	lr
 8004bdc:	0000      	movs	r0, r0
	...

08004be0 <floor>:
 8004be0:	ec51 0b10 	vmov	r0, r1, d0
 8004be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004bec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004bf0:	2e13      	cmp	r6, #19
 8004bf2:	ee10 5a10 	vmov	r5, s0
 8004bf6:	ee10 8a10 	vmov	r8, s0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	dc32      	bgt.n	8004c64 <floor+0x84>
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	da14      	bge.n	8004c2c <floor+0x4c>
 8004c02:	a333      	add	r3, pc, #204	; (adr r3, 8004cd0 <floor+0xf0>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb faec 	bl	80001e4 <__adddf3>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb ff2e 	bl	8000a70 <__aeabi_dcmpgt>
 8004c14:	b138      	cbz	r0, 8004c26 <floor+0x46>
 8004c16:	2c00      	cmp	r4, #0
 8004c18:	da57      	bge.n	8004cca <floor+0xea>
 8004c1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004c1e:	431d      	orrs	r5, r3
 8004c20:	d001      	beq.n	8004c26 <floor+0x46>
 8004c22:	4c2d      	ldr	r4, [pc, #180]	; (8004cd8 <floor+0xf8>)
 8004c24:	2500      	movs	r5, #0
 8004c26:	4621      	mov	r1, r4
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e025      	b.n	8004c78 <floor+0x98>
 8004c2c:	4f2b      	ldr	r7, [pc, #172]	; (8004cdc <floor+0xfc>)
 8004c2e:	4137      	asrs	r7, r6
 8004c30:	ea01 0307 	and.w	r3, r1, r7
 8004c34:	4303      	orrs	r3, r0
 8004c36:	d01f      	beq.n	8004c78 <floor+0x98>
 8004c38:	a325      	add	r3, pc, #148	; (adr r3, 8004cd0 <floor+0xf0>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f7fb fad1 	bl	80001e4 <__adddf3>
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f7fb ff13 	bl	8000a70 <__aeabi_dcmpgt>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d0eb      	beq.n	8004c26 <floor+0x46>
 8004c4e:	2c00      	cmp	r4, #0
 8004c50:	bfbe      	ittt	lt
 8004c52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004c56:	fa43 f606 	asrlt.w	r6, r3, r6
 8004c5a:	19a4      	addlt	r4, r4, r6
 8004c5c:	ea24 0407 	bic.w	r4, r4, r7
 8004c60:	2500      	movs	r5, #0
 8004c62:	e7e0      	b.n	8004c26 <floor+0x46>
 8004c64:	2e33      	cmp	r6, #51	; 0x33
 8004c66:	dd0b      	ble.n	8004c80 <floor+0xa0>
 8004c68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004c6c:	d104      	bne.n	8004c78 <floor+0x98>
 8004c6e:	ee10 2a10 	vmov	r2, s0
 8004c72:	460b      	mov	r3, r1
 8004c74:	f7fb fab6 	bl	80001e4 <__adddf3>
 8004c78:	ec41 0b10 	vmov	d0, r0, r1
 8004c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	fa23 f707 	lsr.w	r7, r3, r7
 8004c8c:	4207      	tst	r7, r0
 8004c8e:	d0f3      	beq.n	8004c78 <floor+0x98>
 8004c90:	a30f      	add	r3, pc, #60	; (adr r3, 8004cd0 <floor+0xf0>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb faa5 	bl	80001e4 <__adddf3>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f7fb fee7 	bl	8000a70 <__aeabi_dcmpgt>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0bf      	beq.n	8004c26 <floor+0x46>
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	da02      	bge.n	8004cb0 <floor+0xd0>
 8004caa:	2e14      	cmp	r6, #20
 8004cac:	d103      	bne.n	8004cb6 <floor+0xd6>
 8004cae:	3401      	adds	r4, #1
 8004cb0:	ea25 0507 	bic.w	r5, r5, r7
 8004cb4:	e7b7      	b.n	8004c26 <floor+0x46>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004cbc:	fa03 f606 	lsl.w	r6, r3, r6
 8004cc0:	4435      	add	r5, r6
 8004cc2:	4545      	cmp	r5, r8
 8004cc4:	bf38      	it	cc
 8004cc6:	18e4      	addcc	r4, r4, r3
 8004cc8:	e7f2      	b.n	8004cb0 <floor+0xd0>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	462c      	mov	r4, r5
 8004cce:	e7aa      	b.n	8004c26 <floor+0x46>
 8004cd0:	8800759c 	.word	0x8800759c
 8004cd4:	7e37e43c 	.word	0x7e37e43c
 8004cd8:	bff00000 	.word	0xbff00000
 8004cdc:	000fffff 	.word	0x000fffff

08004ce0 <scalbn>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	ec55 4b10 	vmov	r4, r5, d0
 8004ce6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004cea:	4606      	mov	r6, r0
 8004cec:	462b      	mov	r3, r5
 8004cee:	b99a      	cbnz	r2, 8004d18 <scalbn+0x38>
 8004cf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004cf4:	4323      	orrs	r3, r4
 8004cf6:	d036      	beq.n	8004d66 <scalbn+0x86>
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <scalbn+0x100>)
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	ee10 0a10 	vmov	r0, s0
 8004d00:	2200      	movs	r2, #0
 8004d02:	f7fb fc25 	bl	8000550 <__aeabi_dmul>
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <scalbn+0x104>)
 8004d08:	429e      	cmp	r6, r3
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	da10      	bge.n	8004d32 <scalbn+0x52>
 8004d10:	a32b      	add	r3, pc, #172	; (adr r3, 8004dc0 <scalbn+0xe0>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	e03a      	b.n	8004d8e <scalbn+0xae>
 8004d18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004d1c:	428a      	cmp	r2, r1
 8004d1e:	d10c      	bne.n	8004d3a <scalbn+0x5a>
 8004d20:	ee10 2a10 	vmov	r2, s0
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb fa5c 	bl	80001e4 <__adddf3>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	460d      	mov	r5, r1
 8004d30:	e019      	b.n	8004d66 <scalbn+0x86>
 8004d32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d36:	460b      	mov	r3, r1
 8004d38:	3a36      	subs	r2, #54	; 0x36
 8004d3a:	4432      	add	r2, r6
 8004d3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d40:	428a      	cmp	r2, r1
 8004d42:	dd08      	ble.n	8004d56 <scalbn+0x76>
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	a120      	add	r1, pc, #128	; (adr r1, 8004dc8 <scalbn+0xe8>)
 8004d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d4c:	da1c      	bge.n	8004d88 <scalbn+0xa8>
 8004d4e:	a120      	add	r1, pc, #128	; (adr r1, 8004dd0 <scalbn+0xf0>)
 8004d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d54:	e018      	b.n	8004d88 <scalbn+0xa8>
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	dd08      	ble.n	8004d6c <scalbn+0x8c>
 8004d5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d66:	ec45 4b10 	vmov	d0, r4, r5
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d70:	da19      	bge.n	8004da6 <scalbn+0xc6>
 8004d72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004d76:	429e      	cmp	r6, r3
 8004d78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004d7c:	dd0a      	ble.n	8004d94 <scalbn+0xb4>
 8004d7e:	a112      	add	r1, pc, #72	; (adr r1, 8004dc8 <scalbn+0xe8>)
 8004d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e2      	bne.n	8004d4e <scalbn+0x6e>
 8004d88:	a30f      	add	r3, pc, #60	; (adr r3, 8004dc8 <scalbn+0xe8>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fbdf 	bl	8000550 <__aeabi_dmul>
 8004d92:	e7cb      	b.n	8004d2c <scalbn+0x4c>
 8004d94:	a10a      	add	r1, pc, #40	; (adr r1, 8004dc0 <scalbn+0xe0>)
 8004d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0b8      	beq.n	8004d10 <scalbn+0x30>
 8004d9e:	a10e      	add	r1, pc, #56	; (adr r1, 8004dd8 <scalbn+0xf8>)
 8004da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da4:	e7b4      	b.n	8004d10 <scalbn+0x30>
 8004da6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004daa:	3236      	adds	r2, #54	; 0x36
 8004dac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004db0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004db4:	4620      	mov	r0, r4
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <scalbn+0x108>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	e7e8      	b.n	8004d8e <scalbn+0xae>
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	c2f8f359 	.word	0xc2f8f359
 8004dc4:	01a56e1f 	.word	0x01a56e1f
 8004dc8:	8800759c 	.word	0x8800759c
 8004dcc:	7e37e43c 	.word	0x7e37e43c
 8004dd0:	8800759c 	.word	0x8800759c
 8004dd4:	fe37e43c 	.word	0xfe37e43c
 8004dd8:	c2f8f359 	.word	0xc2f8f359
 8004ddc:	81a56e1f 	.word	0x81a56e1f
 8004de0:	43500000 	.word	0x43500000
 8004de4:	ffff3cb0 	.word	0xffff3cb0
 8004de8:	3c900000 	.word	0x3c900000

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
