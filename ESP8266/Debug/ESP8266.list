
ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000080  08003a88  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  08003a88  00020988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b210  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b14  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0002cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a97  00000000  00000000  0002db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093ee  00000000  00000000  00043617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085333  00000000  00000000  0004ca05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f4c  00000000  00000000  000d1d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800337c 	.word	0x0800337c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800337c 	.word	0x0800337c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b098      	sub	sp, #96	; 0x60
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005b2:	f000 fa49 	bl	8000a48 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005b6:	495d      	ldr	r1, [pc, #372]	; (800072c <ESP_Init+0x184>)
 80005b8:	485d      	ldr	r0, [pc, #372]	; (8000730 <ESP_Init+0x188>)
 80005ba:	f000 fc84 	bl	8000ec6 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80005be:	495d      	ldr	r1, [pc, #372]	; (8000734 <ESP_Init+0x18c>)
 80005c0:	485d      	ldr	r0, [pc, #372]	; (8000738 <ESP_Init+0x190>)
 80005c2:	f000 fc80 	bl	8000ec6 <Uart_sendstring>
	for (int i=0; i<5; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005ca:	e00a      	b.n	80005e2 <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 80005cc:	4959      	ldr	r1, [pc, #356]	; (8000734 <ESP_Init+0x18c>)
 80005ce:	485b      	ldr	r0, [pc, #364]	; (800073c <ESP_Init+0x194>)
 80005d0:	f000 fc79 	bl	8000ec6 <Uart_sendstring>
		HAL_Delay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f001 f904 	bl	80017e4 <HAL_Delay>
	for (int i=0; i<5; i++)
 80005dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005de:	3301      	adds	r3, #1
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	ddf1      	ble.n	80005cc <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 80005e8:	4950      	ldr	r1, [pc, #320]	; (800072c <ESP_Init+0x184>)
 80005ea:	4855      	ldr	r0, [pc, #340]	; (8000740 <ESP_Init+0x198>)
 80005ec:	f000 fc6b 	bl	8000ec6 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80005f0:	bf00      	nop
 80005f2:	494e      	ldr	r1, [pc, #312]	; (800072c <ESP_Init+0x184>)
 80005f4:	4853      	ldr	r0, [pc, #332]	; (8000744 <ESP_Init+0x19c>)
 80005f6:	f000 fcfb 	bl	8000ff0 <Wait_for>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f8      	beq.n	80005f2 <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 8000600:	494c      	ldr	r1, [pc, #304]	; (8000734 <ESP_Init+0x18c>)
 8000602:	4851      	ldr	r0, [pc, #324]	; (8000748 <ESP_Init+0x1a0>)
 8000604:	f000 fc5f 	bl	8000ec6 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000608:	4948      	ldr	r1, [pc, #288]	; (800072c <ESP_Init+0x184>)
 800060a:	4850      	ldr	r0, [pc, #320]	; (800074c <ESP_Init+0x1a4>)
 800060c:	f000 fc5b 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000610:	bf00      	nop
 8000612:	4946      	ldr	r1, [pc, #280]	; (800072c <ESP_Init+0x184>)
 8000614:	484e      	ldr	r0, [pc, #312]	; (8000750 <ESP_Init+0x1a8>)
 8000616:	f000 fceb 	bl	8000ff0 <Wait_for>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f8      	beq.n	8000612 <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 8000620:	4944      	ldr	r1, [pc, #272]	; (8000734 <ESP_Init+0x18c>)
 8000622:	484c      	ldr	r0, [pc, #304]	; (8000754 <ESP_Init+0x1ac>)
 8000624:	f000 fc4f 	bl	8000ec6 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000628:	4942      	ldr	r1, [pc, #264]	; (8000734 <ESP_Init+0x18c>)
 800062a:	484b      	ldr	r0, [pc, #300]	; (8000758 <ESP_Init+0x1b0>)
 800062c:	f000 fc4b 	bl	8000ec6 <Uart_sendstring>

	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000630:	f107 0008 	add.w	r0, r7, #8
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4948      	ldr	r1, [pc, #288]	; (800075c <ESP_Init+0x1b4>)
 800063a:	f002 fa63 	bl	8002b04 <siprintf>
	Uart_sendstring(data, wifi_uart);
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	493a      	ldr	r1, [pc, #232]	; (800072c <ESP_Init+0x184>)
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fc3e 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 800064a:	bf00      	nop
 800064c:	4937      	ldr	r1, [pc, #220]	; (800072c <ESP_Init+0x184>)
 800064e:	4844      	ldr	r0, [pc, #272]	; (8000760 <ESP_Init+0x1b8>)
 8000650:	f000 fcce 	bl	8000ff0 <Wait_for>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f8      	beq.n	800064c <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	4940      	ldr	r1, [pc, #256]	; (8000764 <ESP_Init+0x1bc>)
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fa4e 	bl	8002b04 <siprintf>
	Uart_sendstring(data,pc_uart);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4931      	ldr	r1, [pc, #196]	; (8000734 <ESP_Init+0x18c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fc29 	bl	8000ec6 <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000674:	492d      	ldr	r1, [pc, #180]	; (800072c <ESP_Init+0x184>)
 8000676:	483c      	ldr	r0, [pc, #240]	; (8000768 <ESP_Init+0x1c0>)
 8000678:	f000 fc25 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 800067c:	bf00      	nop
 800067e:	492b      	ldr	r1, [pc, #172]	; (800072c <ESP_Init+0x184>)
 8000680:	483a      	ldr	r0, [pc, #232]	; (800076c <ESP_Init+0x1c4>)
 8000682:	f000 fcb5 	bl	8000ff0 <Wait_for>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f8      	beq.n	800067e <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 800068c:	bf00      	nop
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <ESP_Init+0x184>)
 8000690:	4937      	ldr	r1, [pc, #220]	; (8000770 <ESP_Init+0x1c8>)
 8000692:	4838      	ldr	r0, [pc, #224]	; (8000774 <ESP_Init+0x1cc>)
 8000694:	f000 fc2e 	bl	8000ef4 <Copy_upto>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f7      	beq.n	800068e <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800069e:	bf00      	nop
 80006a0:	4922      	ldr	r1, [pc, #136]	; (800072c <ESP_Init+0x184>)
 80006a2:	4835      	ldr	r0, [pc, #212]	; (8000778 <ESP_Init+0x1d0>)
 80006a4:	f000 fca4 	bl	8000ff0 <Wait_for>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f8      	beq.n	80006a0 <ESP_Init+0xf8>
	int len = strlen (buffer);
 80006ae:	4830      	ldr	r0, [pc, #192]	; (8000770 <ESP_Init+0x1c8>)
 80006b0:	f7ff fda0 	bl	80001f4 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80006b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <ESP_Init+0x1c8>)
 80006be:	2100      	movs	r1, #0
 80006c0:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <ESP_Init+0x1c8>)
 80006c8:	492c      	ldr	r1, [pc, #176]	; (800077c <ESP_Init+0x1d4>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fa1a 	bl	8002b04 <siprintf>
	Uart_sendstring(data, pc_uart);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4917      	ldr	r1, [pc, #92]	; (8000734 <ESP_Init+0x18c>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fbf5 	bl	8000ec6 <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <ESP_Init+0x184>)
 80006de:	4828      	ldr	r0, [pc, #160]	; (8000780 <ESP_Init+0x1d8>)
 80006e0:	f000 fbf1 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80006e4:	bf00      	nop
 80006e6:	4911      	ldr	r1, [pc, #68]	; (800072c <ESP_Init+0x184>)
 80006e8:	4826      	ldr	r0, [pc, #152]	; (8000784 <ESP_Init+0x1dc>)
 80006ea:	f000 fc81 	bl	8000ff0 <Wait_for>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f8      	beq.n	80006e6 <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80006f4:	490f      	ldr	r1, [pc, #60]	; (8000734 <ESP_Init+0x18c>)
 80006f6:	4824      	ldr	r0, [pc, #144]	; (8000788 <ESP_Init+0x1e0>)
 80006f8:	f000 fbe5 	bl	8000ec6 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80006fc:	490b      	ldr	r1, [pc, #44]	; (800072c <ESP_Init+0x184>)
 80006fe:	4823      	ldr	r0, [pc, #140]	; (800078c <ESP_Init+0x1e4>)
 8000700:	f000 fbe1 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000704:	bf00      	nop
 8000706:	4909      	ldr	r1, [pc, #36]	; (800072c <ESP_Init+0x184>)
 8000708:	481b      	ldr	r0, [pc, #108]	; (8000778 <ESP_Init+0x1d0>)
 800070a:	f000 fc71 	bl	8000ff0 <Wait_for>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f8      	beq.n	8000706 <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <ESP_Init+0x18c>)
 8000716:	481e      	ldr	r0, [pc, #120]	; (8000790 <ESP_Init+0x1e8>)
 8000718:	f000 fbd5 	bl	8000ec6 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 800071c:	4905      	ldr	r1, [pc, #20]	; (8000734 <ESP_Init+0x18c>)
 800071e:	481d      	ldr	r0, [pc, #116]	; (8000794 <ESP_Init+0x1ec>)
 8000720:	f000 fbd1 	bl	8000ec6 <Uart_sendstring>

}
 8000724:	bf00      	nop
 8000726:	3760      	adds	r7, #96	; 0x60
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200008ec 	.word	0x200008ec
 8000730:	08003798 	.word	0x08003798
 8000734:	20000930 	.word	0x20000930
 8000738:	080037a4 	.word	0x080037a4
 800073c:	080037b0 	.word	0x080037b0
 8000740:	080037b4 	.word	0x080037b4
 8000744:	080037bc 	.word	0x080037bc
 8000748:	080037c8 	.word	0x080037c8
 800074c:	080037d4 	.word	0x080037d4
 8000750:	080037e4 	.word	0x080037e4
 8000754:	080037fc 	.word	0x080037fc
 8000758:	0800380c 	.word	0x0800380c
 800075c:	08003830 	.word	0x08003830
 8000760:	08003848 	.word	0x08003848
 8000764:	0800385c 	.word	0x0800385c
 8000768:	08003870 	.word	0x08003870
 800076c:	0800387c 	.word	0x0800387c
 8000770:	200008c8 	.word	0x200008c8
 8000774:	0800388c 	.word	0x0800388c
 8000778:	08003890 	.word	0x08003890
 800077c:	08003898 	.word	0x08003898
 8000780:	080038a8 	.word	0x080038a8
 8000784:	080038b8 	.word	0x080038b8
 8000788:	080038d0 	.word	0x080038d0
 800078c:	080038e0 	.word	0x080038e0
 8000790:	080038f4 	.word	0x080038f4
 8000794:	08003908 	.word	0x08003908

08000798 <Server_Send>:



int Server_Send (char *str, int Link_ID)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b098      	sub	sp, #96	; 0x60
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fd26 	bl	80001f4 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007ac:	f107 000c 	add.w	r0, r7, #12
 80007b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	491a      	ldr	r1, [pc, #104]	; (8000820 <Server_Send+0x88>)
 80007b6:	f002 f9a5 	bl	8002b04 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4919      	ldr	r1, [pc, #100]	; (8000824 <Server_Send+0x8c>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fb80 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80007c6:	bf00      	nop
 80007c8:	4916      	ldr	r1, [pc, #88]	; (8000824 <Server_Send+0x8c>)
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <Server_Send+0x90>)
 80007cc:	f000 fc10 	bl	8000ff0 <Wait_for>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f8      	beq.n	80007c8 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 80007d6:	4913      	ldr	r1, [pc, #76]	; (8000824 <Server_Send+0x8c>)
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fb74 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80007de:	bf00      	nop
 80007e0:	4910      	ldr	r1, [pc, #64]	; (8000824 <Server_Send+0x8c>)
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <Server_Send+0x94>)
 80007e4:	f000 fc04 	bl	8000ff0 <Wait_for>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f8      	beq.n	80007e0 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	490f      	ldr	r1, [pc, #60]	; (8000830 <Server_Send+0x98>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 f985 	bl	8002b04 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4909      	ldr	r1, [pc, #36]	; (8000824 <Server_Send+0x8c>)
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fb60 	bl	8000ec6 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000806:	bf00      	nop
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <Server_Send+0x8c>)
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <Server_Send+0x9c>)
 800080c:	f000 fbf0 	bl	8000ff0 <Wait_for>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f8      	beq.n	8000808 <Server_Send+0x70>
	return 1;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3760      	adds	r7, #96	; 0x60
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08003928 	.word	0x08003928
 8000824:	200008ec 	.word	0x200008ec
 8000828:	0800393c 	.word	0x0800393c
 800082c:	08003940 	.word	0x08003940
 8000830:	08003948 	.word	0x08003948
 8000834:	08003890 	.word	0x08003890

08000838 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800083e:	af00      	add	r7, sp, #0
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	6018      	str	r0, [r3, #0]
 8000844:	463b      	mov	r3, r7
 8000846:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	3304      	adds	r3, #4
 8000852:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f94b 	bl	8002af4 <memset>
	if (!(strcmp (str, "/ledon")))
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4939      	ldr	r1, [pc, #228]	; (8000948 <Server_Handle+0x110>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	f7ff fcbc 	bl	80001e0 <strcmp>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d11f      	bne.n	80008ae <Server_Handle+0x76>
	{
		sprintf (datatosend, Basic_inclusion);
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <Server_Handle+0x114>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f943 	bl	8002b04 <siprintf>
		strcat(datatosend, LED_ON);
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <Server_Handle+0x118>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f002 f95b 	bl	8002b44 <strcat>
		strcat(datatosend, Terminate);
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <Server_Handle+0x11c>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f953 	bl	8002b44 <strcat>
		Server_Send(datatosend, Link_ID);
 800089e:	463b      	mov	r3, r7
 80008a0:	f107 0208 	add.w	r2, r7, #8
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	4610      	mov	r0, r2
 80008a8:	f7ff ff76 	bl	8000798 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 80008ac:	e046      	b.n	800093c <Server_Handle+0x104>
	else if (!(strcmp (str, "/ledoff")))
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4929      	ldr	r1, [pc, #164]	; (8000958 <Server_Handle+0x120>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f7ff fc94 	bl	80001e0 <strcmp>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11f      	bne.n	80008fe <Server_Handle+0xc6>
		sprintf (datatosend, Basic_inclusion);
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <Server_Handle+0x114>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 f91b 	bl	8002b04 <siprintf>
		strcat(datatosend, LED_OFF);
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <Server_Handle+0x124>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f933 	bl	8002b44 <strcat>
		strcat(datatosend, Terminate);
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <Server_Handle+0x11c>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 f92b 	bl	8002b44 <strcat>
		Server_Send(datatosend, Link_ID);
 80008ee:	463b      	mov	r3, r7
 80008f0:	f107 0208 	add.w	r2, r7, #8
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	4610      	mov	r0, r2
 80008f8:	f7ff ff4e 	bl	8000798 <Server_Send>
}
 80008fc:	e01e      	b.n	800093c <Server_Handle+0x104>
		sprintf (datatosend, Basic_inclusion);
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <Server_Handle+0x114>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f002 f8fb 	bl	8002b04 <siprintf>
		strcat(datatosend, LED_OFF);
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <Server_Handle+0x124>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f002 f913 	bl	8002b44 <strcat>
		strcat(datatosend, Terminate);
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <Server_Handle+0x11c>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f002 f90b 	bl	8002b44 <strcat>
		Server_Send(datatosend, Link_ID);
 800092e:	463b      	mov	r3, r7
 8000930:	f107 0208 	add.w	r2, r7, #8
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	4610      	mov	r0, r2
 8000938:	f7ff ff2e 	bl	8000798 <Server_Send>
}
 800093c:	bf00      	nop
 800093e:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08003958 	.word	0x08003958
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004
 8000954:	2000000c 	.word	0x2000000c
 8000958:	08003960 	.word	0x08003960
 800095c:	20000008 	.word	0x20000008

08000960 <Server_Start>:

void Server_Start (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b092      	sub	sp, #72	; 0x48
 8000964:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	223c      	movs	r2, #60	; 0x3c
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f002 f8be 	bl	8002af4 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8000978:	bf00      	nop
 800097a:	1dfa      	adds	r2, r7, #7
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <Server_Start+0xc8>)
 800097e:	2101      	movs	r1, #1
 8000980:	482a      	ldr	r0, [pc, #168]	; (8000a2c <Server_Start+0xcc>)
 8000982:	f000 fa71 	bl	8000e68 <Get_after>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f6      	beq.n	800097a <Server_Start+0x1a>
	Link_ID -= 48;
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	3b30      	subs	r3, #48	; 0x30
 8000990:	b2db      	uxtb	r3, r3
 8000992:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8000994:	bf00      	nop
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <Server_Start+0xc8>)
 800099c:	4619      	mov	r1, r3
 800099e:	4824      	ldr	r0, [pc, #144]	; (8000a30 <Server_Start+0xd0>)
 80009a0:	f000 faa8 	bl	8000ef4 <Copy_upto>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f5      	beq.n	8000996 <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	4820      	ldr	r0, [pc, #128]	; (8000a34 <Server_Start+0xd4>)
 80009b2:	f000 f8b4 	bl	8000b1e <Look_for>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10a      	bne.n	80009d2 <Server_Start+0x72>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80009bc:	2201      	movs	r2, #1
 80009be:	2120      	movs	r1, #32
 80009c0:	481d      	ldr	r0, [pc, #116]	; (8000a38 <Server_Start+0xd8>)
 80009c2:	f001 f9c9 	bl	8001d58 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4619      	mov	r1, r3
 80009ca:	481a      	ldr	r0, [pc, #104]	; (8000a34 <Server_Start+0xd4>)
 80009cc:	f7ff ff34 	bl	8000838 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 80009d0:	e026      	b.n	8000a20 <Server_Start+0xc0>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <Server_Start+0xdc>)
 80009da:	f000 f8a0 	bl	8000b1e <Look_for>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10a      	bne.n	80009fa <Server_Start+0x9a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2120      	movs	r1, #32
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <Server_Start+0xd8>)
 80009ea:	f001 f9b5 	bl	8001d58 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <Server_Start+0xdc>)
 80009f4:	f7ff ff20 	bl	8000838 <Server_Handle>
}
 80009f8:	e012      	b.n	8000a20 <Server_Start+0xc0>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <Server_Start+0xe0>)
 8000a02:	f000 f88c 	bl	8000b1e <Look_for>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d009      	beq.n	8000a20 <Server_Start+0xc0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2120      	movs	r1, #32
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <Server_Start+0xd8>)
 8000a12:	f001 f9a1 	bl	8001d58 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480a      	ldr	r0, [pc, #40]	; (8000a44 <Server_Start+0xe4>)
 8000a1c:	f7ff ff0c 	bl	8000838 <Server_Handle>
}
 8000a20:	bf00      	nop
 8000a22:	3748      	adds	r7, #72	; 0x48
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200008ec 	.word	0x200008ec
 8000a2c:	08003968 	.word	0x08003968
 8000a30:	08003970 	.word	0x08003970
 8000a34:	08003958 	.word	0x08003958
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	08003960 	.word	0x08003960
 8000a40:	0800397c 	.word	0x0800397c
 8000a44:	0800398c 	.word	0x0800398c

08000a48 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <Ringbuf_init+0x68>)
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <Ringbuf_init+0x6c>)
 8000a50:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <Ringbuf_init+0x70>)
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <Ringbuf_init+0x74>)
 8000a56:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <Ringbuf_init+0x78>)
 8000a5a:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <Ringbuf_init+0x7c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <Ringbuf_init+0x80>)
 8000a60:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <Ringbuf_init+0x84>)
 8000a62:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <Ringbuf_init+0x88>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695a      	ldr	r2, [r3, #20]
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <Ringbuf_init+0x88>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <Ringbuf_init+0x8c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <Ringbuf_init+0x8c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f042 0201 	orr.w	r2, r2, #1
 8000a82:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <Ringbuf_init+0x88>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <Ringbuf_init+0x88>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0220 	orr.w	r2, r2, #32
 8000a92:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <Ringbuf_init+0x8c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <Ringbuf_init+0x8c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0220 	orr.w	r2, r2, #32
 8000aa2:	60da      	str	r2, [r3, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200008e0 	.word	0x200008e0
 8000ab4:	2000009c 	.word	0x2000009c
 8000ab8:	200008e4 	.word	0x200008e4
 8000abc:	200002a4 	.word	0x200002a4
 8000ac0:	200008e8 	.word	0x200008e8
 8000ac4:	200004ac 	.word	0x200004ac
 8000ac8:	200008dc 	.word	0x200008dc
 8000acc:	200006b4 	.word	0x200006b4
 8000ad0:	200008ec 	.word	0x200008ec
 8000ad4:	20000930 	.word	0x20000930

08000ad8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000aea:	3301      	adds	r3, #1
 8000aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af0:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d009      	beq.n	8000b12 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	79f9      	ldrb	r1, [r7, #7]
 8000b08:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fb63 	bl	80001f4 <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b32:	6838      	ldr	r0, [r7, #0]
 8000b34:	f7ff fb5e 	bl	80001f4 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000b44:	e002      	b.n	8000b4c <Look_for+0x2e>
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	440b      	add	r3, r1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d1f2      	bne.n	8000b46 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	6839      	ldr	r1, [r7, #0]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d111      	bne.n	8000b98 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000b74:	e005      	b.n	8000b82 <Look_for+0x64>
	{
		so_far++;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
		indx++;
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	6839      	ldr	r1, [r7, #0]
 8000b8e:	440b      	add	r3, r1
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d0ef      	beq.n	8000b76 <Look_for+0x58>
 8000b96:	e008      	b.n	8000baa <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbcf      	blt.n	8000b44 <Look_for+0x26>
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	e007      	b.n	8000bba <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d101      	bne.n	8000bb6 <Look_for+0x98>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e001      	b.n	8000bba <Look_for+0x9c>
	else return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <Uart_peek+0x7c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d114      	bne.n	8000bfe <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <Uart_peek+0x80>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <Uart_peek+0x80>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d102      	bne.n	8000bee <Uart_peek+0x2a>
		  {
		    return -1;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	e022      	b.n	8000c34 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <Uart_peek+0x80>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <Uart_peek+0x80>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000bfa:	5cd3      	ldrb	r3, [r2, r3]
 8000bfc:	e01a      	b.n	8000c34 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <Uart_peek+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d114      	bne.n	8000c30 <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <Uart_peek+0x88>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <Uart_peek+0x88>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d102      	bne.n	8000c20 <Uart_peek+0x5c>
		  {
		    return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <Uart_peek+0x88>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <Uart_peek+0x88>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	e001      	b.n	8000c34 <Uart_peek+0x70>
		  }
	}

	return -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	200008ec 	.word	0x200008ec
 8000c44:	200008e0 	.word	0x200008e0
 8000c48:	20000930 	.word	0x20000930
 8000c4c:	200008e8 	.word	0x200008e8

08000c50 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <Uart_read+0xb0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d121      	bne.n	8000ca4 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <Uart_read+0xb4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <Uart_read+0xb4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d102      	bne.n	8000c7a <Uart_read+0x2a>
		  {
		    return -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e03c      	b.n	8000cf4 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <Uart_read+0xb4>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <Uart_read+0xb4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <Uart_read+0xb4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <Uart_read+0xb4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	e027      	b.n	8000cf4 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <Uart_read+0xb8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d121      	bne.n	8000cf0 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <Uart_read+0xbc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <Uart_read+0xbc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d102      	bne.n	8000cc6 <Uart_read+0x76>
		  {
		    return -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	e016      	b.n	8000cf4 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <Uart_read+0xbc>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <Uart_read+0xbc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <Uart_read+0xbc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <Uart_read+0xbc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	e001      	b.n	8000cf4 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	200008ec 	.word	0x200008ec
 8000d04:	200008e0 	.word	0x200008e0
 8000d08:	20000930 	.word	0x20000930
 8000d0c:	200008e8 	.word	0x200008e8

08000d10 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db54      	blt.n	8000dca <Uart_write+0xba>
	{
		if (uart == device_uart){
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <Uart_write+0xc8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d126      	bne.n	8000d76 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <Uart_write+0xcc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d30:	3301      	adds	r3, #1
 8000d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d36:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000d38:	bf00      	nop
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <Uart_write+0xcc>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d0f8      	beq.n	8000d3a <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <Uart_write+0xcc>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <Uart_write+0xcc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	b2c9      	uxtb	r1, r1
 8000d58:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <Uart_write+0xcc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <Uart_write+0xc8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <Uart_write+0xc8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d72:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000d74:	e029      	b.n	8000dca <Uart_write+0xba>
		else if (uart == pc_uart){
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <Uart_write+0xd0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d125      	bne.n	8000dca <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <Uart_write+0xd4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d86:	3301      	adds	r3, #1
 8000d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d8c:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000d8e:	bf00      	nop
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <Uart_write+0xd4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d0f8      	beq.n	8000d90 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <Uart_write+0xd4>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <Uart_write+0xd4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	b2c9      	uxtb	r1, r1
 8000dae:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <Uart_write+0xd4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <Uart_write+0xd0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <Uart_write+0xd0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dc8:	60da      	str	r2, [r3, #12]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200008ec 	.word	0x200008ec
 8000ddc:	200008e4 	.word	0x200008e4
 8000de0:	20000930 	.word	0x20000930
 8000de4:	200008dc 	.word	0x200008dc

08000de8 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <IsDataAvailable+0x70>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d111      	bne.n	8000e1c <IsDataAvailable+0x34>
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <IsDataAvailable+0x74>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <IsDataAvailable+0x74>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e1a:	e017      	b.n	8000e4c <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <IsDataAvailable+0x78>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d111      	bne.n	8000e48 <IsDataAvailable+0x60>
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <IsDataAvailable+0x7c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <IsDataAvailable+0x7c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e46:	e001      	b.n	8000e4c <IsDataAvailable+0x64>
	return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	200008ec 	.word	0x200008ec
 8000e5c:	200008e0 	.word	0x200008e0
 8000e60:	20000930 	.word	0x20000930
 8000e64:	200008e8 	.word	0x200008e8

08000e68 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000e78:	bf00      	nop
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f000 f8b7 	bl	8000ff0 <Wait_for>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d1f8      	bne.n	8000e7a <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e012      	b.n	8000eb4 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000e8e:	bf00      	nop
 8000e90:	6838      	ldr	r0, [r7, #0]
 8000e92:	f7ff ffa9 	bl	8000de8 <IsDataAvailable>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f9      	beq.n	8000e90 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	f7ff fed7 	bl	8000c50 <Uart_read>
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbe8      	blt.n	8000e8e <Get_after+0x26>
	}
	return 1;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000ed0:	e007      	b.n	8000ee2 <Uart_sendstring+0x1c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff17 	bl	8000d10 <Uart_write>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f3      	bne.n	8000ed2 <Uart_sendstring+0xc>
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff f975 	bl	80001f4 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000f12:	bf00      	nop
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff67 	bl	8000de8 <IsDataAvailable>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f9      	beq.n	8000f14 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000f20:	e01f      	b.n	8000f62 <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <Copy_upto+0xf8>)
 8000f24:	6819      	ldr	r1, [r3, #0]
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <Copy_upto+0xf8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	4403      	add	r3, r0
 8000f34:	5c8a      	ldrb	r2, [r1, r2]
 8000f36:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <Copy_upto+0xf8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <Copy_upto+0xf8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	3301      	adds	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000f54:	bf00      	nop
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff46 	bl	8000de8 <IsDataAvailable>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fe2e 	bl	8000bc4 <Uart_peek>
 8000f68:	4601      	mov	r1, r0
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4299      	cmp	r1, r3
 8000f74:	d1d5      	bne.n	8000f22 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000f76:	e01b      	b.n	8000fb0 <Copy_upto+0xbc>
	{
		so_far++;
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fe66 	bl	8000c50 <Uart_read>
 8000f84:	4601      	mov	r1, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	61ba      	str	r2, [r7, #24]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d101      	bne.n	8000fa2 <Copy_upto+0xae>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e01f      	b.n	8000fe2 <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8000fa2:	bf00      	nop
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff1f 	bl	8000de8 <IsDataAvailable>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f9      	beq.n	8000fa4 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fe07 	bl	8000bc4 <Uart_peek>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	d0d9      	beq.n	8000f78 <Copy_upto+0x84>
	}

	if (so_far != len)
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d002      	beq.n	8000fd2 <Copy_upto+0xde>
	{
		so_far = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
		goto again;
 8000fd0:	e79f      	b.n	8000f12 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d101      	bne.n	8000fde <Copy_upto+0xea>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e001      	b.n	8000fe2 <Copy_upto+0xee>
	else return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200008e0 	.word	0x200008e0

08000ff0 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f8f8 	bl	80001f4 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8001008:	bf00      	nop
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f7ff feec 	bl	8000de8 <IsDataAvailable>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f9      	beq.n	800100a <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	f7ff fdd4 	bl	8000bc4 <Uart_peek>
 800101c:	4601      	mov	r1, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4299      	cmp	r1, r3
 8001028:	d01e      	beq.n	8001068 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <Wait_for+0xb4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <Wait_for+0xb4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800103c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001040:	e7e2      	b.n	8001008 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f7ff fe01 	bl	8000c50 <Uart_read>
		if (so_far == len) return 1;
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d101      	bne.n	800105a <Wait_for+0x6a>
 8001056:	2301      	movs	r3, #1
 8001058:	e01f      	b.n	800109a <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 800105a:	bf00      	nop
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f7ff fec3 	bl	8000de8 <IsDataAvailable>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f9      	beq.n	800105c <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fdab 	bl	8000bc4 <Uart_peek>
 800106e:	4601      	mov	r1, r0
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4299      	cmp	r1, r3
 800107a:	d0e2      	beq.n	8001042 <Wait_for+0x52>
	}

	if (so_far != len)
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	d002      	beq.n	800108a <Wait_for+0x9a>
	{
		so_far = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001088:	e7be      	b.n	8001008 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	429a      	cmp	r2, r3
 8001090:	d101      	bne.n	8001096 <Wait_for+0xa6>
 8001092:	2301      	movs	r3, #1
 8001094:	e001      	b.n	800109a <Wait_for+0xaa>
	else return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200008e0 	.word	0x200008e0

080010a8 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d023      	beq.n	8001112 <Uart_isr+0x6a>
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01e      	beq.n	8001112 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a3f      	ldr	r2, [pc, #252]	; (80011e4 <Uart_isr+0x13c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d107      	bne.n	80010fa <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80010ea:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <Uart_isr+0x140>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fcf0 	bl	8000ad8 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 80010f8:	e06d      	b.n	80011d6 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a3b      	ldr	r2, [pc, #236]	; (80011ec <Uart_isr+0x144>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d169      	bne.n	80011d6 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <Uart_isr+0x148>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fce4 	bl	8000ad8 <store_char>
        return;
 8001110:	e061      	b.n	80011d6 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001118:	2b00      	cmp	r3, #0
 800111a:	d05f      	beq.n	80011dc <Uart_isr+0x134>
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	2b00      	cmp	r3, #0
 8001124:	d05a      	beq.n	80011dc <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <Uart_isr+0x13c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d127      	bne.n	800117e <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <Uart_isr+0x14c>)
 8001130:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <Uart_isr+0x14c>)
 8001136:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800113a:	429a      	cmp	r2, r3
 800113c:	d108      	bne.n	8001150 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800114c:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 800114e:	e044      	b.n	80011da <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <Uart_isr+0x14c>)
 8001152:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001156:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <Uart_isr+0x14c>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <Uart_isr+0x14c>)
 800115e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001162:	3301      	adds	r3, #1
 8001164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <Uart_isr+0x14c>)
 800116a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	7b7a      	ldrb	r2, [r7, #13]
 800117a:	605a      	str	r2, [r3, #4]
    	return;
 800117c:	e02d      	b.n	80011da <Uart_isr+0x132>
    	else if (huart == pc_uart){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <Uart_isr+0x144>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d129      	bne.n	80011da <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <Uart_isr+0x150>)
 8001188:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <Uart_isr+0x150>)
 800118e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001192:	429a      	cmp	r2, r3
 8001194:	d108      	bne.n	80011a8 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a4:	60da      	str	r2, [r3, #12]
    	return;
 80011a6:	e018      	b.n	80011da <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <Uart_isr+0x150>)
 80011aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <Uart_isr+0x150>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <Uart_isr+0x150>)
 80011b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ba:	3301      	adds	r3, #1
 80011bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <Uart_isr+0x150>)
 80011c2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	7bba      	ldrb	r2, [r7, #14]
 80011d2:	605a      	str	r2, [r3, #4]
    	return;
 80011d4:	e001      	b.n	80011da <Uart_isr+0x132>
        return;
 80011d6:	bf00      	nop
 80011d8:	e000      	b.n	80011dc <Uart_isr+0x134>
    	return;
 80011da:	bf00      	nop
    }
}
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200008ec 	.word	0x200008ec
 80011e8:	200008e0 	.word	0x200008e0
 80011ec:	20000930 	.word	0x20000930
 80011f0:	200008e8 	.word	0x200008e8
 80011f4:	200002a4 	.word	0x200002a4
 80011f8:	200006b4 	.word	0x200006b4

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001200:	f000 fa7e 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f812 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f000 f8ce 	bl	80013a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800120c:	f000 f878 	bl	8001300 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001210:	f000 f8a0 	bl	8001354 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("TP-LINK_1904","podlesie7");
 8001214:	4903      	ldr	r1, [pc, #12]	; (8001224 <main+0x28>)
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <main+0x2c>)
 8001218:	f7ff f9c6 	bl	80005a8 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 800121c:	f7ff fba0 	bl	8000960 <Server_Start>
 8001220:	e7fc      	b.n	800121c <main+0x20>
 8001222:	bf00      	nop
 8001224:	08003990 	.word	0x08003990
 8001228:	0800399c 	.word	0x0800399c

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	; 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2230      	movs	r2, #48	; 0x30
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fc5a 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <SystemClock_Config+0xcc>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <SystemClock_Config+0xcc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <SystemClock_Config+0xd0>)
 800127a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012a4:	2332      	movs	r3, #50	; 0x32
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fd69 	bl	8001d8c <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012c0:	f000 f8b4 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 ffcb 	bl	800227c <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012ec:	f000 f89e 	bl	800142c <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART1_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001338:	f001 f99c 	bl	8002674 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f873 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200008ec 	.word	0x200008ec
 8001350:	40011000 	.word	0x40011000

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f001 f972 	bl	8002674 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f849 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000930 	.word	0x20000930
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_GPIO_Init+0x7c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <MX_GPIO_Init+0x7c>)
 80013c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_GPIO_Init+0x7c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_GPIO_Init+0x7c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <MX_GPIO_Init+0x7c>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_GPIO_Init+0x7c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2120      	movs	r1, #32
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <MX_GPIO_Init+0x80>)
 80013fc:	f000 fcac 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001400:	2320      	movs	r3, #32
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_GPIO_Init+0x80>)
 8001418:	f000 fb1a 	bl	8001a50 <HAL_GPIO_Init>

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_MspInit+0x4c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <HAL_UART_MspInit+0x108>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d135      	bne.n	8001516 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_UART_MspInit+0x10c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_UART_MspInit+0x10c>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_UART_MspInit+0x10c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <HAL_UART_MspInit+0x10c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a31      	ldr	r2, [pc, #196]	; (8001594 <HAL_UART_MspInit+0x10c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_UART_MspInit+0x10c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f4:	2307      	movs	r3, #7
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4826      	ldr	r0, [pc, #152]	; (8001598 <HAL_UART_MspInit+0x110>)
 8001500:	f000 faa6 	bl	8001a50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2025      	movs	r0, #37	; 0x25
 800150a:	f000 fa6a 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800150e:	2025      	movs	r0, #37	; 0x25
 8001510:	f000 fa83 	bl	8001a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001514:	e038      	b.n	8001588 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_UART_MspInit+0x114>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d133      	bne.n	8001588 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_UART_MspInit+0x10c>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <HAL_UART_MspInit+0x10c>)
 800152a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_UART_MspInit+0x10c>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_UART_MspInit+0x10c>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_UART_MspInit+0x10c>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_UART_MspInit+0x10c>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001558:	230c      	movs	r3, #12
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001568:	2307      	movs	r3, #7
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4809      	ldr	r0, [pc, #36]	; (8001598 <HAL_UART_MspInit+0x110>)
 8001574:	f000 fa6c 	bl	8001a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2026      	movs	r0, #38	; 0x26
 800157e:	f000 fa30 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001582:	2026      	movs	r0, #38	; 0x26
 8001584:	f000 fa49 	bl	8001a1a <HAL_NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40011000 	.word	0x40011000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40004400 	.word	0x40004400

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ec:	f000 f8da 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <USART1_IRQHandler+0x10>)
 80015fa:	f7ff fd55 	bl	80010a8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200008ec 	.word	0x200008ec

08001608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART2_IRQHandler+0x10>)
 800160e:	f7ff fd4b 	bl	80010a8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000930 	.word	0x20000930

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f001 fa28 	bl	8002aa0 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20010000 	.word	0x20010000
 800167c:	00000400 	.word	0x00000400
 8001680:	200008bc 	.word	0x200008bc
 8001684:	20000988 	.word	0x20000988

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b2:	490e      	ldr	r1, [pc, #56]	; (80016ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c8:	4c0b      	ldr	r4, [pc, #44]	; (80016f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016d6:	f7ff ffd7 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f001 f9e7 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff fd8d 	bl	80011fc <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80016f0:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 80016f4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80016f8:	20000988 	.word	0x20000988

080016fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_Init+0x40>)
 800170a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_Init+0x40>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_Init+0x40>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f94f 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	200f      	movs	r0, #15
 8001730:	f000 f808 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7ff fe80 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_InitTick+0x54>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x58>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f967 	bl	8001a36 <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f000 f92f 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_InitTick+0x5c>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000010 	.word	0x20000010
 800179c:	20000018 	.word	0x20000018
 80017a0:	20000014 	.word	0x20000014

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000018 	.word	0x20000018
 80017c8:	20000974 	.word	0x20000974

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000974 	.word	0x20000974

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000018 	.word	0x20000018

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f4:	f7ff ff3e 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff31 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e159      	b.n	8001d20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8148 	bne.w	8001d1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a2 	beq.w	8001d1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a56      	ldr	r2, [pc, #344]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b54      	ldr	r3, [pc, #336]	; (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x202>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2f4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x1fe>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_GPIO_Init+0x2f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x1fa>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a46      	ldr	r2, [pc, #280]	; (8001d4c <HAL_GPIO_Init+0x2fc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x1f6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a45      	ldr	r2, [pc, #276]	; (8001d50 <HAL_GPIO_Init+0x300>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x1f2>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c96:	4a2f      	ldr	r2, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc0:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f aea2 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e264      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d075      	beq.n	8001e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001daa:	4ba3      	ldr	r3, [pc, #652]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d00c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d112      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4b9d      	ldr	r3, [pc, #628]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dce:	d10b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	4b99      	ldr	r3, [pc, #612]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05b      	beq.n	8001e94 <HAL_RCC_OscConfig+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d157      	bne.n	8001e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e23f      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x74>
 8001df2:	4b91      	ldr	r3, [pc, #580]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a90      	ldr	r2, [pc, #576]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8a      	ldr	r2, [pc, #552]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a87      	ldr	r2, [pc, #540]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xb0>
 8001e24:	4b84      	ldr	r3, [pc, #528]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a83      	ldr	r2, [pc, #524]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a80      	ldr	r2, [pc, #512]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fcc2 	bl	80017cc <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fcbe 	bl	80017cc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e204      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fcae 	bl	80017cc <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fcaa 	bl	80017cc <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1f0      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0xe8>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eae:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1c4      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4952      	ldr	r1, [pc, #328]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_OscConfig+0x2b0>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff fc63 	bl	80017cc <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fc5f 	bl	80017cc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1a5      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4940      	ldr	r1, [pc, #256]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x2b0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fc42 	bl	80017cc <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fc3e 	bl	80017cc <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e184      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d030      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_RCC_OscConfig+0x2b4>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff fc22 	bl	80017cc <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc1e 	bl	80017cc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e164      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x200>
 8001faa:	e015      	b.n	8001fd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_OscConfig+0x2b4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fc0b 	bl	80017cc <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff fc07 	bl	80017cc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e14d      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a0 	beq.w	8002126 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x2b8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d121      	bne.n	8002066 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x2b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_RCC_OscConfig+0x2b8>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7ff fbcd 	bl	80017cc <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	e011      	b.n	800205a <HAL_RCC_OscConfig+0x2ce>
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	42470000 	.word	0x42470000
 8002040:	42470e80 	.word	0x42470e80
 8002044:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002048:	f7ff fbc0 	bl	80017cc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e106      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCC_OscConfig+0x4e4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x2f0>
 800206e:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a80      	ldr	r2, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x32a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x312>
 8002084:	4b7b      	ldr	r3, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a7a      	ldr	r2, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x32a>
 800209e:	4b75      	ldr	r3, [pc, #468]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a74      	ldr	r2, [pc, #464]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff fb85 	bl	80017cc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff fb81 	bl	80017cc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0c5      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x33a>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fb6f 	bl	80017cc <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff fb6b 	bl	80017cc <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0af      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b56      	ldr	r3, [pc, #344]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a55      	ldr	r2, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 809b 	beq.w	8002266 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d05c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d141      	bne.n	80021c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x4ec>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fb3f 	bl	80017cc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fb3b 	bl	80017cc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e081      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002164:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	019b      	lsls	r3, r3, #6
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	3b01      	subs	r3, #1
 800218a:	041b      	lsls	r3, r3, #16
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	4937      	ldr	r1, [pc, #220]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219a:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCC_OscConfig+0x4ec>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fb14 	bl	80017cc <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff fb10 	bl	80017cc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e056      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x41c>
 80021c6:	e04e      	b.n	8002266 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x4ec>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fafd 	bl	80017cc <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff faf9 	bl	80017cc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e03f      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x44a>
 80021f4:	e037      	b.n	8002266 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e032      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_RCC_OscConfig+0x4e8>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d028      	beq.n	8002262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d121      	bne.n	8002262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d11a      	bne.n	8002262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800223a:	4293      	cmp	r3, r2
 800223c:	d111      	bne.n	8002262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40007000 	.word	0x40007000
 8002274:	40023800 	.word	0x40023800
 8002278:	42470060 	.word	0x42470060

0800227c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0cc      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d90c      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	494d      	ldr	r1, [pc, #308]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d044      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d119      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d003      	beq.n	800233a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002336:	2b03      	cmp	r3, #3
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e067      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4934      	ldr	r1, [pc, #208]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7ff fa2e 	bl	80017cc <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff fa2a 	bl	80017cc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e04f      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d20c      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e032      	b.n	800242a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002402:	f000 f821 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	490a      	ldr	r1, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f98e 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00
 8002438:	40023800 	.word	0x40023800
 800243c:	080039ac 	.word	0x080039ac
 8002440:	20000010 	.word	0x20000010
 8002444:	20000014 	.word	0x20000014

08002448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	2300      	movs	r3, #0
 800245a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002460:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d00d      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x40>
 800246c:	2b08      	cmp	r3, #8
 800246e:	f200 80bd 	bhi.w	80025ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x34>
 8002476:	2b04      	cmp	r3, #4
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x3a>
 800247a:	e0b7      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800247e:	60bb      	str	r3, [r7, #8]
       break;
 8002480:	e0b7      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002482:	4b61      	ldr	r3, [pc, #388]	; (8002608 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002484:	60bb      	str	r3, [r7, #8]
      break;
 8002486:	e0b4      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002488:	4b5d      	ldr	r3, [pc, #372]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002490:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002492:	4b5b      	ldr	r3, [pc, #364]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04d      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b58      	ldr	r3, [pc, #352]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	461a      	mov	r2, r3
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024ae:	f04f 0100 	mov.w	r1, #0
 80024b2:	ea02 0800 	and.w	r8, r2, r0
 80024b6:	ea03 0901 	and.w	r9, r3, r1
 80024ba:	4640      	mov	r0, r8
 80024bc:	4649      	mov	r1, r9
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	014b      	lsls	r3, r1, #5
 80024c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024cc:	0142      	lsls	r2, r0, #5
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	ebb0 0008 	subs.w	r0, r0, r8
 80024d6:	eb61 0109 	sbc.w	r1, r1, r9
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	018b      	lsls	r3, r1, #6
 80024e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024e8:	0182      	lsls	r2, r0, #6
 80024ea:	1a12      	subs	r2, r2, r0
 80024ec:	eb63 0301 	sbc.w	r3, r3, r1
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	00d9      	lsls	r1, r3, #3
 80024fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024fe:	00d0      	lsls	r0, r2, #3
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	eb12 0208 	adds.w	r2, r2, r8
 8002508:	eb43 0309 	adc.w	r3, r3, r9
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	0259      	lsls	r1, r3, #9
 8002516:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800251a:	0250      	lsls	r0, r2, #9
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	461a      	mov	r2, r3
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f7fd fec0 	bl	80002b0 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4613      	mov	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e04a      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	461a      	mov	r2, r3
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800254a:	f04f 0100 	mov.w	r1, #0
 800254e:	ea02 0400 	and.w	r4, r2, r0
 8002552:	ea03 0501 	and.w	r5, r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	014b      	lsls	r3, r1, #5
 8002564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002568:	0142      	lsls	r2, r0, #5
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	1b00      	subs	r0, r0, r4
 8002570:	eb61 0105 	sbc.w	r1, r1, r5
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	018b      	lsls	r3, r1, #6
 800257e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002582:	0182      	lsls	r2, r0, #6
 8002584:	1a12      	subs	r2, r2, r0
 8002586:	eb63 0301 	sbc.w	r3, r3, r1
 800258a:	f04f 0000 	mov.w	r0, #0
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	00d9      	lsls	r1, r3, #3
 8002594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002598:	00d0      	lsls	r0, r2, #3
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	1912      	adds	r2, r2, r4
 80025a0:	eb45 0303 	adc.w	r3, r5, r3
 80025a4:	f04f 0000 	mov.w	r0, #0
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	0299      	lsls	r1, r3, #10
 80025ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025b2:	0290      	lsls	r0, r2, #10
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	f7fd fe74 	bl	80002b0 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	3301      	adds	r3, #1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	60bb      	str	r3, [r7, #8]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025ee:	60bb      	str	r3, [r7, #8]
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	68bb      	ldr	r3, [r7, #8]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	00f42400 	.word	0x00f42400
 8002608:	007a1200 	.word	0x007a1200

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_RCC_GetHCLKFreq+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000010 	.word	0x20000010

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002628:	f7ff fff0 	bl	800260c <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	080039bc 	.word	0x080039bc

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002650:	f7ff ffdc 	bl	800260c <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0b5b      	lsrs	r3, r3, #13
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	080039bc 	.word	0x080039bc

08002674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e03f      	b.n	8002706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fef4 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f829 	bl	8002710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002714:	b09f      	sub	sp, #124	; 0x7c
 8002716:	af00      	add	r7, sp, #0
 8002718:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	ea40 0301 	orr.w	r3, r0, r1
 8002730:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	431a      	orrs	r2, r3
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	431a      	orrs	r2, r3
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4313      	orrs	r3, r2
 8002748:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002754:	f021 010c 	bic.w	r1, r1, #12
 8002758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800275e:	430b      	orrs	r3, r1
 8002760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	6999      	ldr	r1, [r3, #24]
 8002770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	ea40 0301 	orr.w	r3, r0, r1
 8002778:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4bc5      	ldr	r3, [pc, #788]	; (8002a94 <UART_SetConfig+0x384>)
 8002780:	429a      	cmp	r2, r3
 8002782:	d004      	beq.n	800278e <UART_SetConfig+0x7e>
 8002784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4bc3      	ldr	r3, [pc, #780]	; (8002a98 <UART_SetConfig+0x388>)
 800278a:	429a      	cmp	r2, r3
 800278c:	d103      	bne.n	8002796 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800278e:	f7ff ff5d 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 8002792:	6778      	str	r0, [r7, #116]	; 0x74
 8002794:	e002      	b.n	800279c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002796:	f7ff ff45 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 800279a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a4:	f040 80b6 	bne.w	8002914 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027aa:	461c      	mov	r4, r3
 80027ac:	f04f 0500 	mov.w	r5, #0
 80027b0:	4622      	mov	r2, r4
 80027b2:	462b      	mov	r3, r5
 80027b4:	1891      	adds	r1, r2, r2
 80027b6:	6439      	str	r1, [r7, #64]	; 0x40
 80027b8:	415b      	adcs	r3, r3
 80027ba:	647b      	str	r3, [r7, #68]	; 0x44
 80027bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027c0:	1912      	adds	r2, r2, r4
 80027c2:	eb45 0303 	adc.w	r3, r5, r3
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	00d9      	lsls	r1, r3, #3
 80027d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027d4:	00d0      	lsls	r0, r2, #3
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	1911      	adds	r1, r2, r4
 80027dc:	6639      	str	r1, [r7, #96]	; 0x60
 80027de:	416b      	adcs	r3, r5
 80027e0:	667b      	str	r3, [r7, #100]	; 0x64
 80027e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80027f0:	415b      	adcs	r3, r3
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027fc:	f7fd fd58 	bl	80002b0 <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4ba5      	ldr	r3, [pc, #660]	; (8002a9c <UART_SetConfig+0x38c>)
 8002806:	fba3 2302 	umull	r2, r3, r3, r2
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	011e      	lsls	r6, r3, #4
 800280e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002810:	461c      	mov	r4, r3
 8002812:	f04f 0500 	mov.w	r5, #0
 8002816:	4622      	mov	r2, r4
 8002818:	462b      	mov	r3, r5
 800281a:	1891      	adds	r1, r2, r2
 800281c:	6339      	str	r1, [r7, #48]	; 0x30
 800281e:	415b      	adcs	r3, r3
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
 8002822:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002826:	1912      	adds	r2, r2, r4
 8002828:	eb45 0303 	adc.w	r3, r5, r3
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	00d9      	lsls	r1, r3, #3
 8002836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800283a:	00d0      	lsls	r0, r2, #3
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	1911      	adds	r1, r2, r4
 8002842:	65b9      	str	r1, [r7, #88]	; 0x58
 8002844:	416b      	adcs	r3, r5
 8002846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	461a      	mov	r2, r3
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	1891      	adds	r1, r2, r2
 8002854:	62b9      	str	r1, [r7, #40]	; 0x28
 8002856:	415b      	adcs	r3, r3
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800285e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002862:	f7fd fd25 	bl	80002b0 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <UART_SetConfig+0x38c>)
 800286c:	fba3 1302 	umull	r1, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2164      	movs	r1, #100	; 0x64
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3332      	adds	r3, #50	; 0x32
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <UART_SetConfig+0x38c>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800288c:	441e      	add	r6, r3
 800288e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002890:	4618      	mov	r0, r3
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	1894      	adds	r4, r2, r2
 800289c:	623c      	str	r4, [r7, #32]
 800289e:	415b      	adcs	r3, r3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a6:	1812      	adds	r2, r2, r0
 80028a8:	eb41 0303 	adc.w	r3, r1, r3
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	f04f 0500 	mov.w	r5, #0
 80028b4:	00dd      	lsls	r5, r3, #3
 80028b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80028ba:	00d4      	lsls	r4, r2, #3
 80028bc:	4622      	mov	r2, r4
 80028be:	462b      	mov	r3, r5
 80028c0:	1814      	adds	r4, r2, r0
 80028c2:	653c      	str	r4, [r7, #80]	; 0x50
 80028c4:	414b      	adcs	r3, r1
 80028c6:	657b      	str	r3, [r7, #84]	; 0x54
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	1891      	adds	r1, r2, r2
 80028d4:	61b9      	str	r1, [r7, #24]
 80028d6:	415b      	adcs	r3, r3
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028e2:	f7fd fce5 	bl	80002b0 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4b6c      	ldr	r3, [pc, #432]	; (8002a9c <UART_SetConfig+0x38c>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2164      	movs	r1, #100	; 0x64
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <UART_SetConfig+0x38c>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4432      	add	r2, r6
 8002910:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002912:	e0b9      	b.n	8002a88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002916:	461c      	mov	r4, r3
 8002918:	f04f 0500 	mov.w	r5, #0
 800291c:	4622      	mov	r2, r4
 800291e:	462b      	mov	r3, r5
 8002920:	1891      	adds	r1, r2, r2
 8002922:	6139      	str	r1, [r7, #16]
 8002924:	415b      	adcs	r3, r3
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800292c:	1912      	adds	r2, r2, r4
 800292e:	eb45 0303 	adc.w	r3, r5, r3
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	00d9      	lsls	r1, r3, #3
 800293c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002940:	00d0      	lsls	r0, r2, #3
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	eb12 0804 	adds.w	r8, r2, r4
 800294a:	eb43 0905 	adc.w	r9, r3, r5
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	008b      	lsls	r3, r1, #2
 8002962:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002966:	0082      	lsls	r2, r0, #2
 8002968:	4640      	mov	r0, r8
 800296a:	4649      	mov	r1, r9
 800296c:	f7fd fca0 	bl	80002b0 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <UART_SetConfig+0x38c>)
 8002976:	fba3 2302 	umull	r2, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	011e      	lsls	r6, r3, #4
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	4618      	mov	r0, r3
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	1894      	adds	r4, r2, r2
 800298c:	60bc      	str	r4, [r7, #8]
 800298e:	415b      	adcs	r3, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002996:	1812      	adds	r2, r2, r0
 8002998:	eb41 0303 	adc.w	r3, r1, r3
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	f04f 0500 	mov.w	r5, #0
 80029a4:	00dd      	lsls	r5, r3, #3
 80029a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029aa:	00d4      	lsls	r4, r2, #3
 80029ac:	4622      	mov	r2, r4
 80029ae:	462b      	mov	r3, r5
 80029b0:	1814      	adds	r4, r2, r0
 80029b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80029b4:	414b      	adcs	r3, r1
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	008b      	lsls	r3, r1, #2
 80029cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029d0:	0082      	lsls	r2, r0, #2
 80029d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029d6:	f7fd fc6b 	bl	80002b0 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <UART_SetConfig+0x38c>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <UART_SetConfig+0x38c>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fe:	441e      	add	r6, r3
 8002a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a02:	4618      	mov	r0, r3
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	1894      	adds	r4, r2, r2
 8002a0e:	603c      	str	r4, [r7, #0]
 8002a10:	415b      	adcs	r3, r3
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a18:	1812      	adds	r2, r2, r0
 8002a1a:	eb41 0303 	adc.w	r3, r1, r3
 8002a1e:	f04f 0400 	mov.w	r4, #0
 8002a22:	f04f 0500 	mov.w	r5, #0
 8002a26:	00dd      	lsls	r5, r3, #3
 8002a28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a2c:	00d4      	lsls	r4, r2, #3
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	eb12 0a00 	adds.w	sl, r2, r0
 8002a36:	eb43 0b01 	adc.w	fp, r3, r1
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	008b      	lsls	r3, r1, #2
 8002a4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a52:	0082      	lsls	r2, r0, #2
 8002a54:	4650      	mov	r0, sl
 8002a56:	4659      	mov	r1, fp
 8002a58:	f7fd fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <UART_SetConfig+0x38c>)
 8002a62:	fba3 1302 	umull	r1, r3, r3, r2
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2164      	movs	r1, #100	; 0x64
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	3332      	adds	r3, #50	; 0x32
 8002a74:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <UART_SetConfig+0x38c>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4432      	add	r2, r6
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	377c      	adds	r7, #124	; 0x7c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40011000 	.word	0x40011000
 8002a98:	40011400 	.word	0x40011400
 8002a9c:	51eb851f 	.word	0x51eb851f

08002aa0 <__errno>:
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <__errno+0x8>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000001c 	.word	0x2000001c

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4d0d      	ldr	r5, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1b64      	subs	r4, r4, r5
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	42a6      	cmp	r6, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4d0b      	ldr	r5, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 fc5c 	bl	800337c <_init>
 8002ac4:	1b64      	subs	r4, r4, r5
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2600      	movs	r6, #0
 8002aca:	42a6      	cmp	r6, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad4:	4798      	blx	r3
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ade:	4798      	blx	r3
 8002ae0:	3601      	adds	r6, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08003a00 	.word	0x08003a00
 8002ae8:	08003a00 	.word	0x08003a00
 8002aec:	08003a00 	.word	0x08003a00
 8002af0:	08003a04 	.word	0x08003a04

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <siprintf>:
 8002b04:	b40e      	push	{r1, r2, r3}
 8002b06:	b500      	push	{lr}
 8002b08:	b09c      	sub	sp, #112	; 0x70
 8002b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b0c:	9002      	str	r0, [sp, #8]
 8002b0e:	9006      	str	r0, [sp, #24]
 8002b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b14:	4809      	ldr	r0, [pc, #36]	; (8002b3c <siprintf+0x38>)
 8002b16:	9107      	str	r1, [sp, #28]
 8002b18:	9104      	str	r1, [sp, #16]
 8002b1a:	4909      	ldr	r1, [pc, #36]	; (8002b40 <siprintf+0x3c>)
 8002b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b20:	9105      	str	r1, [sp, #20]
 8002b22:	6800      	ldr	r0, [r0, #0]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	a902      	add	r1, sp, #8
 8002b28:	f000 f876 	bl	8002c18 <_svfiprintf_r>
 8002b2c:	9b02      	ldr	r3, [sp, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	b01c      	add	sp, #112	; 0x70
 8002b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b38:	b003      	add	sp, #12
 8002b3a:	4770      	bx	lr
 8002b3c:	2000001c 	.word	0x2000001c
 8002b40:	ffff0208 	.word	0xffff0208

08002b44 <strcat>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4602      	mov	r2, r0
 8002b48:	7814      	ldrb	r4, [r2, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	3201      	adds	r2, #1
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d1fa      	bne.n	8002b48 <strcat+0x4>
 8002b52:	3b01      	subs	r3, #1
 8002b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d1f9      	bne.n	8002b54 <strcat+0x10>
 8002b60:	bd10      	pop	{r4, pc}

08002b62 <__ssputs_r>:
 8002b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b66:	688e      	ldr	r6, [r1, #8]
 8002b68:	429e      	cmp	r6, r3
 8002b6a:	4682      	mov	sl, r0
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	4690      	mov	r8, r2
 8002b70:	461f      	mov	r7, r3
 8002b72:	d838      	bhi.n	8002be6 <__ssputs_r+0x84>
 8002b74:	898a      	ldrh	r2, [r1, #12]
 8002b76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b7a:	d032      	beq.n	8002be2 <__ssputs_r+0x80>
 8002b7c:	6825      	ldr	r5, [r4, #0]
 8002b7e:	6909      	ldr	r1, [r1, #16]
 8002b80:	eba5 0901 	sub.w	r9, r5, r1
 8002b84:	6965      	ldr	r5, [r4, #20]
 8002b86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b8e:	3301      	adds	r3, #1
 8002b90:	444b      	add	r3, r9
 8002b92:	106d      	asrs	r5, r5, #1
 8002b94:	429d      	cmp	r5, r3
 8002b96:	bf38      	it	cc
 8002b98:	461d      	movcc	r5, r3
 8002b9a:	0553      	lsls	r3, r2, #21
 8002b9c:	d531      	bpl.n	8002c02 <__ssputs_r+0xa0>
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f000 fb46 	bl	8003230 <_malloc_r>
 8002ba4:	4606      	mov	r6, r0
 8002ba6:	b950      	cbnz	r0, 8002bbe <__ssputs_r+0x5c>
 8002ba8:	230c      	movs	r3, #12
 8002baa:	f8ca 3000 	str.w	r3, [sl]
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb4:	81a3      	strh	r3, [r4, #12]
 8002bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bbe:	6921      	ldr	r1, [r4, #16]
 8002bc0:	464a      	mov	r2, r9
 8002bc2:	f000 fabd 	bl	8003140 <memcpy>
 8002bc6:	89a3      	ldrh	r3, [r4, #12]
 8002bc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	6126      	str	r6, [r4, #16]
 8002bd4:	6165      	str	r5, [r4, #20]
 8002bd6:	444e      	add	r6, r9
 8002bd8:	eba5 0509 	sub.w	r5, r5, r9
 8002bdc:	6026      	str	r6, [r4, #0]
 8002bde:	60a5      	str	r5, [r4, #8]
 8002be0:	463e      	mov	r6, r7
 8002be2:	42be      	cmp	r6, r7
 8002be4:	d900      	bls.n	8002be8 <__ssputs_r+0x86>
 8002be6:	463e      	mov	r6, r7
 8002be8:	4632      	mov	r2, r6
 8002bea:	6820      	ldr	r0, [r4, #0]
 8002bec:	4641      	mov	r1, r8
 8002bee:	f000 fab5 	bl	800315c <memmove>
 8002bf2:	68a3      	ldr	r3, [r4, #8]
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	1b9b      	subs	r3, r3, r6
 8002bf8:	4432      	add	r2, r6
 8002bfa:	60a3      	str	r3, [r4, #8]
 8002bfc:	6022      	str	r2, [r4, #0]
 8002bfe:	2000      	movs	r0, #0
 8002c00:	e7db      	b.n	8002bba <__ssputs_r+0x58>
 8002c02:	462a      	mov	r2, r5
 8002c04:	f000 fb6e 	bl	80032e4 <_realloc_r>
 8002c08:	4606      	mov	r6, r0
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d1e1      	bne.n	8002bd2 <__ssputs_r+0x70>
 8002c0e:	6921      	ldr	r1, [r4, #16]
 8002c10:	4650      	mov	r0, sl
 8002c12:	f000 fabd 	bl	8003190 <_free_r>
 8002c16:	e7c7      	b.n	8002ba8 <__ssputs_r+0x46>

08002c18 <_svfiprintf_r>:
 8002c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1c:	4698      	mov	r8, r3
 8002c1e:	898b      	ldrh	r3, [r1, #12]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	b09d      	sub	sp, #116	; 0x74
 8002c24:	4607      	mov	r7, r0
 8002c26:	460d      	mov	r5, r1
 8002c28:	4614      	mov	r4, r2
 8002c2a:	d50e      	bpl.n	8002c4a <_svfiprintf_r+0x32>
 8002c2c:	690b      	ldr	r3, [r1, #16]
 8002c2e:	b963      	cbnz	r3, 8002c4a <_svfiprintf_r+0x32>
 8002c30:	2140      	movs	r1, #64	; 0x40
 8002c32:	f000 fafd 	bl	8003230 <_malloc_r>
 8002c36:	6028      	str	r0, [r5, #0]
 8002c38:	6128      	str	r0, [r5, #16]
 8002c3a:	b920      	cbnz	r0, 8002c46 <_svfiprintf_r+0x2e>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	e0d1      	b.n	8002dea <_svfiprintf_r+0x1d2>
 8002c46:	2340      	movs	r3, #64	; 0x40
 8002c48:	616b      	str	r3, [r5, #20]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4e:	2320      	movs	r3, #32
 8002c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c58:	2330      	movs	r3, #48	; 0x30
 8002c5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e04 <_svfiprintf_r+0x1ec>
 8002c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c62:	f04f 0901 	mov.w	r9, #1
 8002c66:	4623      	mov	r3, r4
 8002c68:	469a      	mov	sl, r3
 8002c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c6e:	b10a      	cbz	r2, 8002c74 <_svfiprintf_r+0x5c>
 8002c70:	2a25      	cmp	r2, #37	; 0x25
 8002c72:	d1f9      	bne.n	8002c68 <_svfiprintf_r+0x50>
 8002c74:	ebba 0b04 	subs.w	fp, sl, r4
 8002c78:	d00b      	beq.n	8002c92 <_svfiprintf_r+0x7a>
 8002c7a:	465b      	mov	r3, fp
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4629      	mov	r1, r5
 8002c80:	4638      	mov	r0, r7
 8002c82:	f7ff ff6e 	bl	8002b62 <__ssputs_r>
 8002c86:	3001      	adds	r0, #1
 8002c88:	f000 80aa 	beq.w	8002de0 <_svfiprintf_r+0x1c8>
 8002c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c8e:	445a      	add	r2, fp
 8002c90:	9209      	str	r2, [sp, #36]	; 0x24
 8002c92:	f89a 3000 	ldrb.w	r3, [sl]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80a2 	beq.w	8002de0 <_svfiprintf_r+0x1c8>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ca6:	f10a 0a01 	add.w	sl, sl, #1
 8002caa:	9304      	str	r3, [sp, #16]
 8002cac:	9307      	str	r3, [sp, #28]
 8002cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8002cb4:	4654      	mov	r4, sl
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cbc:	4851      	ldr	r0, [pc, #324]	; (8002e04 <_svfiprintf_r+0x1ec>)
 8002cbe:	f7fd faa7 	bl	8000210 <memchr>
 8002cc2:	9a04      	ldr	r2, [sp, #16]
 8002cc4:	b9d8      	cbnz	r0, 8002cfe <_svfiprintf_r+0xe6>
 8002cc6:	06d0      	lsls	r0, r2, #27
 8002cc8:	bf44      	itt	mi
 8002cca:	2320      	movmi	r3, #32
 8002ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cd0:	0711      	lsls	r1, r2, #28
 8002cd2:	bf44      	itt	mi
 8002cd4:	232b      	movmi	r3, #43	; 0x2b
 8002cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cda:	f89a 3000 	ldrb.w	r3, [sl]
 8002cde:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce0:	d015      	beq.n	8002d0e <_svfiprintf_r+0xf6>
 8002ce2:	9a07      	ldr	r2, [sp, #28]
 8002ce4:	4654      	mov	r4, sl
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f04f 0c0a 	mov.w	ip, #10
 8002cec:	4621      	mov	r1, r4
 8002cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cf2:	3b30      	subs	r3, #48	; 0x30
 8002cf4:	2b09      	cmp	r3, #9
 8002cf6:	d94e      	bls.n	8002d96 <_svfiprintf_r+0x17e>
 8002cf8:	b1b0      	cbz	r0, 8002d28 <_svfiprintf_r+0x110>
 8002cfa:	9207      	str	r2, [sp, #28]
 8002cfc:	e014      	b.n	8002d28 <_svfiprintf_r+0x110>
 8002cfe:	eba0 0308 	sub.w	r3, r0, r8
 8002d02:	fa09 f303 	lsl.w	r3, r9, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	9304      	str	r3, [sp, #16]
 8002d0a:	46a2      	mov	sl, r4
 8002d0c:	e7d2      	b.n	8002cb4 <_svfiprintf_r+0x9c>
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	1d19      	adds	r1, r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	9103      	str	r1, [sp, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfbb      	ittet	lt
 8002d1a:	425b      	neglt	r3, r3
 8002d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d20:	9307      	strge	r3, [sp, #28]
 8002d22:	9307      	strlt	r3, [sp, #28]
 8002d24:	bfb8      	it	lt
 8002d26:	9204      	strlt	r2, [sp, #16]
 8002d28:	7823      	ldrb	r3, [r4, #0]
 8002d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d2c:	d10c      	bne.n	8002d48 <_svfiprintf_r+0x130>
 8002d2e:	7863      	ldrb	r3, [r4, #1]
 8002d30:	2b2a      	cmp	r3, #42	; 0x2a
 8002d32:	d135      	bne.n	8002da0 <_svfiprintf_r+0x188>
 8002d34:	9b03      	ldr	r3, [sp, #12]
 8002d36:	1d1a      	adds	r2, r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	9203      	str	r2, [sp, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bfb8      	it	lt
 8002d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d44:	3402      	adds	r4, #2
 8002d46:	9305      	str	r3, [sp, #20]
 8002d48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e14 <_svfiprintf_r+0x1fc>
 8002d4c:	7821      	ldrb	r1, [r4, #0]
 8002d4e:	2203      	movs	r2, #3
 8002d50:	4650      	mov	r0, sl
 8002d52:	f7fd fa5d 	bl	8000210 <memchr>
 8002d56:	b140      	cbz	r0, 8002d6a <_svfiprintf_r+0x152>
 8002d58:	2340      	movs	r3, #64	; 0x40
 8002d5a:	eba0 000a 	sub.w	r0, r0, sl
 8002d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8002d62:	9b04      	ldr	r3, [sp, #16]
 8002d64:	4303      	orrs	r3, r0
 8002d66:	3401      	adds	r4, #1
 8002d68:	9304      	str	r3, [sp, #16]
 8002d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6e:	4826      	ldr	r0, [pc, #152]	; (8002e08 <_svfiprintf_r+0x1f0>)
 8002d70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d74:	2206      	movs	r2, #6
 8002d76:	f7fd fa4b 	bl	8000210 <memchr>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d038      	beq.n	8002df0 <_svfiprintf_r+0x1d8>
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <_svfiprintf_r+0x1f4>)
 8002d80:	bb1b      	cbnz	r3, 8002dca <_svfiprintf_r+0x1b2>
 8002d82:	9b03      	ldr	r3, [sp, #12]
 8002d84:	3307      	adds	r3, #7
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	9303      	str	r3, [sp, #12]
 8002d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d90:	4433      	add	r3, r6
 8002d92:	9309      	str	r3, [sp, #36]	; 0x24
 8002d94:	e767      	b.n	8002c66 <_svfiprintf_r+0x4e>
 8002d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	e7a5      	b.n	8002cec <_svfiprintf_r+0xd4>
 8002da0:	2300      	movs	r3, #0
 8002da2:	3401      	adds	r4, #1
 8002da4:	9305      	str	r3, [sp, #20]
 8002da6:	4619      	mov	r1, r3
 8002da8:	f04f 0c0a 	mov.w	ip, #10
 8002dac:	4620      	mov	r0, r4
 8002dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002db2:	3a30      	subs	r2, #48	; 0x30
 8002db4:	2a09      	cmp	r2, #9
 8002db6:	d903      	bls.n	8002dc0 <_svfiprintf_r+0x1a8>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0c5      	beq.n	8002d48 <_svfiprintf_r+0x130>
 8002dbc:	9105      	str	r1, [sp, #20]
 8002dbe:	e7c3      	b.n	8002d48 <_svfiprintf_r+0x130>
 8002dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e7f0      	b.n	8002dac <_svfiprintf_r+0x194>
 8002dca:	ab03      	add	r3, sp, #12
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	462a      	mov	r2, r5
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <_svfiprintf_r+0x1f8>)
 8002dd2:	a904      	add	r1, sp, #16
 8002dd4:	4638      	mov	r0, r7
 8002dd6:	f3af 8000 	nop.w
 8002dda:	1c42      	adds	r2, r0, #1
 8002ddc:	4606      	mov	r6, r0
 8002dde:	d1d6      	bne.n	8002d8e <_svfiprintf_r+0x176>
 8002de0:	89ab      	ldrh	r3, [r5, #12]
 8002de2:	065b      	lsls	r3, r3, #25
 8002de4:	f53f af2c 	bmi.w	8002c40 <_svfiprintf_r+0x28>
 8002de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dea:	b01d      	add	sp, #116	; 0x74
 8002dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df0:	ab03      	add	r3, sp, #12
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	462a      	mov	r2, r5
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <_svfiprintf_r+0x1f8>)
 8002df8:	a904      	add	r1, sp, #16
 8002dfa:	4638      	mov	r0, r7
 8002dfc:	f000 f87a 	bl	8002ef4 <_printf_i>
 8002e00:	e7eb      	b.n	8002dda <_svfiprintf_r+0x1c2>
 8002e02:	bf00      	nop
 8002e04:	080039c4 	.word	0x080039c4
 8002e08:	080039ce 	.word	0x080039ce
 8002e0c:	00000000 	.word	0x00000000
 8002e10:	08002b63 	.word	0x08002b63
 8002e14:	080039ca 	.word	0x080039ca

08002e18 <_printf_common>:
 8002e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1c:	4616      	mov	r6, r2
 8002e1e:	4699      	mov	r9, r3
 8002e20:	688a      	ldr	r2, [r1, #8]
 8002e22:	690b      	ldr	r3, [r1, #16]
 8002e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bfb8      	it	lt
 8002e2c:	4613      	movlt	r3, r2
 8002e2e:	6033      	str	r3, [r6, #0]
 8002e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e34:	4607      	mov	r7, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	b10a      	cbz	r2, 8002e3e <_printf_common+0x26>
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	6033      	str	r3, [r6, #0]
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	0699      	lsls	r1, r3, #26
 8002e42:	bf42      	ittt	mi
 8002e44:	6833      	ldrmi	r3, [r6, #0]
 8002e46:	3302      	addmi	r3, #2
 8002e48:	6033      	strmi	r3, [r6, #0]
 8002e4a:	6825      	ldr	r5, [r4, #0]
 8002e4c:	f015 0506 	ands.w	r5, r5, #6
 8002e50:	d106      	bne.n	8002e60 <_printf_common+0x48>
 8002e52:	f104 0a19 	add.w	sl, r4, #25
 8002e56:	68e3      	ldr	r3, [r4, #12]
 8002e58:	6832      	ldr	r2, [r6, #0]
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	42ab      	cmp	r3, r5
 8002e5e:	dc26      	bgt.n	8002eae <_printf_common+0x96>
 8002e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e64:	1e13      	subs	r3, r2, #0
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	bf18      	it	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	0692      	lsls	r2, r2, #26
 8002e6e:	d42b      	bmi.n	8002ec8 <_printf_common+0xb0>
 8002e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e74:	4649      	mov	r1, r9
 8002e76:	4638      	mov	r0, r7
 8002e78:	47c0      	blx	r8
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	d01e      	beq.n	8002ebc <_printf_common+0xa4>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	68e5      	ldr	r5, [r4, #12]
 8002e82:	6832      	ldr	r2, [r6, #0]
 8002e84:	f003 0306 	and.w	r3, r3, #6
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	bf08      	it	eq
 8002e8c:	1aad      	subeq	r5, r5, r2
 8002e8e:	68a3      	ldr	r3, [r4, #8]
 8002e90:	6922      	ldr	r2, [r4, #16]
 8002e92:	bf0c      	ite	eq
 8002e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e98:	2500      	movne	r5, #0
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	bfc4      	itt	gt
 8002e9e:	1a9b      	subgt	r3, r3, r2
 8002ea0:	18ed      	addgt	r5, r5, r3
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	341a      	adds	r4, #26
 8002ea6:	42b5      	cmp	r5, r6
 8002ea8:	d11a      	bne.n	8002ee0 <_printf_common+0xc8>
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e008      	b.n	8002ec0 <_printf_common+0xa8>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	4652      	mov	r2, sl
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	4638      	mov	r0, r7
 8002eb6:	47c0      	blx	r8
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d103      	bne.n	8002ec4 <_printf_common+0xac>
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec4:	3501      	adds	r5, #1
 8002ec6:	e7c6      	b.n	8002e56 <_printf_common+0x3e>
 8002ec8:	18e1      	adds	r1, r4, r3
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	2030      	movs	r0, #48	; 0x30
 8002ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ed2:	4422      	add	r2, r4
 8002ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002edc:	3302      	adds	r3, #2
 8002ede:	e7c7      	b.n	8002e70 <_printf_common+0x58>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	47c0      	blx	r8
 8002eea:	3001      	adds	r0, #1
 8002eec:	d0e6      	beq.n	8002ebc <_printf_common+0xa4>
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7d9      	b.n	8002ea6 <_printf_common+0x8e>
	...

08002ef4 <_printf_i>:
 8002ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef8:	460c      	mov	r4, r1
 8002efa:	4691      	mov	r9, r2
 8002efc:	7e27      	ldrb	r7, [r4, #24]
 8002efe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f00:	2f78      	cmp	r7, #120	; 0x78
 8002f02:	4680      	mov	r8, r0
 8002f04:	469a      	mov	sl, r3
 8002f06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f0a:	d807      	bhi.n	8002f1c <_printf_i+0x28>
 8002f0c:	2f62      	cmp	r7, #98	; 0x62
 8002f0e:	d80a      	bhi.n	8002f26 <_printf_i+0x32>
 8002f10:	2f00      	cmp	r7, #0
 8002f12:	f000 80d8 	beq.w	80030c6 <_printf_i+0x1d2>
 8002f16:	2f58      	cmp	r7, #88	; 0x58
 8002f18:	f000 80a3 	beq.w	8003062 <_printf_i+0x16e>
 8002f1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f24:	e03a      	b.n	8002f9c <_printf_i+0xa8>
 8002f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f2a:	2b15      	cmp	r3, #21
 8002f2c:	d8f6      	bhi.n	8002f1c <_printf_i+0x28>
 8002f2e:	a001      	add	r0, pc, #4	; (adr r0, 8002f34 <_printf_i+0x40>)
 8002f30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f34:	08002f8d 	.word	0x08002f8d
 8002f38:	08002fa1 	.word	0x08002fa1
 8002f3c:	08002f1d 	.word	0x08002f1d
 8002f40:	08002f1d 	.word	0x08002f1d
 8002f44:	08002f1d 	.word	0x08002f1d
 8002f48:	08002f1d 	.word	0x08002f1d
 8002f4c:	08002fa1 	.word	0x08002fa1
 8002f50:	08002f1d 	.word	0x08002f1d
 8002f54:	08002f1d 	.word	0x08002f1d
 8002f58:	08002f1d 	.word	0x08002f1d
 8002f5c:	08002f1d 	.word	0x08002f1d
 8002f60:	080030ad 	.word	0x080030ad
 8002f64:	08002fd1 	.word	0x08002fd1
 8002f68:	0800308f 	.word	0x0800308f
 8002f6c:	08002f1d 	.word	0x08002f1d
 8002f70:	08002f1d 	.word	0x08002f1d
 8002f74:	080030cf 	.word	0x080030cf
 8002f78:	08002f1d 	.word	0x08002f1d
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08002f1d 	.word	0x08002f1d
 8002f84:	08002f1d 	.word	0x08002f1d
 8002f88:	08003097 	.word	0x08003097
 8002f8c:	680b      	ldr	r3, [r1, #0]
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	600a      	str	r2, [r1, #0]
 8002f94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0a3      	b.n	80030e8 <_printf_i+0x1f4>
 8002fa0:	6825      	ldr	r5, [r4, #0]
 8002fa2:	6808      	ldr	r0, [r1, #0]
 8002fa4:	062e      	lsls	r6, r5, #24
 8002fa6:	f100 0304 	add.w	r3, r0, #4
 8002faa:	d50a      	bpl.n	8002fc2 <_printf_i+0xce>
 8002fac:	6805      	ldr	r5, [r0, #0]
 8002fae:	600b      	str	r3, [r1, #0]
 8002fb0:	2d00      	cmp	r5, #0
 8002fb2:	da03      	bge.n	8002fbc <_printf_i+0xc8>
 8002fb4:	232d      	movs	r3, #45	; 0x2d
 8002fb6:	426d      	negs	r5, r5
 8002fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fbc:	485e      	ldr	r0, [pc, #376]	; (8003138 <_printf_i+0x244>)
 8002fbe:	230a      	movs	r3, #10
 8002fc0:	e019      	b.n	8002ff6 <_printf_i+0x102>
 8002fc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fc6:	6805      	ldr	r5, [r0, #0]
 8002fc8:	600b      	str	r3, [r1, #0]
 8002fca:	bf18      	it	ne
 8002fcc:	b22d      	sxthne	r5, r5
 8002fce:	e7ef      	b.n	8002fb0 <_printf_i+0xbc>
 8002fd0:	680b      	ldr	r3, [r1, #0]
 8002fd2:	6825      	ldr	r5, [r4, #0]
 8002fd4:	1d18      	adds	r0, r3, #4
 8002fd6:	6008      	str	r0, [r1, #0]
 8002fd8:	0628      	lsls	r0, r5, #24
 8002fda:	d501      	bpl.n	8002fe0 <_printf_i+0xec>
 8002fdc:	681d      	ldr	r5, [r3, #0]
 8002fde:	e002      	b.n	8002fe6 <_printf_i+0xf2>
 8002fe0:	0669      	lsls	r1, r5, #25
 8002fe2:	d5fb      	bpl.n	8002fdc <_printf_i+0xe8>
 8002fe4:	881d      	ldrh	r5, [r3, #0]
 8002fe6:	4854      	ldr	r0, [pc, #336]	; (8003138 <_printf_i+0x244>)
 8002fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8002fea:	bf0c      	ite	eq
 8002fec:	2308      	moveq	r3, #8
 8002fee:	230a      	movne	r3, #10
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ff6:	6866      	ldr	r6, [r4, #4]
 8002ff8:	60a6      	str	r6, [r4, #8]
 8002ffa:	2e00      	cmp	r6, #0
 8002ffc:	bfa2      	ittt	ge
 8002ffe:	6821      	ldrge	r1, [r4, #0]
 8003000:	f021 0104 	bicge.w	r1, r1, #4
 8003004:	6021      	strge	r1, [r4, #0]
 8003006:	b90d      	cbnz	r5, 800300c <_printf_i+0x118>
 8003008:	2e00      	cmp	r6, #0
 800300a:	d04d      	beq.n	80030a8 <_printf_i+0x1b4>
 800300c:	4616      	mov	r6, r2
 800300e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003012:	fb03 5711 	mls	r7, r3, r1, r5
 8003016:	5dc7      	ldrb	r7, [r0, r7]
 8003018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800301c:	462f      	mov	r7, r5
 800301e:	42bb      	cmp	r3, r7
 8003020:	460d      	mov	r5, r1
 8003022:	d9f4      	bls.n	800300e <_printf_i+0x11a>
 8003024:	2b08      	cmp	r3, #8
 8003026:	d10b      	bne.n	8003040 <_printf_i+0x14c>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	07df      	lsls	r7, r3, #31
 800302c:	d508      	bpl.n	8003040 <_printf_i+0x14c>
 800302e:	6923      	ldr	r3, [r4, #16]
 8003030:	6861      	ldr	r1, [r4, #4]
 8003032:	4299      	cmp	r1, r3
 8003034:	bfde      	ittt	le
 8003036:	2330      	movle	r3, #48	; 0x30
 8003038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800303c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003040:	1b92      	subs	r2, r2, r6
 8003042:	6122      	str	r2, [r4, #16]
 8003044:	f8cd a000 	str.w	sl, [sp]
 8003048:	464b      	mov	r3, r9
 800304a:	aa03      	add	r2, sp, #12
 800304c:	4621      	mov	r1, r4
 800304e:	4640      	mov	r0, r8
 8003050:	f7ff fee2 	bl	8002e18 <_printf_common>
 8003054:	3001      	adds	r0, #1
 8003056:	d14c      	bne.n	80030f2 <_printf_i+0x1fe>
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	b004      	add	sp, #16
 800305e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003062:	4835      	ldr	r0, [pc, #212]	; (8003138 <_printf_i+0x244>)
 8003064:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	680e      	ldr	r6, [r1, #0]
 800306c:	061f      	lsls	r7, r3, #24
 800306e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003072:	600e      	str	r6, [r1, #0]
 8003074:	d514      	bpl.n	80030a0 <_printf_i+0x1ac>
 8003076:	07d9      	lsls	r1, r3, #31
 8003078:	bf44      	itt	mi
 800307a:	f043 0320 	orrmi.w	r3, r3, #32
 800307e:	6023      	strmi	r3, [r4, #0]
 8003080:	b91d      	cbnz	r5, 800308a <_printf_i+0x196>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	f023 0320 	bic.w	r3, r3, #32
 8003088:	6023      	str	r3, [r4, #0]
 800308a:	2310      	movs	r3, #16
 800308c:	e7b0      	b.n	8002ff0 <_printf_i+0xfc>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	f043 0320 	orr.w	r3, r3, #32
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	2378      	movs	r3, #120	; 0x78
 8003098:	4828      	ldr	r0, [pc, #160]	; (800313c <_printf_i+0x248>)
 800309a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800309e:	e7e3      	b.n	8003068 <_printf_i+0x174>
 80030a0:	065e      	lsls	r6, r3, #25
 80030a2:	bf48      	it	mi
 80030a4:	b2ad      	uxthmi	r5, r5
 80030a6:	e7e6      	b.n	8003076 <_printf_i+0x182>
 80030a8:	4616      	mov	r6, r2
 80030aa:	e7bb      	b.n	8003024 <_printf_i+0x130>
 80030ac:	680b      	ldr	r3, [r1, #0]
 80030ae:	6826      	ldr	r6, [r4, #0]
 80030b0:	6960      	ldr	r0, [r4, #20]
 80030b2:	1d1d      	adds	r5, r3, #4
 80030b4:	600d      	str	r5, [r1, #0]
 80030b6:	0635      	lsls	r5, r6, #24
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	d501      	bpl.n	80030c0 <_printf_i+0x1cc>
 80030bc:	6018      	str	r0, [r3, #0]
 80030be:	e002      	b.n	80030c6 <_printf_i+0x1d2>
 80030c0:	0671      	lsls	r1, r6, #25
 80030c2:	d5fb      	bpl.n	80030bc <_printf_i+0x1c8>
 80030c4:	8018      	strh	r0, [r3, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	6123      	str	r3, [r4, #16]
 80030ca:	4616      	mov	r6, r2
 80030cc:	e7ba      	b.n	8003044 <_printf_i+0x150>
 80030ce:	680b      	ldr	r3, [r1, #0]
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	600a      	str	r2, [r1, #0]
 80030d4:	681e      	ldr	r6, [r3, #0]
 80030d6:	6862      	ldr	r2, [r4, #4]
 80030d8:	2100      	movs	r1, #0
 80030da:	4630      	mov	r0, r6
 80030dc:	f7fd f898 	bl	8000210 <memchr>
 80030e0:	b108      	cbz	r0, 80030e6 <_printf_i+0x1f2>
 80030e2:	1b80      	subs	r0, r0, r6
 80030e4:	6060      	str	r0, [r4, #4]
 80030e6:	6863      	ldr	r3, [r4, #4]
 80030e8:	6123      	str	r3, [r4, #16]
 80030ea:	2300      	movs	r3, #0
 80030ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f0:	e7a8      	b.n	8003044 <_printf_i+0x150>
 80030f2:	6923      	ldr	r3, [r4, #16]
 80030f4:	4632      	mov	r2, r6
 80030f6:	4649      	mov	r1, r9
 80030f8:	4640      	mov	r0, r8
 80030fa:	47d0      	blx	sl
 80030fc:	3001      	adds	r0, #1
 80030fe:	d0ab      	beq.n	8003058 <_printf_i+0x164>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	079b      	lsls	r3, r3, #30
 8003104:	d413      	bmi.n	800312e <_printf_i+0x23a>
 8003106:	68e0      	ldr	r0, [r4, #12]
 8003108:	9b03      	ldr	r3, [sp, #12]
 800310a:	4298      	cmp	r0, r3
 800310c:	bfb8      	it	lt
 800310e:	4618      	movlt	r0, r3
 8003110:	e7a4      	b.n	800305c <_printf_i+0x168>
 8003112:	2301      	movs	r3, #1
 8003114:	4632      	mov	r2, r6
 8003116:	4649      	mov	r1, r9
 8003118:	4640      	mov	r0, r8
 800311a:	47d0      	blx	sl
 800311c:	3001      	adds	r0, #1
 800311e:	d09b      	beq.n	8003058 <_printf_i+0x164>
 8003120:	3501      	adds	r5, #1
 8003122:	68e3      	ldr	r3, [r4, #12]
 8003124:	9903      	ldr	r1, [sp, #12]
 8003126:	1a5b      	subs	r3, r3, r1
 8003128:	42ab      	cmp	r3, r5
 800312a:	dcf2      	bgt.n	8003112 <_printf_i+0x21e>
 800312c:	e7eb      	b.n	8003106 <_printf_i+0x212>
 800312e:	2500      	movs	r5, #0
 8003130:	f104 0619 	add.w	r6, r4, #25
 8003134:	e7f5      	b.n	8003122 <_printf_i+0x22e>
 8003136:	bf00      	nop
 8003138:	080039d5 	.word	0x080039d5
 800313c:	080039e6 	.word	0x080039e6

08003140 <memcpy>:
 8003140:	440a      	add	r2, r1
 8003142:	4291      	cmp	r1, r2
 8003144:	f100 33ff 	add.w	r3, r0, #4294967295
 8003148:	d100      	bne.n	800314c <memcpy+0xc>
 800314a:	4770      	bx	lr
 800314c:	b510      	push	{r4, lr}
 800314e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003156:	4291      	cmp	r1, r2
 8003158:	d1f9      	bne.n	800314e <memcpy+0xe>
 800315a:	bd10      	pop	{r4, pc}

0800315c <memmove>:
 800315c:	4288      	cmp	r0, r1
 800315e:	b510      	push	{r4, lr}
 8003160:	eb01 0402 	add.w	r4, r1, r2
 8003164:	d902      	bls.n	800316c <memmove+0x10>
 8003166:	4284      	cmp	r4, r0
 8003168:	4623      	mov	r3, r4
 800316a:	d807      	bhi.n	800317c <memmove+0x20>
 800316c:	1e43      	subs	r3, r0, #1
 800316e:	42a1      	cmp	r1, r4
 8003170:	d008      	beq.n	8003184 <memmove+0x28>
 8003172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800317a:	e7f8      	b.n	800316e <memmove+0x12>
 800317c:	4402      	add	r2, r0
 800317e:	4601      	mov	r1, r0
 8003180:	428a      	cmp	r2, r1
 8003182:	d100      	bne.n	8003186 <memmove+0x2a>
 8003184:	bd10      	pop	{r4, pc}
 8003186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800318a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800318e:	e7f7      	b.n	8003180 <memmove+0x24>

08003190 <_free_r>:
 8003190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003192:	2900      	cmp	r1, #0
 8003194:	d048      	beq.n	8003228 <_free_r+0x98>
 8003196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800319a:	9001      	str	r0, [sp, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f1a1 0404 	sub.w	r4, r1, #4
 80031a2:	bfb8      	it	lt
 80031a4:	18e4      	addlt	r4, r4, r3
 80031a6:	f000 f8d3 	bl	8003350 <__malloc_lock>
 80031aa:	4a20      	ldr	r2, [pc, #128]	; (800322c <_free_r+0x9c>)
 80031ac:	9801      	ldr	r0, [sp, #4]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	4615      	mov	r5, r2
 80031b2:	b933      	cbnz	r3, 80031c2 <_free_r+0x32>
 80031b4:	6063      	str	r3, [r4, #4]
 80031b6:	6014      	str	r4, [r2, #0]
 80031b8:	b003      	add	sp, #12
 80031ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031be:	f000 b8cd 	b.w	800335c <__malloc_unlock>
 80031c2:	42a3      	cmp	r3, r4
 80031c4:	d90b      	bls.n	80031de <_free_r+0x4e>
 80031c6:	6821      	ldr	r1, [r4, #0]
 80031c8:	1862      	adds	r2, r4, r1
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bf04      	itt	eq
 80031ce:	681a      	ldreq	r2, [r3, #0]
 80031d0:	685b      	ldreq	r3, [r3, #4]
 80031d2:	6063      	str	r3, [r4, #4]
 80031d4:	bf04      	itt	eq
 80031d6:	1852      	addeq	r2, r2, r1
 80031d8:	6022      	streq	r2, [r4, #0]
 80031da:	602c      	str	r4, [r5, #0]
 80031dc:	e7ec      	b.n	80031b8 <_free_r+0x28>
 80031de:	461a      	mov	r2, r3
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b10b      	cbz	r3, 80031e8 <_free_r+0x58>
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	d9fa      	bls.n	80031de <_free_r+0x4e>
 80031e8:	6811      	ldr	r1, [r2, #0]
 80031ea:	1855      	adds	r5, r2, r1
 80031ec:	42a5      	cmp	r5, r4
 80031ee:	d10b      	bne.n	8003208 <_free_r+0x78>
 80031f0:	6824      	ldr	r4, [r4, #0]
 80031f2:	4421      	add	r1, r4
 80031f4:	1854      	adds	r4, r2, r1
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	6011      	str	r1, [r2, #0]
 80031fa:	d1dd      	bne.n	80031b8 <_free_r+0x28>
 80031fc:	681c      	ldr	r4, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	6053      	str	r3, [r2, #4]
 8003202:	4421      	add	r1, r4
 8003204:	6011      	str	r1, [r2, #0]
 8003206:	e7d7      	b.n	80031b8 <_free_r+0x28>
 8003208:	d902      	bls.n	8003210 <_free_r+0x80>
 800320a:	230c      	movs	r3, #12
 800320c:	6003      	str	r3, [r0, #0]
 800320e:	e7d3      	b.n	80031b8 <_free_r+0x28>
 8003210:	6825      	ldr	r5, [r4, #0]
 8003212:	1961      	adds	r1, r4, r5
 8003214:	428b      	cmp	r3, r1
 8003216:	bf04      	itt	eq
 8003218:	6819      	ldreq	r1, [r3, #0]
 800321a:	685b      	ldreq	r3, [r3, #4]
 800321c:	6063      	str	r3, [r4, #4]
 800321e:	bf04      	itt	eq
 8003220:	1949      	addeq	r1, r1, r5
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	6054      	str	r4, [r2, #4]
 8003226:	e7c7      	b.n	80031b8 <_free_r+0x28>
 8003228:	b003      	add	sp, #12
 800322a:	bd30      	pop	{r4, r5, pc}
 800322c:	200008c0 	.word	0x200008c0

08003230 <_malloc_r>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	1ccd      	adds	r5, r1, #3
 8003234:	f025 0503 	bic.w	r5, r5, #3
 8003238:	3508      	adds	r5, #8
 800323a:	2d0c      	cmp	r5, #12
 800323c:	bf38      	it	cc
 800323e:	250c      	movcc	r5, #12
 8003240:	2d00      	cmp	r5, #0
 8003242:	4606      	mov	r6, r0
 8003244:	db01      	blt.n	800324a <_malloc_r+0x1a>
 8003246:	42a9      	cmp	r1, r5
 8003248:	d903      	bls.n	8003252 <_malloc_r+0x22>
 800324a:	230c      	movs	r3, #12
 800324c:	6033      	str	r3, [r6, #0]
 800324e:	2000      	movs	r0, #0
 8003250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003252:	f000 f87d 	bl	8003350 <__malloc_lock>
 8003256:	4921      	ldr	r1, [pc, #132]	; (80032dc <_malloc_r+0xac>)
 8003258:	680a      	ldr	r2, [r1, #0]
 800325a:	4614      	mov	r4, r2
 800325c:	b99c      	cbnz	r4, 8003286 <_malloc_r+0x56>
 800325e:	4f20      	ldr	r7, [pc, #128]	; (80032e0 <_malloc_r+0xb0>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b923      	cbnz	r3, 800326e <_malloc_r+0x3e>
 8003264:	4621      	mov	r1, r4
 8003266:	4630      	mov	r0, r6
 8003268:	f000 f862 	bl	8003330 <_sbrk_r>
 800326c:	6038      	str	r0, [r7, #0]
 800326e:	4629      	mov	r1, r5
 8003270:	4630      	mov	r0, r6
 8003272:	f000 f85d 	bl	8003330 <_sbrk_r>
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	d123      	bne.n	80032c2 <_malloc_r+0x92>
 800327a:	230c      	movs	r3, #12
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	4630      	mov	r0, r6
 8003280:	f000 f86c 	bl	800335c <__malloc_unlock>
 8003284:	e7e3      	b.n	800324e <_malloc_r+0x1e>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	1b5b      	subs	r3, r3, r5
 800328a:	d417      	bmi.n	80032bc <_malloc_r+0x8c>
 800328c:	2b0b      	cmp	r3, #11
 800328e:	d903      	bls.n	8003298 <_malloc_r+0x68>
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	441c      	add	r4, r3
 8003294:	6025      	str	r5, [r4, #0]
 8003296:	e004      	b.n	80032a2 <_malloc_r+0x72>
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	42a2      	cmp	r2, r4
 800329c:	bf0c      	ite	eq
 800329e:	600b      	streq	r3, [r1, #0]
 80032a0:	6053      	strne	r3, [r2, #4]
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f85a 	bl	800335c <__malloc_unlock>
 80032a8:	f104 000b 	add.w	r0, r4, #11
 80032ac:	1d23      	adds	r3, r4, #4
 80032ae:	f020 0007 	bic.w	r0, r0, #7
 80032b2:	1ac2      	subs	r2, r0, r3
 80032b4:	d0cc      	beq.n	8003250 <_malloc_r+0x20>
 80032b6:	1a1b      	subs	r3, r3, r0
 80032b8:	50a3      	str	r3, [r4, r2]
 80032ba:	e7c9      	b.n	8003250 <_malloc_r+0x20>
 80032bc:	4622      	mov	r2, r4
 80032be:	6864      	ldr	r4, [r4, #4]
 80032c0:	e7cc      	b.n	800325c <_malloc_r+0x2c>
 80032c2:	1cc4      	adds	r4, r0, #3
 80032c4:	f024 0403 	bic.w	r4, r4, #3
 80032c8:	42a0      	cmp	r0, r4
 80032ca:	d0e3      	beq.n	8003294 <_malloc_r+0x64>
 80032cc:	1a21      	subs	r1, r4, r0
 80032ce:	4630      	mov	r0, r6
 80032d0:	f000 f82e 	bl	8003330 <_sbrk_r>
 80032d4:	3001      	adds	r0, #1
 80032d6:	d1dd      	bne.n	8003294 <_malloc_r+0x64>
 80032d8:	e7cf      	b.n	800327a <_malloc_r+0x4a>
 80032da:	bf00      	nop
 80032dc:	200008c0 	.word	0x200008c0
 80032e0:	200008c4 	.word	0x200008c4

080032e4 <_realloc_r>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	4607      	mov	r7, r0
 80032e8:	4614      	mov	r4, r2
 80032ea:	460e      	mov	r6, r1
 80032ec:	b921      	cbnz	r1, 80032f8 <_realloc_r+0x14>
 80032ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032f2:	4611      	mov	r1, r2
 80032f4:	f7ff bf9c 	b.w	8003230 <_malloc_r>
 80032f8:	b922      	cbnz	r2, 8003304 <_realloc_r+0x20>
 80032fa:	f7ff ff49 	bl	8003190 <_free_r>
 80032fe:	4625      	mov	r5, r4
 8003300:	4628      	mov	r0, r5
 8003302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003304:	f000 f830 	bl	8003368 <_malloc_usable_size_r>
 8003308:	42a0      	cmp	r0, r4
 800330a:	d20f      	bcs.n	800332c <_realloc_r+0x48>
 800330c:	4621      	mov	r1, r4
 800330e:	4638      	mov	r0, r7
 8003310:	f7ff ff8e 	bl	8003230 <_malloc_r>
 8003314:	4605      	mov	r5, r0
 8003316:	2800      	cmp	r0, #0
 8003318:	d0f2      	beq.n	8003300 <_realloc_r+0x1c>
 800331a:	4631      	mov	r1, r6
 800331c:	4622      	mov	r2, r4
 800331e:	f7ff ff0f 	bl	8003140 <memcpy>
 8003322:	4631      	mov	r1, r6
 8003324:	4638      	mov	r0, r7
 8003326:	f7ff ff33 	bl	8003190 <_free_r>
 800332a:	e7e9      	b.n	8003300 <_realloc_r+0x1c>
 800332c:	4635      	mov	r5, r6
 800332e:	e7e7      	b.n	8003300 <_realloc_r+0x1c>

08003330 <_sbrk_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4d06      	ldr	r5, [pc, #24]	; (800334c <_sbrk_r+0x1c>)
 8003334:	2300      	movs	r3, #0
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	f7fe f96e 	bl	800161c <_sbrk>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_sbrk_r+0x1a>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_sbrk_r+0x1a>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000978 	.word	0x20000978

08003350 <__malloc_lock>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__malloc_lock+0x8>)
 8003352:	f000 b811 	b.w	8003378 <__retarget_lock_acquire_recursive>
 8003356:	bf00      	nop
 8003358:	20000980 	.word	0x20000980

0800335c <__malloc_unlock>:
 800335c:	4801      	ldr	r0, [pc, #4]	; (8003364 <__malloc_unlock+0x8>)
 800335e:	f000 b80c 	b.w	800337a <__retarget_lock_release_recursive>
 8003362:	bf00      	nop
 8003364:	20000980 	.word	0x20000980

08003368 <_malloc_usable_size_r>:
 8003368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336c:	1f18      	subs	r0, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfbc      	itt	lt
 8003372:	580b      	ldrlt	r3, [r1, r0]
 8003374:	18c0      	addlt	r0, r0, r3
 8003376:	4770      	bx	lr

08003378 <__retarget_lock_acquire_recursive>:
 8003378:	4770      	bx	lr

0800337a <__retarget_lock_release_recursive>:
 800337a:	4770      	bx	lr

0800337c <_init>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr

08003388 <_fini>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr
